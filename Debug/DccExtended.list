
DccExtended.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005234  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  080053bc  080053bc  000153bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800550c  0800550c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800550c  0800550c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800550c  0800550c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800550c  0800550c  0001550c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005510  08005510  00015510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005514  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000052c  200001dc  080056f0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000708  080056f0  00020708  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016458  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028a7  00000000  00000000  00036664  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cc0  00000000  00000000  00038f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ba8  00000000  00000000  00039bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019692  00000000  00000000  0003a778  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c5a3  00000000  00000000  00053e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000877dd  00000000  00000000  000603ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e7b8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003574  00000000  00000000  000e7c08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001dc 	.word	0x200001dc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080053a4 	.word	0x080053a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e0 	.word	0x200001e0
 80001c4:	080053a4 	.word	0x080053a4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001dc:	4b08      	ldr	r3, [pc, #32]	; (8000200 <HAL_Init+0x28>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a07      	ldr	r2, [pc, #28]	; (8000200 <HAL_Init+0x28>)
 80001e2:	f043 0310 	orr.w	r3, r3, #16
 80001e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001e8:	2003      	movs	r0, #3
 80001ea:	f000 f927 	bl	800043c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001ee:	2000      	movs	r0, #0
 80001f0:	f000 f808 	bl	8000204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001f4:	f004 fbf8 	bl	80049e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001f8:	2300      	movs	r3, #0
}
 80001fa:	4618      	mov	r0, r3
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	40022000 	.word	0x40022000

08000204 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800020c:	4b12      	ldr	r3, [pc, #72]	; (8000258 <HAL_InitTick+0x54>)
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b12      	ldr	r3, [pc, #72]	; (800025c <HAL_InitTick+0x58>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	4619      	mov	r1, r3
 8000216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800021a:	fbb3 f3f1 	udiv	r3, r3, r1
 800021e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000222:	4618      	mov	r0, r3
 8000224:	f000 f93f 	bl	80004a6 <HAL_SYSTICK_Config>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800022e:	2301      	movs	r3, #1
 8000230:	e00e      	b.n	8000250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2b0f      	cmp	r3, #15
 8000236:	d80a      	bhi.n	800024e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000238:	2200      	movs	r2, #0
 800023a:	6879      	ldr	r1, [r7, #4]
 800023c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000240:	f000 f907 	bl	8000452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000244:	4a06      	ldr	r2, [pc, #24]	; (8000260 <HAL_InitTick+0x5c>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800024a:	2300      	movs	r3, #0
 800024c:	e000      	b.n	8000250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800024e:	2301      	movs	r3, #1
}
 8000250:	4618      	mov	r0, r3
 8000252:	3708      	adds	r7, #8
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	20000008 	.word	0x20000008
 800025c:	20000004 	.word	0x20000004
 8000260:	20000000 	.word	0x20000000

08000264 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000268:	4b06      	ldr	r3, [pc, #24]	; (8000284 <HAL_IncTick+0x20>)
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	461a      	mov	r2, r3
 800026e:	4b06      	ldr	r3, [pc, #24]	; (8000288 <HAL_IncTick+0x24>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4413      	add	r3, r2
 8000274:	4a04      	ldr	r2, [pc, #16]	; (8000288 <HAL_IncTick+0x24>)
 8000276:	6013      	str	r3, [r2, #0]
}
 8000278:	bf00      	nop
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	20000004 	.word	0x20000004
 8000288:	20000208 	.word	0x20000208

0800028c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000290:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <HAL_GetTick+0x14>)
 8000292:	681b      	ldr	r3, [r3, #0]
}
 8000294:	4618      	mov	r0, r3
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	20000208 	.word	0x20000208

080002a4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f003 0307 	and.w	r3, r3, #7
 80002b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <NVIC_SetPriorityGrouping+0x44>)
 80002b6:	68db      	ldr	r3, [r3, #12]
 80002b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002ba:	68ba      	ldr	r2, [r7, #8]
 80002bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002c0:	4013      	ands	r3, r2
 80002c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002d6:	4a04      	ldr	r2, [pc, #16]	; (80002e8 <NVIC_SetPriorityGrouping+0x44>)
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	60d3      	str	r3, [r2, #12]
}
 80002dc:	bf00      	nop
 80002de:	3714      	adds	r7, #20
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr
 80002e8:	e000ed00 	.word	0xe000ed00

080002ec <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002f0:	4b04      	ldr	r3, [pc, #16]	; (8000304 <NVIC_GetPriorityGrouping+0x18>)
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	0a1b      	lsrs	r3, r3, #8
 80002f6:	f003 0307 	and.w	r3, r3, #7
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr
 8000304:	e000ed00 	.word	0xe000ed00

08000308 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	f003 021f 	and.w	r2, r3, #31
 8000318:	4907      	ldr	r1, [pc, #28]	; (8000338 <NVIC_EnableIRQ+0x30>)
 800031a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031e:	095b      	lsrs	r3, r3, #5
 8000320:	2001      	movs	r0, #1
 8000322:	fa00 f202 	lsl.w	r2, r0, r2
 8000326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800032a:	bf00      	nop
 800032c:	370c      	adds	r7, #12
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	e000e100 	.word	0xe000e100

0800033c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	6039      	str	r1, [r7, #0]
 8000346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034c:	2b00      	cmp	r3, #0
 800034e:	da0b      	bge.n	8000368 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	b2da      	uxtb	r2, r3
 8000354:	490c      	ldr	r1, [pc, #48]	; (8000388 <NVIC_SetPriority+0x4c>)
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	f003 030f 	and.w	r3, r3, #15
 800035c:	3b04      	subs	r3, #4
 800035e:	0112      	lsls	r2, r2, #4
 8000360:	b2d2      	uxtb	r2, r2
 8000362:	440b      	add	r3, r1
 8000364:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000366:	e009      	b.n	800037c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	b2da      	uxtb	r2, r3
 800036c:	4907      	ldr	r1, [pc, #28]	; (800038c <NVIC_SetPriority+0x50>)
 800036e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000372:	0112      	lsls	r2, r2, #4
 8000374:	b2d2      	uxtb	r2, r2
 8000376:	440b      	add	r3, r1
 8000378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800037c:	bf00      	nop
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr
 8000388:	e000ed00 	.word	0xe000ed00
 800038c:	e000e100 	.word	0xe000e100

08000390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000390:	b480      	push	{r7}
 8000392:	b089      	sub	sp, #36	; 0x24
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	60b9      	str	r1, [r7, #8]
 800039a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	f003 0307 	and.w	r3, r3, #7
 80003a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003a4:	69fb      	ldr	r3, [r7, #28]
 80003a6:	f1c3 0307 	rsb	r3, r3, #7
 80003aa:	2b04      	cmp	r3, #4
 80003ac:	bf28      	it	cs
 80003ae:	2304      	movcs	r3, #4
 80003b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003b2:	69fb      	ldr	r3, [r7, #28]
 80003b4:	3304      	adds	r3, #4
 80003b6:	2b06      	cmp	r3, #6
 80003b8:	d902      	bls.n	80003c0 <NVIC_EncodePriority+0x30>
 80003ba:	69fb      	ldr	r3, [r7, #28]
 80003bc:	3b03      	subs	r3, #3
 80003be:	e000      	b.n	80003c2 <NVIC_EncodePriority+0x32>
 80003c0:	2300      	movs	r3, #0
 80003c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80003c8:	69bb      	ldr	r3, [r7, #24]
 80003ca:	fa02 f303 	lsl.w	r3, r2, r3
 80003ce:	43da      	mvns	r2, r3
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	401a      	ands	r2, r3
 80003d4:	697b      	ldr	r3, [r7, #20]
 80003d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80003dc:	697b      	ldr	r3, [r7, #20]
 80003de:	fa01 f303 	lsl.w	r3, r1, r3
 80003e2:	43d9      	mvns	r1, r3
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003e8:	4313      	orrs	r3, r2
         );
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	3724      	adds	r7, #36	; 0x24
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
	...

080003f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	3b01      	subs	r3, #1
 8000404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000408:	d301      	bcc.n	800040e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800040a:	2301      	movs	r3, #1
 800040c:	e00f      	b.n	800042e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800040e:	4a0a      	ldr	r2, [pc, #40]	; (8000438 <SysTick_Config+0x40>)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	3b01      	subs	r3, #1
 8000414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000416:	210f      	movs	r1, #15
 8000418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800041c:	f7ff ff8e 	bl	800033c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <SysTick_Config+0x40>)
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000426:	4b04      	ldr	r3, [pc, #16]	; (8000438 <SysTick_Config+0x40>)
 8000428:	2207      	movs	r2, #7
 800042a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800042c:	2300      	movs	r3, #0
}
 800042e:	4618      	mov	r0, r3
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	e000e010 	.word	0xe000e010

0800043c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000444:	6878      	ldr	r0, [r7, #4]
 8000446:	f7ff ff2d 	bl	80002a4 <NVIC_SetPriorityGrouping>
}
 800044a:	bf00      	nop
 800044c:	3708      	adds	r7, #8
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}

08000452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000452:	b580      	push	{r7, lr}
 8000454:	b086      	sub	sp, #24
 8000456:	af00      	add	r7, sp, #0
 8000458:	4603      	mov	r3, r0
 800045a:	60b9      	str	r1, [r7, #8]
 800045c:	607a      	str	r2, [r7, #4]
 800045e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000464:	f7ff ff42 	bl	80002ec <NVIC_GetPriorityGrouping>
 8000468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800046a:	687a      	ldr	r2, [r7, #4]
 800046c:	68b9      	ldr	r1, [r7, #8]
 800046e:	6978      	ldr	r0, [r7, #20]
 8000470:	f7ff ff8e 	bl	8000390 <NVIC_EncodePriority>
 8000474:	4602      	mov	r2, r0
 8000476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800047a:	4611      	mov	r1, r2
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff ff5d 	bl	800033c <NVIC_SetPriority>
}
 8000482:	bf00      	nop
 8000484:	3718      	adds	r7, #24
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}

0800048a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800048a:	b580      	push	{r7, lr}
 800048c:	b082      	sub	sp, #8
 800048e:	af00      	add	r7, sp, #0
 8000490:	4603      	mov	r3, r0
 8000492:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000498:	4618      	mov	r0, r3
 800049a:	f7ff ff35 	bl	8000308 <NVIC_EnableIRQ>
}
 800049e:	bf00      	nop
 80004a0:	3708      	adds	r7, #8
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}

080004a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004a6:	b580      	push	{r7, lr}
 80004a8:	b082      	sub	sp, #8
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004ae:	6878      	ldr	r0, [r7, #4]
 80004b0:	f7ff ffa2 	bl	80003f8 <SysTick_Config>
 80004b4:	4603      	mov	r3, r0
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}

080004be <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80004be:	b580      	push	{r7, lr}
 80004c0:	b084      	sub	sp, #16
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80004c6:	2300      	movs	r3, #0
 80004c8:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d101      	bne.n	80004d4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80004d0:	2301      	movs	r3, #1
 80004d2:	e037      	b.n	8000544 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2202      	movs	r2, #2
 80004d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80004ea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80004ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80004f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	68db      	ldr	r3, [r3, #12]
 80004fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000504:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000510:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000518:	68fa      	ldr	r2, [r7, #12]
 800051a:	4313      	orrs	r3, r2
 800051c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	68fa      	ldr	r2, [r7, #12]
 8000524:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f000 f97e 	bl	8000828 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2200      	movs	r2, #0
 8000530:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2201      	movs	r2, #1
 8000536:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000542:	2300      	movs	r3, #0
}  
 8000544:	4618      	mov	r0, r3
 8000546:	3710      	adds	r7, #16
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af00      	add	r7, sp, #0
 8000552:	60f8      	str	r0, [r7, #12]
 8000554:	60b9      	str	r1, [r7, #8]
 8000556:	607a      	str	r2, [r7, #4]
 8000558:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800055a:	2300      	movs	r3, #0
 800055c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000564:	2b01      	cmp	r3, #1
 8000566:	d101      	bne.n	800056c <HAL_DMA_Start_IT+0x20>
 8000568:	2302      	movs	r3, #2
 800056a:	e04a      	b.n	8000602 <HAL_DMA_Start_IT+0xb6>
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	2201      	movs	r2, #1
 8000570:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800057a:	2b01      	cmp	r3, #1
 800057c:	d13a      	bne.n	80005f4 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	2202      	movs	r2, #2
 8000582:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	2200      	movs	r2, #0
 800058a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f022 0201 	bic.w	r2, r2, #1
 800059a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	68b9      	ldr	r1, [r7, #8]
 80005a2:	68f8      	ldr	r0, [r7, #12]
 80005a4:	f000 f912 	bl	80007cc <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d008      	beq.n	80005c2 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f042 020e 	orr.w	r2, r2, #14
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	e00f      	b.n	80005e2 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f042 020a 	orr.w	r2, r2, #10
 80005d0:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f022 0204 	bic.w	r2, r2, #4
 80005e0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f042 0201 	orr.w	r2, r2, #1
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	e005      	b.n	8000600 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	2200      	movs	r2, #0
 80005f8:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80005fc:	2302      	movs	r3, #2
 80005fe:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8000600:	7dfb      	ldrb	r3, [r7, #23]
} 
 8000602:	4618      	mov	r0, r3
 8000604:	3718      	adds	r7, #24
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800060a:	b580      	push	{r7, lr}
 800060c:	b084      	sub	sp, #16
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000612:	2300      	movs	r3, #0
 8000614:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800061c:	2b02      	cmp	r3, #2
 800061e:	d005      	beq.n	800062c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2204      	movs	r2, #4
 8000624:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000626:	2301      	movs	r3, #1
 8000628:	73fb      	strb	r3, [r7, #15]
 800062a:	e027      	b.n	800067c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f022 020e 	bic.w	r2, r2, #14
 800063a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f022 0201 	bic.w	r2, r2, #1
 800064a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000654:	2101      	movs	r1, #1
 8000656:	fa01 f202 	lsl.w	r2, r1, r2
 800065a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2201      	movs	r2, #1
 8000660:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2200      	movs	r2, #0
 8000668:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000670:	2b00      	cmp	r3, #0
 8000672:	d003      	beq.n	800067c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	4798      	blx	r3
    } 
  }
  return status;
 800067c:	7bfb      	ldrb	r3, [r7, #15]
}
 800067e:	4618      	mov	r0, r3
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	b084      	sub	sp, #16
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a2:	2204      	movs	r2, #4
 80006a4:	409a      	lsls	r2, r3
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	4013      	ands	r3, r2
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d024      	beq.n	80006f8 <HAL_DMA_IRQHandler+0x72>
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	f003 0304 	and.w	r3, r3, #4
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d01f      	beq.n	80006f8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f003 0320 	and.w	r3, r3, #32
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d107      	bne.n	80006d6 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f022 0204 	bic.w	r2, r2, #4
 80006d4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006de:	2104      	movs	r1, #4
 80006e0:	fa01 f202 	lsl.w	r2, r1, r2
 80006e4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d06a      	beq.n	80007c4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80006f6:	e065      	b.n	80007c4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	2202      	movs	r2, #2
 80006fe:	409a      	lsls	r2, r3
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	4013      	ands	r3, r2
 8000704:	2b00      	cmp	r3, #0
 8000706:	d02c      	beq.n	8000762 <HAL_DMA_IRQHandler+0xdc>
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	f003 0302 	and.w	r3, r3, #2
 800070e:	2b00      	cmp	r3, #0
 8000710:	d027      	beq.n	8000762 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f003 0320 	and.w	r3, r3, #32
 800071c:	2b00      	cmp	r3, #0
 800071e:	d10b      	bne.n	8000738 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f022 020a 	bic.w	r2, r2, #10
 800072e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2201      	movs	r2, #1
 8000734:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000740:	2102      	movs	r1, #2
 8000742:	fa01 f202 	lsl.w	r2, r1, r2
 8000746:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2200      	movs	r2, #0
 800074c:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000754:	2b00      	cmp	r3, #0
 8000756:	d035      	beq.n	80007c4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000760:	e030      	b.n	80007c4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000766:	2208      	movs	r2, #8
 8000768:	409a      	lsls	r2, r3
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	4013      	ands	r3, r2
 800076e:	2b00      	cmp	r3, #0
 8000770:	d028      	beq.n	80007c4 <HAL_DMA_IRQHandler+0x13e>
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	f003 0308 	and.w	r3, r3, #8
 8000778:	2b00      	cmp	r3, #0
 800077a:	d023      	beq.n	80007c4 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f022 020e 	bic.w	r2, r2, #14
 800078a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000794:	2101      	movs	r1, #1
 8000796:	fa01 f202 	lsl.w	r2, r1, r2
 800079a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2201      	movs	r2, #1
 80007a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2201      	movs	r2, #1
 80007a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2200      	movs	r2, #0
 80007ae:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d004      	beq.n	80007c4 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	4798      	blx	r3
    }
  }
}  
 80007c2:	e7ff      	b.n	80007c4 <HAL_DMA_IRQHandler+0x13e>
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	607a      	str	r2, [r7, #4]
 80007d8:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007e2:	2101      	movs	r1, #1
 80007e4:	fa01 f202 	lsl.w	r2, r1, r2
 80007e8:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	683a      	ldr	r2, [r7, #0]
 80007f0:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	2b10      	cmp	r3, #16
 80007f8:	d108      	bne.n	800080c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	68ba      	ldr	r2, [r7, #8]
 8000808:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800080a:	e007      	b.n	800081c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	68ba      	ldr	r2, [r7, #8]
 8000812:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	60da      	str	r2, [r3, #12]
}
 800081c:	bf00      	nop
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <DMA_CalcBaseAndBitshift+0x34>)
 8000838:	4413      	add	r3, r2
 800083a:	4a09      	ldr	r2, [pc, #36]	; (8000860 <DMA_CalcBaseAndBitshift+0x38>)
 800083c:	fba2 2303 	umull	r2, r3, r2, r3
 8000840:	091b      	lsrs	r3, r3, #4
 8000842:	009a      	lsls	r2, r3, #2
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4a06      	ldr	r2, [pc, #24]	; (8000864 <DMA_CalcBaseAndBitshift+0x3c>)
 800084c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	bffdfff8 	.word	0xbffdfff8
 8000860:	cccccccd 	.word	0xcccccccd
 8000864:	40020000 	.word	0x40020000

08000868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000868:	b480      	push	{r7}
 800086a:	b087      	sub	sp, #28
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800087e:	e14e      	b.n	8000b1e <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	2101      	movs	r1, #1
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	fa01 f303 	lsl.w	r3, r1, r3
 800088c:	4013      	ands	r3, r2
 800088e:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	2b00      	cmp	r3, #0
 8000894:	f000 8140 	beq.w	8000b18 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	2b02      	cmp	r3, #2
 800089e:	d003      	beq.n	80008a8 <HAL_GPIO_Init+0x40>
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	2b12      	cmp	r3, #18
 80008a6:	d123      	bne.n	80008f0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	08da      	lsrs	r2, r3, #3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3208      	adds	r2, #8
 80008b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	f003 0307 	and.w	r3, r3, #7
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	220f      	movs	r2, #15
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	43db      	mvns	r3, r3
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	4013      	ands	r3, r2
 80008ca:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	691a      	ldr	r2, [r3, #16]
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	f003 0307 	and.w	r3, r3, #7
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	693a      	ldr	r2, [r7, #16]
 80008de:	4313      	orrs	r3, r2
 80008e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	08da      	lsrs	r2, r3, #3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	3208      	adds	r2, #8
 80008ea:	6939      	ldr	r1, [r7, #16]
 80008ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	2203      	movs	r2, #3
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	43db      	mvns	r3, r3
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	4013      	ands	r3, r2
 8000906:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	f003 0203 	and.w	r2, r3, #3
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	693a      	ldr	r2, [r7, #16]
 800091a:	4313      	orrs	r3, r2
 800091c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	693a      	ldr	r2, [r7, #16]
 8000922:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d00b      	beq.n	8000944 <HAL_GPIO_Init+0xdc>
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	2b02      	cmp	r3, #2
 8000932:	d007      	beq.n	8000944 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000938:	2b11      	cmp	r3, #17
 800093a:	d003      	beq.n	8000944 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	2b12      	cmp	r3, #18
 8000942:	d130      	bne.n	80009a6 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	2203      	movs	r2, #3
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	4013      	ands	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	68da      	ldr	r2, [r3, #12]
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	693a      	ldr	r2, [r7, #16]
 800096a:	4313      	orrs	r3, r2
 800096c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800097a:	2201      	movs	r2, #1
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	43db      	mvns	r3, r3
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	4013      	ands	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	091b      	lsrs	r3, r3, #4
 8000990:	f003 0201 	and.w	r2, r3, #1
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	4313      	orrs	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	68db      	ldr	r3, [r3, #12]
 80009aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	2203      	movs	r2, #3
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	43db      	mvns	r3, r3
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	4013      	ands	r3, r2
 80009bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	689a      	ldr	r2, [r3, #8]
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009de:	2b00      	cmp	r3, #0
 80009e0:	f000 809a 	beq.w	8000b18 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e4:	4b55      	ldr	r3, [pc, #340]	; (8000b3c <HAL_GPIO_Init+0x2d4>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a54      	ldr	r2, [pc, #336]	; (8000b3c <HAL_GPIO_Init+0x2d4>)
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b52      	ldr	r3, [pc, #328]	; (8000b3c <HAL_GPIO_Init+0x2d4>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80009fc:	4a50      	ldr	r2, [pc, #320]	; (8000b40 <HAL_GPIO_Init+0x2d8>)
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	089b      	lsrs	r3, r3, #2
 8000a02:	3302      	adds	r3, #2
 8000a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a08:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	f003 0303 	and.w	r3, r3, #3
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	220f      	movs	r2, #15
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	43db      	mvns	r3, r3
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a26:	d013      	beq.n	8000a50 <HAL_GPIO_Init+0x1e8>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a46      	ldr	r2, [pc, #280]	; (8000b44 <HAL_GPIO_Init+0x2dc>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d00d      	beq.n	8000a4c <HAL_GPIO_Init+0x1e4>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a45      	ldr	r2, [pc, #276]	; (8000b48 <HAL_GPIO_Init+0x2e0>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d007      	beq.n	8000a48 <HAL_GPIO_Init+0x1e0>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a44      	ldr	r2, [pc, #272]	; (8000b4c <HAL_GPIO_Init+0x2e4>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d101      	bne.n	8000a44 <HAL_GPIO_Init+0x1dc>
 8000a40:	2303      	movs	r3, #3
 8000a42:	e006      	b.n	8000a52 <HAL_GPIO_Init+0x1ea>
 8000a44:	2305      	movs	r3, #5
 8000a46:	e004      	b.n	8000a52 <HAL_GPIO_Init+0x1ea>
 8000a48:	2302      	movs	r3, #2
 8000a4a:	e002      	b.n	8000a52 <HAL_GPIO_Init+0x1ea>
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e000      	b.n	8000a52 <HAL_GPIO_Init+0x1ea>
 8000a50:	2300      	movs	r3, #0
 8000a52:	697a      	ldr	r2, [r7, #20]
 8000a54:	f002 0203 	and.w	r2, r2, #3
 8000a58:	0092      	lsls	r2, r2, #2
 8000a5a:	4093      	lsls	r3, r2
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000a62:	4937      	ldr	r1, [pc, #220]	; (8000b40 <HAL_GPIO_Init+0x2d8>)
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	089b      	lsrs	r3, r3, #2
 8000a68:	3302      	adds	r3, #2
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a70:	4b37      	ldr	r3, [pc, #220]	; (8000b50 <HAL_GPIO_Init+0x2e8>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d003      	beq.n	8000a94 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a94:	4a2e      	ldr	r2, [pc, #184]	; (8000b50 <HAL_GPIO_Init+0x2e8>)
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a9a:	4b2d      	ldr	r3, [pc, #180]	; (8000b50 <HAL_GPIO_Init+0x2e8>)
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	43db      	mvns	r3, r3
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d003      	beq.n	8000abe <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000abe:	4a24      	ldr	r2, [pc, #144]	; (8000b50 <HAL_GPIO_Init+0x2e8>)
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ac4:	4b22      	ldr	r3, [pc, #136]	; (8000b50 <HAL_GPIO_Init+0x2e8>)
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	43db      	mvns	r3, r3
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d003      	beq.n	8000ae8 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ae8:	4a19      	ldr	r2, [pc, #100]	; (8000b50 <HAL_GPIO_Init+0x2e8>)
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <HAL_GPIO_Init+0x2e8>)
 8000af0:	68db      	ldr	r3, [r3, #12]
 8000af2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	43db      	mvns	r3, r3
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	4013      	ands	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d003      	beq.n	8000b12 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b12:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <HAL_GPIO_Init+0x2e8>)
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	fa22 f303 	lsr.w	r3, r2, r3
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	f47f aea9 	bne.w	8000880 <HAL_GPIO_Init+0x18>
  }
}
 8000b2e:	bf00      	nop
 8000b30:	371c      	adds	r7, #28
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40010000 	.word	0x40010000
 8000b44:	48000400 	.word	0x48000400
 8000b48:	48000800 	.word	0x48000800
 8000b4c:	48000c00 	.word	0x48000c00
 8000b50:	40010400 	.word	0x40010400

08000b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	807b      	strh	r3, [r7, #2]
 8000b60:	4613      	mov	r3, r2
 8000b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b64:	787b      	ldrb	r3, [r7, #1]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d003      	beq.n	8000b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b6a:	887a      	ldrh	r2, [r7, #2]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b70:	e002      	b.n	8000b78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b72:	887a      	ldrh	r2, [r7, #2]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d102      	bne.n	8000b9e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	f000 beda 	b.w	8001952 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	f000 816e 	beq.w	8000e8a <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000bae:	4bb5      	ldr	r3, [pc, #724]	; (8000e84 <HAL_RCC_OscConfig+0x300>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f003 030c 	and.w	r3, r3, #12
 8000bb6:	2b04      	cmp	r3, #4
 8000bb8:	d00c      	beq.n	8000bd4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bba:	4bb2      	ldr	r3, [pc, #712]	; (8000e84 <HAL_RCC_OscConfig+0x300>)
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f003 030c 	and.w	r3, r3, #12
 8000bc2:	2b08      	cmp	r3, #8
 8000bc4:	d15a      	bne.n	8000c7c <HAL_RCC_OscConfig+0xf8>
 8000bc6:	4baf      	ldr	r3, [pc, #700]	; (8000e84 <HAL_RCC_OscConfig+0x300>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bd2:	d153      	bne.n	8000c7c <HAL_RCC_OscConfig+0xf8>
 8000bd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bd8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bdc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000be0:	fa93 f3a3 	rbit	r3, r3
 8000be4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000be8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bec:	fab3 f383 	clz	r3, r3
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	095b      	lsrs	r3, r3, #5
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d102      	bne.n	8000c06 <HAL_RCC_OscConfig+0x82>
 8000c00:	4ba0      	ldr	r3, [pc, #640]	; (8000e84 <HAL_RCC_OscConfig+0x300>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	e015      	b.n	8000c32 <HAL_RCC_OscConfig+0xae>
 8000c06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c0a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c0e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000c12:	fa93 f3a3 	rbit	r3, r3
 8000c16:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000c1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c1e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000c22:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000c26:	fa93 f3a3 	rbit	r3, r3
 8000c2a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000c2e:	4b95      	ldr	r3, [pc, #596]	; (8000e84 <HAL_RCC_OscConfig+0x300>)
 8000c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c36:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000c3a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000c3e:	fa92 f2a2 	rbit	r2, r2
 8000c42:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8000c46:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000c4a:	fab2 f282 	clz	r2, r2
 8000c4e:	b252      	sxtb	r2, r2
 8000c50:	f042 0220 	orr.w	r2, r2, #32
 8000c54:	b252      	sxtb	r2, r2
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	f002 021f 	and.w	r2, r2, #31
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c62:	4013      	ands	r3, r2
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f000 810f 	beq.w	8000e88 <HAL_RCC_OscConfig+0x304>
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	f040 8109 	bne.w	8000e88 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	f000 be6b 	b.w	8001952 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c86:	d106      	bne.n	8000c96 <HAL_RCC_OscConfig+0x112>
 8000c88:	4b7e      	ldr	r3, [pc, #504]	; (8000e84 <HAL_RCC_OscConfig+0x300>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a7d      	ldr	r2, [pc, #500]	; (8000e84 <HAL_RCC_OscConfig+0x300>)
 8000c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c92:	6013      	str	r3, [r2, #0]
 8000c94:	e030      	b.n	8000cf8 <HAL_RCC_OscConfig+0x174>
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d10c      	bne.n	8000cba <HAL_RCC_OscConfig+0x136>
 8000ca0:	4b78      	ldr	r3, [pc, #480]	; (8000e84 <HAL_RCC_OscConfig+0x300>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a77      	ldr	r2, [pc, #476]	; (8000e84 <HAL_RCC_OscConfig+0x300>)
 8000ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	4b75      	ldr	r3, [pc, #468]	; (8000e84 <HAL_RCC_OscConfig+0x300>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a74      	ldr	r2, [pc, #464]	; (8000e84 <HAL_RCC_OscConfig+0x300>)
 8000cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cb6:	6013      	str	r3, [r2, #0]
 8000cb8:	e01e      	b.n	8000cf8 <HAL_RCC_OscConfig+0x174>
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cc4:	d10c      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x15c>
 8000cc6:	4b6f      	ldr	r3, [pc, #444]	; (8000e84 <HAL_RCC_OscConfig+0x300>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a6e      	ldr	r2, [pc, #440]	; (8000e84 <HAL_RCC_OscConfig+0x300>)
 8000ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cd0:	6013      	str	r3, [r2, #0]
 8000cd2:	4b6c      	ldr	r3, [pc, #432]	; (8000e84 <HAL_RCC_OscConfig+0x300>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a6b      	ldr	r2, [pc, #428]	; (8000e84 <HAL_RCC_OscConfig+0x300>)
 8000cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cdc:	6013      	str	r3, [r2, #0]
 8000cde:	e00b      	b.n	8000cf8 <HAL_RCC_OscConfig+0x174>
 8000ce0:	4b68      	ldr	r3, [pc, #416]	; (8000e84 <HAL_RCC_OscConfig+0x300>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a67      	ldr	r2, [pc, #412]	; (8000e84 <HAL_RCC_OscConfig+0x300>)
 8000ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cea:	6013      	str	r3, [r2, #0]
 8000cec:	4b65      	ldr	r3, [pc, #404]	; (8000e84 <HAL_RCC_OscConfig+0x300>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a64      	ldr	r2, [pc, #400]	; (8000e84 <HAL_RCC_OscConfig+0x300>)
 8000cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cf6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000cf8:	4b62      	ldr	r3, [pc, #392]	; (8000e84 <HAL_RCC_OscConfig+0x300>)
 8000cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cfc:	f023 020f 	bic.w	r2, r3, #15
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	495f      	ldr	r1, [pc, #380]	; (8000e84 <HAL_RCC_OscConfig+0x300>)
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d05a      	beq.n	8000dcc <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d16:	f7ff fab9 	bl	800028c <HAL_GetTick>
 8000d1a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d1e:	e00a      	b.n	8000d36 <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d20:	f7ff fab4 	bl	800028c <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	2b64      	cmp	r3, #100	; 0x64
 8000d2e:	d902      	bls.n	8000d36 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8000d30:	2303      	movs	r3, #3
 8000d32:	f000 be0e 	b.w	8001952 <HAL_RCC_OscConfig+0xdce>
 8000d36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d3a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d3e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000d42:	fa93 f3a3 	rbit	r3, r3
 8000d46:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8000d4a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d4e:	fab3 f383 	clz	r3, r3
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	095b      	lsrs	r3, r3, #5
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d102      	bne.n	8000d68 <HAL_RCC_OscConfig+0x1e4>
 8000d62:	4b48      	ldr	r3, [pc, #288]	; (8000e84 <HAL_RCC_OscConfig+0x300>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	e015      	b.n	8000d94 <HAL_RCC_OscConfig+0x210>
 8000d68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d6c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d70:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000d74:	fa93 f3a3 	rbit	r3, r3
 8000d78:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000d7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d80:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000d84:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000d88:	fa93 f3a3 	rbit	r3, r3
 8000d8c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000d90:	4b3c      	ldr	r3, [pc, #240]	; (8000e84 <HAL_RCC_OscConfig+0x300>)
 8000d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d98:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000d9c:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000da0:	fa92 f2a2 	rbit	r2, r2
 8000da4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8000da8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000dac:	fab2 f282 	clz	r2, r2
 8000db0:	b252      	sxtb	r2, r2
 8000db2:	f042 0220 	orr.w	r2, r2, #32
 8000db6:	b252      	sxtb	r2, r2
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	f002 021f 	and.w	r2, r2, #31
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d0aa      	beq.n	8000d20 <HAL_RCC_OscConfig+0x19c>
 8000dca:	e05e      	b.n	8000e8a <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dcc:	f7ff fa5e 	bl	800028c <HAL_GetTick>
 8000dd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dd4:	e00a      	b.n	8000dec <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dd6:	f7ff fa59 	bl	800028c <HAL_GetTick>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	2b64      	cmp	r3, #100	; 0x64
 8000de4:	d902      	bls.n	8000dec <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000de6:	2303      	movs	r3, #3
 8000de8:	f000 bdb3 	b.w	8001952 <HAL_RCC_OscConfig+0xdce>
 8000dec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000df0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000df8:	fa93 f3a3 	rbit	r3, r3
 8000dfc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8000e00:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e04:	fab3 f383 	clz	r3, r3
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	095b      	lsrs	r3, r3, #5
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d102      	bne.n	8000e1e <HAL_RCC_OscConfig+0x29a>
 8000e18:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <HAL_RCC_OscConfig+0x300>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	e015      	b.n	8000e4a <HAL_RCC_OscConfig+0x2c6>
 8000e1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e22:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e26:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000e2a:	fa93 f3a3 	rbit	r3, r3
 8000e2e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000e32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e36:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000e3a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000e3e:	fa93 f3a3 	rbit	r3, r3
 8000e42:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000e46:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <HAL_RCC_OscConfig+0x300>)
 8000e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e4e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000e52:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000e56:	fa92 f2a2 	rbit	r2, r2
 8000e5a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000e5e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000e62:	fab2 f282 	clz	r2, r2
 8000e66:	b252      	sxtb	r2, r2
 8000e68:	f042 0220 	orr.w	r2, r2, #32
 8000e6c:	b252      	sxtb	r2, r2
 8000e6e:	b2d2      	uxtb	r2, r2
 8000e70:	f002 021f 	and.w	r2, r2, #31
 8000e74:	2101      	movs	r1, #1
 8000e76:	fa01 f202 	lsl.w	r2, r1, r2
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d1aa      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x252>
 8000e80:	e003      	b.n	8000e8a <HAL_RCC_OscConfig+0x306>
 8000e82:	bf00      	nop
 8000e84:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f000 8170 	beq.w	800117a <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e9a:	4bd0      	ldr	r3, [pc, #832]	; (80011dc <HAL_RCC_OscConfig+0x658>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 030c 	and.w	r3, r3, #12
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d00b      	beq.n	8000ebe <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ea6:	4bcd      	ldr	r3, [pc, #820]	; (80011dc <HAL_RCC_OscConfig+0x658>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 030c 	and.w	r3, r3, #12
 8000eae:	2b08      	cmp	r3, #8
 8000eb0:	d16d      	bne.n	8000f8e <HAL_RCC_OscConfig+0x40a>
 8000eb2:	4bca      	ldr	r3, [pc, #808]	; (80011dc <HAL_RCC_OscConfig+0x658>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d167      	bne.n	8000f8e <HAL_RCC_OscConfig+0x40a>
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000ec8:	fa93 f3a3 	rbit	r3, r3
 8000ecc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000ed0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ed4:	fab3 f383 	clz	r3, r3
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	095b      	lsrs	r3, r3, #5
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d102      	bne.n	8000eee <HAL_RCC_OscConfig+0x36a>
 8000ee8:	4bbc      	ldr	r3, [pc, #752]	; (80011dc <HAL_RCC_OscConfig+0x658>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	e013      	b.n	8000f16 <HAL_RCC_OscConfig+0x392>
 8000eee:	2302      	movs	r3, #2
 8000ef0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000ef8:	fa93 f3a3 	rbit	r3, r3
 8000efc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000f00:	2302      	movs	r3, #2
 8000f02:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000f06:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000f0a:	fa93 f3a3 	rbit	r3, r3
 8000f0e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000f12:	4bb2      	ldr	r3, [pc, #712]	; (80011dc <HAL_RCC_OscConfig+0x658>)
 8000f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f16:	2202      	movs	r2, #2
 8000f18:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000f1c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000f20:	fa92 f2a2 	rbit	r2, r2
 8000f24:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000f28:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000f2c:	fab2 f282 	clz	r2, r2
 8000f30:	b252      	sxtb	r2, r2
 8000f32:	f042 0220 	orr.w	r2, r2, #32
 8000f36:	b252      	sxtb	r2, r2
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	f002 021f 	and.w	r2, r2, #31
 8000f3e:	2101      	movs	r1, #1
 8000f40:	fa01 f202 	lsl.w	r2, r1, r2
 8000f44:	4013      	ands	r3, r2
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d007      	beq.n	8000f5a <HAL_RCC_OscConfig+0x3d6>
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	691b      	ldr	r3, [r3, #16]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d002      	beq.n	8000f5a <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	f000 bcfc 	b.w	8001952 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f5a:	4ba0      	ldr	r3, [pc, #640]	; (80011dc <HAL_RCC_OscConfig+0x658>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	6959      	ldr	r1, [r3, #20]
 8000f68:	23f8      	movs	r3, #248	; 0xf8
 8000f6a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f6e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000f72:	fa93 f3a3 	rbit	r3, r3
 8000f76:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000f7a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000f7e:	fab3 f383 	clz	r3, r3
 8000f82:	fa01 f303 	lsl.w	r3, r1, r3
 8000f86:	4995      	ldr	r1, [pc, #596]	; (80011dc <HAL_RCC_OscConfig+0x658>)
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f8c:	e0f5      	b.n	800117a <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	691b      	ldr	r3, [r3, #16]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	f000 8085 	beq.w	80010a4 <HAL_RCC_OscConfig+0x520>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000fa4:	fa93 f3a3 	rbit	r3, r3
 8000fa8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000fac:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fb0:	fab3 f383 	clz	r3, r3
 8000fb4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fb8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc4:	f7ff f962 	bl	800028c <HAL_GetTick>
 8000fc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fcc:	e00a      	b.n	8000fe4 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fce:	f7ff f95d 	bl	800028c <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d902      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	f000 bcb7 	b.w	8001952 <HAL_RCC_OscConfig+0xdce>
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000fee:	fa93 f3a3 	rbit	r3, r3
 8000ff2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8000ff6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ffa:	fab3 f383 	clz	r3, r3
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	095b      	lsrs	r3, r3, #5
 8001002:	b2db      	uxtb	r3, r3
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b01      	cmp	r3, #1
 800100c:	d102      	bne.n	8001014 <HAL_RCC_OscConfig+0x490>
 800100e:	4b73      	ldr	r3, [pc, #460]	; (80011dc <HAL_RCC_OscConfig+0x658>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	e013      	b.n	800103c <HAL_RCC_OscConfig+0x4b8>
 8001014:	2302      	movs	r3, #2
 8001016:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800101a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800101e:	fa93 f3a3 	rbit	r3, r3
 8001022:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001026:	2302      	movs	r3, #2
 8001028:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800102c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001030:	fa93 f3a3 	rbit	r3, r3
 8001034:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001038:	4b68      	ldr	r3, [pc, #416]	; (80011dc <HAL_RCC_OscConfig+0x658>)
 800103a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103c:	2202      	movs	r2, #2
 800103e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001042:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001046:	fa92 f2a2 	rbit	r2, r2
 800104a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 800104e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001052:	fab2 f282 	clz	r2, r2
 8001056:	b252      	sxtb	r2, r2
 8001058:	f042 0220 	orr.w	r2, r2, #32
 800105c:	b252      	sxtb	r2, r2
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	f002 021f 	and.w	r2, r2, #31
 8001064:	2101      	movs	r1, #1
 8001066:	fa01 f202 	lsl.w	r2, r1, r2
 800106a:	4013      	ands	r3, r2
 800106c:	2b00      	cmp	r3, #0
 800106e:	d0ae      	beq.n	8000fce <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001070:	4b5a      	ldr	r3, [pc, #360]	; (80011dc <HAL_RCC_OscConfig+0x658>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	6959      	ldr	r1, [r3, #20]
 800107e:	23f8      	movs	r3, #248	; 0xf8
 8001080:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001084:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001088:	fa93 f3a3 	rbit	r3, r3
 800108c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8001090:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001094:	fab3 f383 	clz	r3, r3
 8001098:	fa01 f303 	lsl.w	r3, r1, r3
 800109c:	494f      	ldr	r1, [pc, #316]	; (80011dc <HAL_RCC_OscConfig+0x658>)
 800109e:	4313      	orrs	r3, r2
 80010a0:	600b      	str	r3, [r1, #0]
 80010a2:	e06a      	b.n	800117a <HAL_RCC_OscConfig+0x5f6>
 80010a4:	2301      	movs	r3, #1
 80010a6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010aa:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80010ae:	fa93 f3a3 	rbit	r3, r3
 80010b2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 80010b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ba:	fab3 f383 	clz	r3, r3
 80010be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	461a      	mov	r2, r3
 80010ca:	2300      	movs	r3, #0
 80010cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ce:	f7ff f8dd 	bl	800028c <HAL_GetTick>
 80010d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010d6:	e00a      	b.n	80010ee <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010d8:	f7ff f8d8 	bl	800028c <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d902      	bls.n	80010ee <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	f000 bc32 	b.w	8001952 <HAL_RCC_OscConfig+0xdce>
 80010ee:	2302      	movs	r3, #2
 80010f0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80010f8:	fa93 f3a3 	rbit	r3, r3
 80010fc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8001100:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001104:	fab3 f383 	clz	r3, r3
 8001108:	b2db      	uxtb	r3, r3
 800110a:	095b      	lsrs	r3, r3, #5
 800110c:	b2db      	uxtb	r3, r3
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b01      	cmp	r3, #1
 8001116:	d102      	bne.n	800111e <HAL_RCC_OscConfig+0x59a>
 8001118:	4b30      	ldr	r3, [pc, #192]	; (80011dc <HAL_RCC_OscConfig+0x658>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	e013      	b.n	8001146 <HAL_RCC_OscConfig+0x5c2>
 800111e:	2302      	movs	r3, #2
 8001120:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001124:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001128:	fa93 f3a3 	rbit	r3, r3
 800112c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001130:	2302      	movs	r3, #2
 8001132:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001136:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800113a:	fa93 f3a3 	rbit	r3, r3
 800113e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001142:	4b26      	ldr	r3, [pc, #152]	; (80011dc <HAL_RCC_OscConfig+0x658>)
 8001144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001146:	2202      	movs	r2, #2
 8001148:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800114c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001150:	fa92 f2a2 	rbit	r2, r2
 8001154:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8001158:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800115c:	fab2 f282 	clz	r2, r2
 8001160:	b252      	sxtb	r2, r2
 8001162:	f042 0220 	orr.w	r2, r2, #32
 8001166:	b252      	sxtb	r2, r2
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	f002 021f 	and.w	r2, r2, #31
 800116e:	2101      	movs	r1, #1
 8001170:	fa01 f202 	lsl.w	r2, r1, r2
 8001174:	4013      	ands	r3, r2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1ae      	bne.n	80010d8 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0308 	and.w	r3, r3, #8
 8001184:	2b00      	cmp	r3, #0
 8001186:	f000 80d8 	beq.w	800133a <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d067      	beq.n	8001264 <HAL_RCC_OscConfig+0x6e0>
 8001194:	2301      	movs	r3, #1
 8001196:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800119a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800119e:	fa93 f3a3 	rbit	r3, r3
 80011a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 80011a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011aa:	fab3 f383 	clz	r3, r3
 80011ae:	461a      	mov	r2, r3
 80011b0:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <HAL_RCC_OscConfig+0x65c>)
 80011b2:	4413      	add	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	461a      	mov	r2, r3
 80011b8:	2301      	movs	r3, #1
 80011ba:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011bc:	f7ff f866 	bl	800028c <HAL_GetTick>
 80011c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011c4:	e00e      	b.n	80011e4 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011c6:	f7ff f861 	bl	800028c <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d906      	bls.n	80011e4 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e3bb      	b.n	8001952 <HAL_RCC_OscConfig+0xdce>
 80011da:	bf00      	nop
 80011dc:	40021000 	.word	0x40021000
 80011e0:	10908120 	.word	0x10908120
 80011e4:	2302      	movs	r3, #2
 80011e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80011ee:	fa93 f3a3 	rbit	r3, r3
 80011f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80011f6:	2302      	movs	r3, #2
 80011f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80011fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001200:	fa93 f2a3 	rbit	r2, r3
 8001204:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800120e:	2202      	movs	r2, #2
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	fa93 f2a3 	rbit	r2, r3
 800121c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001220:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001222:	4ba5      	ldr	r3, [pc, #660]	; (80014b8 <HAL_RCC_OscConfig+0x934>)
 8001224:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001226:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800122a:	2102      	movs	r1, #2
 800122c:	6019      	str	r1, [r3, #0]
 800122e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	fa93 f1a3 	rbit	r1, r3
 8001238:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800123c:	6019      	str	r1, [r3, #0]
  return(result);
 800123e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	fab3 f383 	clz	r3, r3
 8001248:	b25b      	sxtb	r3, r3
 800124a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800124e:	b25b      	sxtb	r3, r3
 8001250:	b2db      	uxtb	r3, r3
 8001252:	f003 031f 	and.w	r3, r3, #31
 8001256:	2101      	movs	r1, #1
 8001258:	fa01 f303 	lsl.w	r3, r1, r3
 800125c:	4013      	ands	r3, r2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0b1      	beq.n	80011c6 <HAL_RCC_OscConfig+0x642>
 8001262:	e06a      	b.n	800133a <HAL_RCC_OscConfig+0x7b6>
 8001264:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001268:	2201      	movs	r2, #1
 800126a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	fa93 f2a3 	rbit	r2, r3
 8001276:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800127a:	601a      	str	r2, [r3, #0]
  return(result);
 800127c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001280:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001282:	fab3 f383 	clz	r3, r3
 8001286:	461a      	mov	r2, r3
 8001288:	4b8c      	ldr	r3, [pc, #560]	; (80014bc <HAL_RCC_OscConfig+0x938>)
 800128a:	4413      	add	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	461a      	mov	r2, r3
 8001290:	2300      	movs	r3, #0
 8001292:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001294:	f7fe fffa 	bl	800028c <HAL_GetTick>
 8001298:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800129c:	e009      	b.n	80012b2 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800129e:	f7fe fff5 	bl	800028c <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e34f      	b.n	8001952 <HAL_RCC_OscConfig+0xdce>
 80012b2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80012b6:	2202      	movs	r2, #2
 80012b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	fa93 f2a3 	rbit	r2, r3
 80012c4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012ce:	2202      	movs	r2, #2
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	fa93 f2a3 	rbit	r2, r3
 80012dc:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012e6:	2202      	movs	r2, #2
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	fa93 f2a3 	rbit	r2, r3
 80012f4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80012f8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012fa:	4b6f      	ldr	r3, [pc, #444]	; (80014b8 <HAL_RCC_OscConfig+0x934>)
 80012fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012fe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001302:	2102      	movs	r1, #2
 8001304:	6019      	str	r1, [r3, #0]
 8001306:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	fa93 f1a3 	rbit	r1, r3
 8001310:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001314:	6019      	str	r1, [r3, #0]
  return(result);
 8001316:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	fab3 f383 	clz	r3, r3
 8001320:	b25b      	sxtb	r3, r3
 8001322:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001326:	b25b      	sxtb	r3, r3
 8001328:	b2db      	uxtb	r3, r3
 800132a:	f003 031f 	and.w	r3, r3, #31
 800132e:	2101      	movs	r1, #1
 8001330:	fa01 f303 	lsl.w	r3, r1, r3
 8001334:	4013      	ands	r3, r2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1b1      	bne.n	800129e <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	2b00      	cmp	r3, #0
 8001346:	f000 8159 	beq.w	80015fc <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001350:	4b59      	ldr	r3, [pc, #356]	; (80014b8 <HAL_RCC_OscConfig+0x934>)
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d112      	bne.n	8001382 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800135c:	4b56      	ldr	r3, [pc, #344]	; (80014b8 <HAL_RCC_OscConfig+0x934>)
 800135e:	69db      	ldr	r3, [r3, #28]
 8001360:	4a55      	ldr	r2, [pc, #340]	; (80014b8 <HAL_RCC_OscConfig+0x934>)
 8001362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001366:	61d3      	str	r3, [r2, #28]
 8001368:	4b53      	ldr	r3, [pc, #332]	; (80014b8 <HAL_RCC_OscConfig+0x934>)
 800136a:	69db      	ldr	r3, [r3, #28]
 800136c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	f107 030c 	add.w	r3, r7, #12
 800137a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800137c:	2301      	movs	r3, #1
 800137e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001382:	4b4f      	ldr	r3, [pc, #316]	; (80014c0 <HAL_RCC_OscConfig+0x93c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138a:	2b00      	cmp	r3, #0
 800138c:	d11a      	bne.n	80013c4 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800138e:	4b4c      	ldr	r3, [pc, #304]	; (80014c0 <HAL_RCC_OscConfig+0x93c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a4b      	ldr	r2, [pc, #300]	; (80014c0 <HAL_RCC_OscConfig+0x93c>)
 8001394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001398:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800139a:	f7fe ff77 	bl	800028c <HAL_GetTick>
 800139e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a2:	e009      	b.n	80013b8 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013a4:	f7fe ff72 	bl	800028c <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b64      	cmp	r3, #100	; 0x64
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e2cc      	b.n	8001952 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b8:	4b41      	ldr	r3, [pc, #260]	; (80014c0 <HAL_RCC_OscConfig+0x93c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0ef      	beq.n	80013a4 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d106      	bne.n	80013dc <HAL_RCC_OscConfig+0x858>
 80013ce:	4b3a      	ldr	r3, [pc, #232]	; (80014b8 <HAL_RCC_OscConfig+0x934>)
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	4a39      	ldr	r2, [pc, #228]	; (80014b8 <HAL_RCC_OscConfig+0x934>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6213      	str	r3, [r2, #32]
 80013da:	e02f      	b.n	800143c <HAL_RCC_OscConfig+0x8b8>
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10c      	bne.n	8001400 <HAL_RCC_OscConfig+0x87c>
 80013e6:	4b34      	ldr	r3, [pc, #208]	; (80014b8 <HAL_RCC_OscConfig+0x934>)
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	4a33      	ldr	r2, [pc, #204]	; (80014b8 <HAL_RCC_OscConfig+0x934>)
 80013ec:	f023 0301 	bic.w	r3, r3, #1
 80013f0:	6213      	str	r3, [r2, #32]
 80013f2:	4b31      	ldr	r3, [pc, #196]	; (80014b8 <HAL_RCC_OscConfig+0x934>)
 80013f4:	6a1b      	ldr	r3, [r3, #32]
 80013f6:	4a30      	ldr	r2, [pc, #192]	; (80014b8 <HAL_RCC_OscConfig+0x934>)
 80013f8:	f023 0304 	bic.w	r3, r3, #4
 80013fc:	6213      	str	r3, [r2, #32]
 80013fe:	e01d      	b.n	800143c <HAL_RCC_OscConfig+0x8b8>
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	2b05      	cmp	r3, #5
 8001408:	d10c      	bne.n	8001424 <HAL_RCC_OscConfig+0x8a0>
 800140a:	4b2b      	ldr	r3, [pc, #172]	; (80014b8 <HAL_RCC_OscConfig+0x934>)
 800140c:	6a1b      	ldr	r3, [r3, #32]
 800140e:	4a2a      	ldr	r2, [pc, #168]	; (80014b8 <HAL_RCC_OscConfig+0x934>)
 8001410:	f043 0304 	orr.w	r3, r3, #4
 8001414:	6213      	str	r3, [r2, #32]
 8001416:	4b28      	ldr	r3, [pc, #160]	; (80014b8 <HAL_RCC_OscConfig+0x934>)
 8001418:	6a1b      	ldr	r3, [r3, #32]
 800141a:	4a27      	ldr	r2, [pc, #156]	; (80014b8 <HAL_RCC_OscConfig+0x934>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6213      	str	r3, [r2, #32]
 8001422:	e00b      	b.n	800143c <HAL_RCC_OscConfig+0x8b8>
 8001424:	4b24      	ldr	r3, [pc, #144]	; (80014b8 <HAL_RCC_OscConfig+0x934>)
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	4a23      	ldr	r2, [pc, #140]	; (80014b8 <HAL_RCC_OscConfig+0x934>)
 800142a:	f023 0301 	bic.w	r3, r3, #1
 800142e:	6213      	str	r3, [r2, #32]
 8001430:	4b21      	ldr	r3, [pc, #132]	; (80014b8 <HAL_RCC_OscConfig+0x934>)
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	4a20      	ldr	r2, [pc, #128]	; (80014b8 <HAL_RCC_OscConfig+0x934>)
 8001436:	f023 0304 	bic.w	r3, r3, #4
 800143a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d06b      	beq.n	800151e <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001446:	f7fe ff21 	bl	800028c <HAL_GetTick>
 800144a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800144e:	e00b      	b.n	8001468 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001450:	f7fe ff1c 	bl	800028c <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001460:	4293      	cmp	r3, r2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e274      	b.n	8001952 <HAL_RCC_OscConfig+0xdce>
 8001468:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800146c:	2202      	movs	r2, #2
 800146e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001470:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	fa93 f2a3 	rbit	r2, r3
 800147a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001484:	2202      	movs	r2, #2
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	fa93 f2a3 	rbit	r2, r3
 8001492:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001496:	601a      	str	r2, [r3, #0]
  return(result);
 8001498:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800149c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800149e:	fab3 f383 	clz	r3, r3
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	095b      	lsrs	r3, r3, #5
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d108      	bne.n	80014c4 <HAL_RCC_OscConfig+0x940>
 80014b2:	4b01      	ldr	r3, [pc, #4]	; (80014b8 <HAL_RCC_OscConfig+0x934>)
 80014b4:	6a1b      	ldr	r3, [r3, #32]
 80014b6:	e013      	b.n	80014e0 <HAL_RCC_OscConfig+0x95c>
 80014b8:	40021000 	.word	0x40021000
 80014bc:	10908120 	.word	0x10908120
 80014c0:	40007000 	.word	0x40007000
 80014c4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014c8:	2202      	movs	r2, #2
 80014ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014cc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	fa93 f2a3 	rbit	r2, r3
 80014d6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	4bbb      	ldr	r3, [pc, #748]	; (80017cc <HAL_RCC_OscConfig+0xc48>)
 80014de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80014e4:	2102      	movs	r1, #2
 80014e6:	6011      	str	r1, [r2, #0]
 80014e8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80014ec:	6812      	ldr	r2, [r2, #0]
 80014ee:	fa92 f1a2 	rbit	r1, r2
 80014f2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80014f6:	6011      	str	r1, [r2, #0]
  return(result);
 80014f8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80014fc:	6812      	ldr	r2, [r2, #0]
 80014fe:	fab2 f282 	clz	r2, r2
 8001502:	b252      	sxtb	r2, r2
 8001504:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001508:	b252      	sxtb	r2, r2
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	f002 021f 	and.w	r2, r2, #31
 8001510:	2101      	movs	r1, #1
 8001512:	fa01 f202 	lsl.w	r2, r1, r2
 8001516:	4013      	ands	r3, r2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d099      	beq.n	8001450 <HAL_RCC_OscConfig+0x8cc>
 800151c:	e064      	b.n	80015e8 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151e:	f7fe feb5 	bl	800028c <HAL_GetTick>
 8001522:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001526:	e00b      	b.n	8001540 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001528:	f7fe feb0 	bl	800028c <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	f241 3288 	movw	r2, #5000	; 0x1388
 8001538:	4293      	cmp	r3, r2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e208      	b.n	8001952 <HAL_RCC_OscConfig+0xdce>
 8001540:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001544:	2202      	movs	r2, #2
 8001546:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001548:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	fa93 f2a3 	rbit	r2, r3
 8001552:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800155c:	2202      	movs	r2, #2
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	fa93 f2a3 	rbit	r2, r3
 800156a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800156e:	601a      	str	r2, [r3, #0]
  return(result);
 8001570:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001574:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001576:	fab3 f383 	clz	r3, r3
 800157a:	b2db      	uxtb	r3, r3
 800157c:	095b      	lsrs	r3, r3, #5
 800157e:	b2db      	uxtb	r3, r3
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d102      	bne.n	8001590 <HAL_RCC_OscConfig+0xa0c>
 800158a:	4b90      	ldr	r3, [pc, #576]	; (80017cc <HAL_RCC_OscConfig+0xc48>)
 800158c:	6a1b      	ldr	r3, [r3, #32]
 800158e:	e00d      	b.n	80015ac <HAL_RCC_OscConfig+0xa28>
 8001590:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001594:	2202      	movs	r2, #2
 8001596:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001598:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	fa93 f2a3 	rbit	r2, r3
 80015a2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	4b88      	ldr	r3, [pc, #544]	; (80017cc <HAL_RCC_OscConfig+0xc48>)
 80015aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ac:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80015b0:	2102      	movs	r1, #2
 80015b2:	6011      	str	r1, [r2, #0]
 80015b4:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80015b8:	6812      	ldr	r2, [r2, #0]
 80015ba:	fa92 f1a2 	rbit	r1, r2
 80015be:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80015c2:	6011      	str	r1, [r2, #0]
  return(result);
 80015c4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80015c8:	6812      	ldr	r2, [r2, #0]
 80015ca:	fab2 f282 	clz	r2, r2
 80015ce:	b252      	sxtb	r2, r2
 80015d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015d4:	b252      	sxtb	r2, r2
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	f002 021f 	and.w	r2, r2, #31
 80015dc:	2101      	movs	r1, #1
 80015de:	fa01 f202 	lsl.w	r2, r1, r2
 80015e2:	4013      	ands	r3, r2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d19f      	bne.n	8001528 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015e8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d105      	bne.n	80015fc <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015f0:	4b76      	ldr	r3, [pc, #472]	; (80017cc <HAL_RCC_OscConfig+0xc48>)
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	4a75      	ldr	r2, [pc, #468]	; (80017cc <HAL_RCC_OscConfig+0xc48>)
 80015f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015fa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 81a4 	beq.w	8001950 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001608:	4b70      	ldr	r3, [pc, #448]	; (80017cc <HAL_RCC_OscConfig+0xc48>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 030c 	and.w	r3, r3, #12
 8001610:	2b08      	cmp	r3, #8
 8001612:	f000 819b 	beq.w	800194c <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	69db      	ldr	r3, [r3, #28]
 800161c:	2b02      	cmp	r3, #2
 800161e:	f040 8113 	bne.w	8001848 <HAL_RCC_OscConfig+0xcc4>
 8001622:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001626:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800162a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	fa93 f2a3 	rbit	r2, r3
 8001636:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800163a:	601a      	str	r2, [r3, #0]
  return(result);
 800163c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001640:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001642:	fab3 f383 	clz	r3, r3
 8001646:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800164a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	461a      	mov	r2, r3
 8001652:	2300      	movs	r3, #0
 8001654:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001656:	f7fe fe19 	bl	800028c <HAL_GetTick>
 800165a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800165e:	e009      	b.n	8001674 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001660:	f7fe fe14 	bl	800028c <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e16e      	b.n	8001952 <HAL_RCC_OscConfig+0xdce>
 8001674:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001678:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800167c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	fa93 f2a3 	rbit	r2, r3
 8001688:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800168c:	601a      	str	r2, [r3, #0]
  return(result);
 800168e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001692:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001694:	fab3 f383 	clz	r3, r3
 8001698:	b2db      	uxtb	r3, r3
 800169a:	095b      	lsrs	r3, r3, #5
 800169c:	b2db      	uxtb	r3, r3
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d102      	bne.n	80016ae <HAL_RCC_OscConfig+0xb2a>
 80016a8:	4b48      	ldr	r3, [pc, #288]	; (80017cc <HAL_RCC_OscConfig+0xc48>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	e01b      	b.n	80016e6 <HAL_RCC_OscConfig+0xb62>
 80016ae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	fa93 f2a3 	rbit	r2, r3
 80016c2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	fa93 f2a3 	rbit	r2, r3
 80016dc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	4b3a      	ldr	r3, [pc, #232]	; (80017cc <HAL_RCC_OscConfig+0xc48>)
 80016e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80016ea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80016ee:	6011      	str	r1, [r2, #0]
 80016f0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80016f4:	6812      	ldr	r2, [r2, #0]
 80016f6:	fa92 f1a2 	rbit	r1, r2
 80016fa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80016fe:	6011      	str	r1, [r2, #0]
  return(result);
 8001700:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001704:	6812      	ldr	r2, [r2, #0]
 8001706:	fab2 f282 	clz	r2, r2
 800170a:	b252      	sxtb	r2, r2
 800170c:	f042 0220 	orr.w	r2, r2, #32
 8001710:	b252      	sxtb	r2, r2
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	f002 021f 	and.w	r2, r2, #31
 8001718:	2101      	movs	r1, #1
 800171a:	fa01 f202 	lsl.w	r2, r1, r2
 800171e:	4013      	ands	r3, r2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d19d      	bne.n	8001660 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001724:	4b29      	ldr	r3, [pc, #164]	; (80017cc <HAL_RCC_OscConfig+0xc48>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	430b      	orrs	r3, r1
 800173a:	4924      	ldr	r1, [pc, #144]	; (80017cc <HAL_RCC_OscConfig+0xc48>)
 800173c:	4313      	orrs	r3, r2
 800173e:	604b      	str	r3, [r1, #4]
 8001740:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001744:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001748:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	fa93 f2a3 	rbit	r2, r3
 8001754:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001758:	601a      	str	r2, [r3, #0]
  return(result);
 800175a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800175e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001760:	fab3 f383 	clz	r3, r3
 8001764:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001768:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	461a      	mov	r2, r3
 8001770:	2301      	movs	r3, #1
 8001772:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7fe fd8a 	bl	800028c <HAL_GetTick>
 8001778:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800177c:	e009      	b.n	8001792 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800177e:	f7fe fd85 	bl	800028c <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e0df      	b.n	8001952 <HAL_RCC_OscConfig+0xdce>
 8001792:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001796:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800179a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	fa93 f2a3 	rbit	r2, r3
 80017a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017aa:	601a      	str	r2, [r3, #0]
  return(result);
 80017ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017b2:	fab3 f383 	clz	r3, r3
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	095b      	lsrs	r3, r3, #5
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d104      	bne.n	80017d0 <HAL_RCC_OscConfig+0xc4c>
 80017c6:	4b01      	ldr	r3, [pc, #4]	; (80017cc <HAL_RCC_OscConfig+0xc48>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	e01d      	b.n	8001808 <HAL_RCC_OscConfig+0xc84>
 80017cc:	40021000 	.word	0x40021000
 80017d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	fa93 f2a3 	rbit	r2, r3
 80017e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	fa93 f2a3 	rbit	r2, r3
 80017fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	4b55      	ldr	r3, [pc, #340]	; (800195c <HAL_RCC_OscConfig+0xdd8>)
 8001806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001808:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800180c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001810:	6011      	str	r1, [r2, #0]
 8001812:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	fa92 f1a2 	rbit	r1, r2
 800181c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001820:	6011      	str	r1, [r2, #0]
  return(result);
 8001822:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001826:	6812      	ldr	r2, [r2, #0]
 8001828:	fab2 f282 	clz	r2, r2
 800182c:	b252      	sxtb	r2, r2
 800182e:	f042 0220 	orr.w	r2, r2, #32
 8001832:	b252      	sxtb	r2, r2
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	f002 021f 	and.w	r2, r2, #31
 800183a:	2101      	movs	r1, #1
 800183c:	fa01 f202 	lsl.w	r2, r1, r2
 8001840:	4013      	ands	r3, r2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d09b      	beq.n	800177e <HAL_RCC_OscConfig+0xbfa>
 8001846:	e083      	b.n	8001950 <HAL_RCC_OscConfig+0xdcc>
 8001848:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800184c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001850:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001852:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	fa93 f2a3 	rbit	r2, r3
 800185c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001860:	601a      	str	r2, [r3, #0]
  return(result);
 8001862:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001866:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001868:	fab3 f383 	clz	r3, r3
 800186c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001870:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	461a      	mov	r2, r3
 8001878:	2300      	movs	r3, #0
 800187a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187c:	f7fe fd06 	bl	800028c <HAL_GetTick>
 8001880:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001884:	e009      	b.n	800189a <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001886:	f7fe fd01 	bl	800028c <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e05b      	b.n	8001952 <HAL_RCC_OscConfig+0xdce>
 800189a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800189e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	fa93 f2a3 	rbit	r2, r3
 80018ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018b2:	601a      	str	r2, [r3, #0]
  return(result);
 80018b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ba:	fab3 f383 	clz	r3, r3
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	095b      	lsrs	r3, r3, #5
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d102      	bne.n	80018d4 <HAL_RCC_OscConfig+0xd50>
 80018ce:	4b23      	ldr	r3, [pc, #140]	; (800195c <HAL_RCC_OscConfig+0xdd8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	e01b      	b.n	800190c <HAL_RCC_OscConfig+0xd88>
 80018d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	fa93 f2a3 	rbit	r2, r3
 80018e8:	f107 0320 	add.w	r3, r7, #32
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	f107 031c 	add.w	r3, r7, #28
 80018f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	f107 031c 	add.w	r3, r7, #28
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	fa93 f2a3 	rbit	r2, r3
 8001902:	f107 0318 	add.w	r3, r7, #24
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	4b14      	ldr	r3, [pc, #80]	; (800195c <HAL_RCC_OscConfig+0xdd8>)
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	f107 0214 	add.w	r2, r7, #20
 8001910:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001914:	6011      	str	r1, [r2, #0]
 8001916:	f107 0214 	add.w	r2, r7, #20
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	fa92 f1a2 	rbit	r1, r2
 8001920:	f107 0210 	add.w	r2, r7, #16
 8001924:	6011      	str	r1, [r2, #0]
  return(result);
 8001926:	f107 0210 	add.w	r2, r7, #16
 800192a:	6812      	ldr	r2, [r2, #0]
 800192c:	fab2 f282 	clz	r2, r2
 8001930:	b252      	sxtb	r2, r2
 8001932:	f042 0220 	orr.w	r2, r2, #32
 8001936:	b252      	sxtb	r2, r2
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	f002 021f 	and.w	r2, r2, #31
 800193e:	2101      	movs	r1, #1
 8001940:	fa01 f202 	lsl.w	r2, r1, r2
 8001944:	4013      	ands	r3, r2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d19d      	bne.n	8001886 <HAL_RCC_OscConfig+0xd02>
 800194a:	e001      	b.n	8001950 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40021000 	.word	0x40021000

08001960 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b09e      	sub	sp, #120	; 0x78
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800196a:	2300      	movs	r3, #0
 800196c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e164      	b.n	8001c42 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001978:	4b92      	ldr	r3, [pc, #584]	; (8001bc4 <HAL_RCC_ClockConfig+0x264>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d910      	bls.n	80019a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001986:	4b8f      	ldr	r3, [pc, #572]	; (8001bc4 <HAL_RCC_ClockConfig+0x264>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 0207 	bic.w	r2, r3, #7
 800198e:	498d      	ldr	r1, [pc, #564]	; (8001bc4 <HAL_RCC_ClockConfig+0x264>)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	4313      	orrs	r3, r2
 8001994:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001996:	4b8b      	ldr	r3, [pc, #556]	; (8001bc4 <HAL_RCC_ClockConfig+0x264>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d001      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e14c      	b.n	8001c42 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d008      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b4:	4b84      	ldr	r3, [pc, #528]	; (8001bc8 <HAL_RCC_ClockConfig+0x268>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	4981      	ldr	r1, [pc, #516]	; (8001bc8 <HAL_RCC_ClockConfig+0x268>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f000 80df 	beq.w	8001b92 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d13d      	bne.n	8001a58 <HAL_RCC_ClockConfig+0xf8>
 80019dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019e4:	fa93 f3a3 	rbit	r3, r3
 80019e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 80019ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ec:	fab3 f383 	clz	r3, r3
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	095b      	lsrs	r3, r3, #5
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d102      	bne.n	8001a06 <HAL_RCC_ClockConfig+0xa6>
 8001a00:	4b71      	ldr	r3, [pc, #452]	; (8001bc8 <HAL_RCC_ClockConfig+0x268>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	e00f      	b.n	8001a26 <HAL_RCC_ClockConfig+0xc6>
 8001a06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a0e:	fa93 f3a3 	rbit	r3, r3
 8001a12:	667b      	str	r3, [r7, #100]	; 0x64
 8001a14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a18:	663b      	str	r3, [r7, #96]	; 0x60
 8001a1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a1c:	fa93 f3a3 	rbit	r3, r3
 8001a20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a22:	4b69      	ldr	r3, [pc, #420]	; (8001bc8 <HAL_RCC_ClockConfig+0x268>)
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a2a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001a2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a2e:	fa92 f2a2 	rbit	r2, r2
 8001a32:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001a34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001a36:	fab2 f282 	clz	r2, r2
 8001a3a:	b252      	sxtb	r2, r2
 8001a3c:	f042 0220 	orr.w	r2, r2, #32
 8001a40:	b252      	sxtb	r2, r2
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	f002 021f 	and.w	r2, r2, #31
 8001a48:	2101      	movs	r1, #1
 8001a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4e:	4013      	ands	r3, r2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d17d      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0f4      	b.n	8001c42 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d13d      	bne.n	8001adc <HAL_RCC_ClockConfig+0x17c>
 8001a60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a64:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a68:	fa93 f3a3 	rbit	r3, r3
 8001a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8001a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a70:	fab3 f383 	clz	r3, r3
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	095b      	lsrs	r3, r3, #5
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	f043 0301 	orr.w	r3, r3, #1
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d102      	bne.n	8001a8a <HAL_RCC_ClockConfig+0x12a>
 8001a84:	4b50      	ldr	r3, [pc, #320]	; (8001bc8 <HAL_RCC_ClockConfig+0x268>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	e00f      	b.n	8001aaa <HAL_RCC_ClockConfig+0x14a>
 8001a8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a8e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a92:	fa93 f3a3 	rbit	r3, r3
 8001a96:	647b      	str	r3, [r7, #68]	; 0x44
 8001a98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a9c:	643b      	str	r3, [r7, #64]	; 0x40
 8001a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aa0:	fa93 f3a3 	rbit	r3, r3
 8001aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001aa6:	4b48      	ldr	r3, [pc, #288]	; (8001bc8 <HAL_RCC_ClockConfig+0x268>)
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aae:	63ba      	str	r2, [r7, #56]	; 0x38
 8001ab0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ab2:	fa92 f2a2 	rbit	r2, r2
 8001ab6:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8001ab8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001aba:	fab2 f282 	clz	r2, r2
 8001abe:	b252      	sxtb	r2, r2
 8001ac0:	f042 0220 	orr.w	r2, r2, #32
 8001ac4:	b252      	sxtb	r2, r2
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	f002 021f 	and.w	r2, r2, #31
 8001acc:	2101      	movs	r1, #1
 8001ace:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d13b      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0b2      	b.n	8001c42 <HAL_RCC_ClockConfig+0x2e2>
 8001adc:	2302      	movs	r3, #2
 8001ade:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae2:	fa93 f3a3 	rbit	r3, r3
 8001ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aea:	fab3 f383 	clz	r3, r3
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	095b      	lsrs	r3, r3, #5
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d102      	bne.n	8001b04 <HAL_RCC_ClockConfig+0x1a4>
 8001afe:	4b32      	ldr	r3, [pc, #200]	; (8001bc8 <HAL_RCC_ClockConfig+0x268>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	e00d      	b.n	8001b20 <HAL_RCC_ClockConfig+0x1c0>
 8001b04:	2302      	movs	r3, #2
 8001b06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b0a:	fa93 f3a3 	rbit	r3, r3
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b10:	2302      	movs	r3, #2
 8001b12:	623b      	str	r3, [r7, #32]
 8001b14:	6a3b      	ldr	r3, [r7, #32]
 8001b16:	fa93 f3a3 	rbit	r3, r3
 8001b1a:	61fb      	str	r3, [r7, #28]
 8001b1c:	4b2a      	ldr	r3, [pc, #168]	; (8001bc8 <HAL_RCC_ClockConfig+0x268>)
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b20:	2202      	movs	r2, #2
 8001b22:	61ba      	str	r2, [r7, #24]
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	fa92 f2a2 	rbit	r2, r2
 8001b2a:	617a      	str	r2, [r7, #20]
  return(result);
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	fab2 f282 	clz	r2, r2
 8001b32:	b252      	sxtb	r2, r2
 8001b34:	f042 0220 	orr.w	r2, r2, #32
 8001b38:	b252      	sxtb	r2, r2
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	f002 021f 	and.w	r2, r2, #31
 8001b40:	2101      	movs	r1, #1
 8001b42:	fa01 f202 	lsl.w	r2, r1, r2
 8001b46:	4013      	ands	r3, r2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e078      	b.n	8001c42 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b50:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <HAL_RCC_ClockConfig+0x268>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f023 0203 	bic.w	r2, r3, #3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	491a      	ldr	r1, [pc, #104]	; (8001bc8 <HAL_RCC_ClockConfig+0x268>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b62:	f7fe fb93 	bl	800028c <HAL_GetTick>
 8001b66:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b68:	e00a      	b.n	8001b80 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6a:	f7fe fb8f 	bl	800028c <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e060      	b.n	8001c42 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b80:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <HAL_RCC_ClockConfig+0x268>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 020c 	and.w	r2, r3, #12
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d1eb      	bne.n	8001b6a <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b92:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <HAL_RCC_ClockConfig+0x264>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d215      	bcs.n	8001bcc <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <HAL_RCC_ClockConfig+0x264>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f023 0207 	bic.w	r2, r3, #7
 8001ba8:	4906      	ldr	r1, [pc, #24]	; (8001bc4 <HAL_RCC_ClockConfig+0x264>)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <HAL_RCC_ClockConfig+0x264>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d006      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e03f      	b.n	8001c42 <HAL_RCC_ClockConfig+0x2e2>
 8001bc2:	bf00      	nop
 8001bc4:	40022000 	.word	0x40022000
 8001bc8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d008      	beq.n	8001bea <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd8:	4b1c      	ldr	r3, [pc, #112]	; (8001c4c <HAL_RCC_ClockConfig+0x2ec>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	4919      	ldr	r1, [pc, #100]	; (8001c4c <HAL_RCC_ClockConfig+0x2ec>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d009      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bf6:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <HAL_RCC_ClockConfig+0x2ec>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4911      	ldr	r1, [pc, #68]	; (8001c4c <HAL_RCC_ClockConfig+0x2ec>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c0a:	f000 f825 	bl	8001c58 <HAL_RCC_GetSysClockFreq>
 8001c0e:	4601      	mov	r1, r0
 8001c10:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <HAL_RCC_ClockConfig+0x2ec>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c18:	23f0      	movs	r3, #240	; 0xf0
 8001c1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	60fb      	str	r3, [r7, #12]
  return(result);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	fab3 f383 	clz	r3, r3
 8001c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2e:	4a08      	ldr	r2, [pc, #32]	; (8001c50 <HAL_RCC_ClockConfig+0x2f0>)
 8001c30:	5cd3      	ldrb	r3, [r2, r3]
 8001c32:	fa21 f303 	lsr.w	r3, r1, r3
 8001c36:	4a07      	ldr	r2, [pc, #28]	; (8001c54 <HAL_RCC_ClockConfig+0x2f4>)
 8001c38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	f7fe fae2 	bl	8000204 <HAL_InitTick>
  
  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3778      	adds	r7, #120	; 0x78
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	080053e8 	.word	0x080053e8
 8001c54:	20000008 	.word	0x20000008

08001c58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b08b      	sub	sp, #44	; 0x2c
 8001c5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
 8001c62:	2300      	movs	r3, #0
 8001c64:	61bb      	str	r3, [r7, #24]
 8001c66:	2300      	movs	r3, #0
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001c72:	4b29      	ldr	r3, [pc, #164]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d002      	beq.n	8001c88 <HAL_RCC_GetSysClockFreq+0x30>
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d003      	beq.n	8001c8e <HAL_RCC_GetSysClockFreq+0x36>
 8001c86:	e03c      	b.n	8001d02 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c88:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c8a:	623b      	str	r3, [r7, #32]
      break;
 8001c8c:	e03c      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c94:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001c98:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	fa93 f3a3 	rbit	r3, r3
 8001ca0:	607b      	str	r3, [r7, #4]
  return(result);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	fab3 f383 	clz	r3, r3
 8001ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cac:	4a1c      	ldr	r2, [pc, #112]	; (8001d20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001cae:	5cd3      	ldrb	r3, [r2, r3]
 8001cb0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001cb2:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb6:	f003 020f 	and.w	r2, r3, #15
 8001cba:	230f      	movs	r3, #15
 8001cbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	fa93 f3a3 	rbit	r3, r3
 8001cc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	fab3 f383 	clz	r3, r3
 8001ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd0:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001cd2:	5cd3      	ldrb	r3, [r2, r3]
 8001cd4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d008      	beq.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001ce0:	4a0e      	ldr	r2, [pc, #56]	; (8001d1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	fb02 f303 	mul.w	r3, r2, r3
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf0:	e004      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	4a0c      	ldr	r2, [pc, #48]	; (8001d28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001cf6:	fb02 f303 	mul.w	r3, r2, r3
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	623b      	str	r3, [r7, #32]
      break;
 8001d00:	e002      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d04:	623b      	str	r3, [r7, #32]
      break;
 8001d06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d08:	6a3b      	ldr	r3, [r7, #32]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	372c      	adds	r7, #44	; 0x2c
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	007a1200 	.word	0x007a1200
 8001d20:	080053c8 	.word	0x080053c8
 8001d24:	080053d8 	.word	0x080053d8
 8001d28:	003d0900 	.word	0x003d0900

08001d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d30:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d32:	681b      	ldr	r3, [r3, #0]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	20000008 	.word	0x20000008

08001d44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001d4a:	f7ff ffef 	bl	8001d2c <HAL_RCC_GetHCLKFreq>
 8001d4e:	4601      	mov	r1, r0
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d58:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001d5c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	fa93 f3a3 	rbit	r3, r3
 8001d64:	603b      	str	r3, [r7, #0]
  return(result);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	fab3 f383 	clz	r3, r3
 8001d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d70:	4a04      	ldr	r2, [pc, #16]	; (8001d84 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001d72:	5cd3      	ldrb	r3, [r2, r3]
 8001d74:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40021000 	.word	0x40021000
 8001d84:	080053f8 	.word	0x080053f8

08001d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001d8e:	f7ff ffcd 	bl	8001d2c <HAL_RCC_GetHCLKFreq>
 8001d92:	4601      	mov	r1, r0
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001d9c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001da0:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	fa93 f3a3 	rbit	r3, r3
 8001da8:	603b      	str	r3, [r7, #0]
  return(result);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	fab3 f383 	clz	r3, r3
 8001db0:	fa22 f303 	lsr.w	r3, r2, r3
 8001db4:	4a04      	ldr	r2, [pc, #16]	; (8001dc8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001db6:	5cd3      	ldrb	r3, [r2, r3]
 8001db8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	080053f8 	.word	0x080053f8

08001dcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b092      	sub	sp, #72	; 0x48
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 80cf 	beq.w	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001dea:	2300      	movs	r3, #0
 8001dec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df0:	4b86      	ldr	r3, [pc, #536]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d10e      	bne.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfc:	4b83      	ldr	r3, [pc, #524]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	4a82      	ldr	r2, [pc, #520]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e06:	61d3      	str	r3, [r2, #28]
 8001e08:	4b80      	ldr	r3, [pc, #512]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e14:	2301      	movs	r3, #1
 8001e16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1a:	4b7d      	ldr	r3, [pc, #500]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d118      	bne.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e26:	4b7a      	ldr	r3, [pc, #488]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a79      	ldr	r2, [pc, #484]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e30:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e32:	f7fe fa2b 	bl	800028c <HAL_GetTick>
 8001e36:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e38:	e008      	b.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e3a:	f7fe fa27 	bl	800028c <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b64      	cmp	r3, #100	; 0x64
 8001e46:	d901      	bls.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e0da      	b.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x236>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4c:	4b70      	ldr	r3, [pc, #448]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f0      	beq.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e58:	4b6c      	ldr	r3, [pc, #432]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e60:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d07c      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d075      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e76:	4b65      	ldr	r3, [pc, #404]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e84:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e88:	fa93 f3a3 	rbit	r3, r3
 8001e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e90:	fab3 f383 	clz	r3, r3
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b5f      	ldr	r3, [pc, #380]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e98:	4413      	add	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ea6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eaa:	fa93 f3a3 	rbit	r3, r3
 8001eae:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8001eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001eb2:	fab3 f383 	clz	r3, r3
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4b56      	ldr	r3, [pc, #344]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001eba:	4413      	add	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ec4:	4a51      	ldr	r2, [pc, #324]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ec8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d046      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7fe f9da 	bl	800028c <HAL_GetTick>
 8001ed8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eda:	e00a      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001edc:	f7fe f9d6 	bl	800028c <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e087      	b.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef8:	fa93 f3a3 	rbit	r3, r3
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
 8001efe:	2302      	movs	r3, #2
 8001f00:	623b      	str	r3, [r7, #32]
 8001f02:	6a3b      	ldr	r3, [r7, #32]
 8001f04:	fa93 f3a3 	rbit	r3, r3
 8001f08:	61fb      	str	r3, [r7, #28]
  return(result);
 8001f0a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f0c:	fab3 f383 	clz	r3, r3
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	095b      	lsrs	r3, r3, #5
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	f043 0302 	orr.w	r3, r3, #2
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d102      	bne.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8001f20:	4b3a      	ldr	r3, [pc, #232]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	e007      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8001f26:	2302      	movs	r3, #2
 8001f28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	fa93 f3a3 	rbit	r3, r3
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	4b36      	ldr	r3, [pc, #216]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	2202      	movs	r2, #2
 8001f38:	613a      	str	r2, [r7, #16]
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	fa92 f2a2 	rbit	r2, r2
 8001f40:	60fa      	str	r2, [r7, #12]
  return(result);
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	fab2 f282 	clz	r2, r2
 8001f48:	b252      	sxtb	r2, r2
 8001f4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f4e:	b252      	sxtb	r2, r2
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	f002 021f 	and.w	r2, r2, #31
 8001f56:	2101      	movs	r1, #1
 8001f58:	fa01 f202 	lsl.w	r2, r1, r2
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0bc      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x110>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001f62:	4b2a      	ldr	r3, [pc, #168]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4927      	ldr	r1, [pc, #156]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f74:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d105      	bne.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f7c:	4b23      	ldr	r3, [pc, #140]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	4a22      	ldr	r2, [pc, #136]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001f82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f86:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d008      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f94:	4b1d      	ldr	r3, [pc, #116]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f98:	f023 0203 	bic.w	r2, r3, #3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	491a      	ldr	r1, [pc, #104]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0320 	and.w	r3, r3, #32
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d008      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fb2:	4b16      	ldr	r3, [pc, #88]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	f023 0210 	bic.w	r2, r3, #16
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	4913      	ldr	r1, [pc, #76]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d008      	beq.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001fd0:	4b0e      	ldr	r3, [pc, #56]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	490b      	ldr	r1, [pc, #44]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d008      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001fee:	4b07      	ldr	r3, [pc, #28]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	4904      	ldr	r1, [pc, #16]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3748      	adds	r7, #72	; 0x48
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40021000 	.word	0x40021000
 8002010:	40007000 	.word	0x40007000
 8002014:	10908100 	.word	0x10908100

08002018 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e01d      	b.n	8002066 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d106      	bne.n	8002044 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f002 fcf6 	bl	8004a30 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2202      	movs	r2, #2
 8002048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3304      	adds	r3, #4
 8002054:	4619      	mov	r1, r3
 8002056:	4610      	mov	r0, r2
 8002058:	f000 fb5c 	bl	8002714 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e01d      	b.n	80020bc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	d106      	bne.n	800209a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f815 	bl	80020c4 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2202      	movs	r2, #2
 800209e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3304      	adds	r3, #4
 80020aa:	4619      	mov	r1, r3
 80020ac:	4610      	mov	r0, r2
 80020ae:	f000 fb31 	bl	8002714 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  switch (Channel)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	2b0c      	cmp	r3, #12
 80020e6:	d841      	bhi.n	800216c <HAL_TIM_PWM_Start_IT+0x94>
 80020e8:	a201      	add	r2, pc, #4	; (adr r2, 80020f0 <HAL_TIM_PWM_Start_IT+0x18>)
 80020ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ee:	bf00      	nop
 80020f0:	08002125 	.word	0x08002125
 80020f4:	0800216d 	.word	0x0800216d
 80020f8:	0800216d 	.word	0x0800216d
 80020fc:	0800216d 	.word	0x0800216d
 8002100:	08002137 	.word	0x08002137
 8002104:	0800216d 	.word	0x0800216d
 8002108:	0800216d 	.word	0x0800216d
 800210c:	0800216d 	.word	0x0800216d
 8002110:	08002149 	.word	0x08002149
 8002114:	0800216d 	.word	0x0800216d
 8002118:	0800216d 	.word	0x0800216d
 800211c:	0800216d 	.word	0x0800216d
 8002120:	0800215b 	.word	0x0800215b
  {
    case TIM_CHANNEL_1:
    {       
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0202 	orr.w	r2, r2, #2
 8002132:	60da      	str	r2, [r3, #12]
    }
    break;
 8002134:	e01b      	b.n	800216e <HAL_TIM_PWM_Start_IT+0x96>
    
    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f042 0204 	orr.w	r2, r2, #4
 8002144:	60da      	str	r2, [r3, #12]
    }
    break;
 8002146:	e012      	b.n	800216e <HAL_TIM_PWM_Start_IT+0x96>
    
    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0208 	orr.w	r2, r2, #8
 8002156:	60da      	str	r2, [r3, #12]
    }
    break;
 8002158:	e009      	b.n	800216e <HAL_TIM_PWM_Start_IT+0x96>
    
    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f042 0210 	orr.w	r2, r2, #16
 8002168:	60da      	str	r2, [r3, #12]
    }
    break;
 800216a:	e000      	b.n	800216e <HAL_TIM_PWM_Start_IT+0x96>
    
    default:
    break;
 800216c:	bf00      	nop
  } 
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2201      	movs	r2, #1
 8002174:	6839      	ldr	r1, [r7, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f000 fdef 	bl	8002d5a <TIM_CCxChannelCmd>
  
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a15      	ldr	r2, [pc, #84]	; (80021d8 <HAL_TIM_PWM_Start_IT+0x100>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d00e      	beq.n	80021a4 <HAL_TIM_PWM_Start_IT+0xcc>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a14      	ldr	r2, [pc, #80]	; (80021dc <HAL_TIM_PWM_Start_IT+0x104>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d009      	beq.n	80021a4 <HAL_TIM_PWM_Start_IT+0xcc>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a12      	ldr	r2, [pc, #72]	; (80021e0 <HAL_TIM_PWM_Start_IT+0x108>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d004      	beq.n	80021a4 <HAL_TIM_PWM_Start_IT+0xcc>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a11      	ldr	r2, [pc, #68]	; (80021e4 <HAL_TIM_PWM_Start_IT+0x10c>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d101      	bne.n	80021a8 <HAL_TIM_PWM_Start_IT+0xd0>
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <HAL_TIM_PWM_Start_IT+0xd2>
 80021a8:	2300      	movs	r3, #0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d007      	beq.n	80021be <HAL_TIM_PWM_Start_IT+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f042 0201 	orr.w	r2, r2, #1
 80021cc:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
} 
 80021d0:	4618      	mov	r0, r3
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40012c00 	.word	0x40012c00
 80021dc:	40014000 	.word	0x40014000
 80021e0:	40014400 	.word	0x40014400
 80021e4:	40014800 	.word	0x40014800

080021e8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses wil be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e02d      	b.n	8002258 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d106      	bne.n	8002216 <HAL_TIM_OnePulse_Init+0x2e>
  {   
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f825 	bl	8002260 <HAL_TIM_OnePulse_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2202      	movs	r2, #2
 800221a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3304      	adds	r3, #4
 8002226:	4619      	mov	r1, r3
 8002228:	4610      	mov	r0, r2
 800222a:	f000 fa73 	bl	8002714 <TIM_Base_SetConfig>
  
  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0208 	bic.w	r2, r2, #8
 800223c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6819      	ldr	r1, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	601a      	str	r2, [r3, #0]
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b02      	cmp	r3, #2
 8002288:	d122      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b02      	cmp	r3, #2
 8002296:	d11b      	bne.n	80022d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f06f 0202 	mvn.w	r2, #2
 80022a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f9f1 	bl	800269e <HAL_TIM_IC_CaptureCallback>
 80022bc:	e005      	b.n	80022ca <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f9e3 	bl	800268a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f9f4 	bl	80026b2 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d122      	bne.n	8002324 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d11b      	bne.n	8002324 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 0204 	mvn.w	r2, #4
 80022f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2202      	movs	r2, #2
 80022fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f9c7 	bl	800269e <HAL_TIM_IC_CaptureCallback>
 8002310:	e005      	b.n	800231e <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f9b9 	bl	800268a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f9ca 	bl	80026b2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	2b08      	cmp	r3, #8
 8002330:	d122      	bne.n	8002378 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b08      	cmp	r3, #8
 800233e:	d11b      	bne.n	8002378 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f06f 0208 	mvn.w	r2, #8
 8002348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2204      	movs	r2, #4
 800234e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f99d 	bl	800269e <HAL_TIM_IC_CaptureCallback>
 8002364:	e005      	b.n	8002372 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f98f 	bl	800268a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f9a0 	bl	80026b2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	2b10      	cmp	r3, #16
 8002384:	d122      	bne.n	80023cc <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f003 0310 	and.w	r3, r3, #16
 8002390:	2b10      	cmp	r3, #16
 8002392:	d11b      	bne.n	80023cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f06f 0210 	mvn.w	r2, #16
 800239c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2208      	movs	r2, #8
 80023a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f973 	bl	800269e <HAL_TIM_IC_CaptureCallback>
 80023b8:	e005      	b.n	80023c6 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f965 	bl	800268a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 f976 	bl	80026b2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d10e      	bne.n	80023f8 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d107      	bne.n	80023f8 <HAL_TIM_IRQHandler+0x184>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f06f 0201 	mvn.w	r2, #1
 80023f0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f93f 	bl	8002676 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002402:	2b80      	cmp	r3, #128	; 0x80
 8002404:	d10e      	bne.n	8002424 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002410:	2b80      	cmp	r3, #128	; 0x80
 8002412:	d107      	bne.n	8002424 <HAL_TIM_IRQHandler+0x1b0>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800241c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 fece 	bl	80031c0 <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002432:	d10e      	bne.n	8002452 <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800243e:	2b80      	cmp	r3, #128	; 0x80
 8002440:	d107      	bne.n	8002452 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800244a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 fec1 	bl	80031d4 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245c:	2b40      	cmp	r3, #64	; 0x40
 800245e:	d10e      	bne.n	800247e <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246a:	2b40      	cmp	r3, #64	; 0x40
 800246c:	d107      	bne.n	800247e <HAL_TIM_IRQHandler+0x20a>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002476:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f924 	bl	80026c6 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	f003 0320 	and.w	r3, r3, #32
 8002488:	2b20      	cmp	r3, #32
 800248a:	d10e      	bne.n	80024aa <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	f003 0320 	and.w	r3, r3, #32
 8002496:	2b20      	cmp	r3, #32
 8002498:	d107      	bne.n	80024aa <HAL_TIM_IRQHandler+0x236>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f06f 0220 	mvn.w	r2, #32
 80024a2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 fe81 	bl	80031ac <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b084      	sub	sp, #16
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
 80024ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(htim);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_TIM_ConfigClockSource+0x1c>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e0cf      	b.n	800266e <HAL_TIM_ConfigClockSource+0x1bc>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2202      	movs	r2, #2
 80024da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ec:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024f0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024f8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2b40      	cmp	r3, #64	; 0x40
 8002508:	d07c      	beq.n	8002604 <HAL_TIM_ConfigClockSource+0x152>
 800250a:	2b40      	cmp	r3, #64	; 0x40
 800250c:	d80f      	bhi.n	800252e <HAL_TIM_ConfigClockSource+0x7c>
 800250e:	2b10      	cmp	r3, #16
 8002510:	f000 808f 	beq.w	8002632 <HAL_TIM_ConfigClockSource+0x180>
 8002514:	2b10      	cmp	r3, #16
 8002516:	d803      	bhi.n	8002520 <HAL_TIM_ConfigClockSource+0x6e>
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 8083 	beq.w	8002624 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
  default:
    break;    
 800251e:	e09d      	b.n	800265c <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8002520:	2b20      	cmp	r3, #32
 8002522:	f000 808d 	beq.w	8002640 <HAL_TIM_ConfigClockSource+0x18e>
 8002526:	2b30      	cmp	r3, #48	; 0x30
 8002528:	f000 8091 	beq.w	800264e <HAL_TIM_ConfigClockSource+0x19c>
    break;    
 800252c:	e096      	b.n	800265c <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 800252e:	2b70      	cmp	r3, #112	; 0x70
 8002530:	d018      	beq.n	8002564 <HAL_TIM_ConfigClockSource+0xb2>
 8002532:	2b70      	cmp	r3, #112	; 0x70
 8002534:	d804      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x8e>
 8002536:	2b50      	cmp	r3, #80	; 0x50
 8002538:	d044      	beq.n	80025c4 <HAL_TIM_ConfigClockSource+0x112>
 800253a:	2b60      	cmp	r3, #96	; 0x60
 800253c:	d052      	beq.n	80025e4 <HAL_TIM_ConfigClockSource+0x132>
    break;    
 800253e:	e08d      	b.n	800265c <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8002540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002544:	d003      	beq.n	800254e <HAL_TIM_ConfigClockSource+0x9c>
 8002546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800254a:	d028      	beq.n	800259e <HAL_TIM_ConfigClockSource+0xec>
    break;    
 800254c:	e086      	b.n	800265c <HAL_TIM_ConfigClockSource+0x1aa>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800255c:	f023 0307 	bic.w	r3, r3, #7
 8002560:	6093      	str	r3, [r2, #8]
    break;
 8002562:	e07b      	b.n	800265c <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6818      	ldr	r0, [r3, #0]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	6899      	ldr	r1, [r3, #8]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f000 fbcf 	bl	8002d16 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002586:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800258a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002592:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	609a      	str	r2, [r3, #8]
    break;
 800259c:	e05e      	b.n	800265c <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6818      	ldr	r0, [r3, #0]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	6899      	ldr	r1, [r3, #8]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f000 fbb2 	bl	8002d16 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025c0:	609a      	str	r2, [r3, #8]
    break;
 80025c2:	e04b      	b.n	800265c <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	6859      	ldr	r1, [r3, #4]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	461a      	mov	r2, r3
 80025d2:	f000 fb19 	bl	8002c08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2150      	movs	r1, #80	; 0x50
 80025dc:	4618      	mov	r0, r3
 80025de:	f000 fb7a 	bl	8002cd6 <TIM_ITRx_SetConfig>
    break;
 80025e2:	e03b      	b.n	800265c <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	6859      	ldr	r1, [r3, #4]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	461a      	mov	r2, r3
 80025f2:	f000 fb3c 	bl	8002c6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2160      	movs	r1, #96	; 0x60
 80025fc:	4618      	mov	r0, r3
 80025fe:	f000 fb6a 	bl	8002cd6 <TIM_ITRx_SetConfig>
    break;
 8002602:	e02b      	b.n	800265c <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	6859      	ldr	r1, [r3, #4]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	461a      	mov	r2, r3
 8002612:	f000 faf9 	bl	8002c08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2140      	movs	r1, #64	; 0x40
 800261c:	4618      	mov	r0, r3
 800261e:	f000 fb5a 	bl	8002cd6 <TIM_ITRx_SetConfig>
    break;
 8002622:	e01b      	b.n	800265c <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2100      	movs	r1, #0
 800262a:	4618      	mov	r0, r3
 800262c:	f000 fb53 	bl	8002cd6 <TIM_ITRx_SetConfig>
    break;
 8002630:	e014      	b.n	800265c <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2110      	movs	r1, #16
 8002638:	4618      	mov	r0, r3
 800263a:	f000 fb4c 	bl	8002cd6 <TIM_ITRx_SetConfig>
    break;
 800263e:	e00d      	b.n	800265c <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2120      	movs	r1, #32
 8002646:	4618      	mov	r0, r3
 8002648:	f000 fb45 	bl	8002cd6 <TIM_ITRx_SetConfig>
    break;
 800264c:	e006      	b.n	800265c <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2130      	movs	r1, #48	; 0x30
 8002654:	4618      	mov	r0, r3
 8002656:	f000 fb3e 	bl	8002cd6 <TIM_ITRx_SetConfig>
    break;
 800265a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
  
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <TIM_DMAError>:
  * @brief  TIM DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b084      	sub	sp, #16
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	60fb      	str	r3, [r7, #12]
  
  htim->State= HAL_TIM_STATE_READY;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
   
  HAL_TIM_ErrorCallback(htim);
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f7ff ffe8 	bl	80026da <HAL_TIM_ErrorCallback>
}
 800270a:	bf00      	nop
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
	...

08002714 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a32      	ldr	r2, [pc, #200]	; (80027f4 <TIM_Base_SetConfig+0xe0>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d007      	beq.n	8002740 <TIM_Base_SetConfig+0x2c>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002736:	d003      	beq.n	8002740 <TIM_Base_SetConfig+0x2c>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a2f      	ldr	r2, [pc, #188]	; (80027f8 <TIM_Base_SetConfig+0xe4>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d108      	bne.n	8002752 <TIM_Base_SetConfig+0x3e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	4313      	orrs	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a27      	ldr	r2, [pc, #156]	; (80027f4 <TIM_Base_SetConfig+0xe0>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d013      	beq.n	8002782 <TIM_Base_SetConfig+0x6e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002760:	d00f      	beq.n	8002782 <TIM_Base_SetConfig+0x6e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a24      	ldr	r2, [pc, #144]	; (80027f8 <TIM_Base_SetConfig+0xe4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00b      	beq.n	8002782 <TIM_Base_SetConfig+0x6e>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a23      	ldr	r2, [pc, #140]	; (80027fc <TIM_Base_SetConfig+0xe8>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d007      	beq.n	8002782 <TIM_Base_SetConfig+0x6e>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a22      	ldr	r2, [pc, #136]	; (8002800 <TIM_Base_SetConfig+0xec>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d003      	beq.n	8002782 <TIM_Base_SetConfig+0x6e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a21      	ldr	r2, [pc, #132]	; (8002804 <TIM_Base_SetConfig+0xf0>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d108      	bne.n	8002794 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4313      	orrs	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	4313      	orrs	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a0e      	ldr	r2, [pc, #56]	; (80027f4 <TIM_Base_SetConfig+0xe0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d00b      	beq.n	80027d8 <TIM_Base_SetConfig+0xc4>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a0e      	ldr	r2, [pc, #56]	; (80027fc <TIM_Base_SetConfig+0xe8>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d007      	beq.n	80027d8 <TIM_Base_SetConfig+0xc4>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a0d      	ldr	r2, [pc, #52]	; (8002800 <TIM_Base_SetConfig+0xec>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d003      	beq.n	80027d8 <TIM_Base_SetConfig+0xc4>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a0c      	ldr	r2, [pc, #48]	; (8002804 <TIM_Base_SetConfig+0xf0>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d103      	bne.n	80027e0 <TIM_Base_SetConfig+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	691a      	ldr	r2, [r3, #16]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	615a      	str	r2, [r3, #20]
}
 80027e6:	bf00      	nop
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40012c00 	.word	0x40012c00
 80027f8:	40000400 	.word	0x40000400
 80027fc:	40014000 	.word	0x40014000
 8002800:	40014400 	.word	0x40014400
 8002804:	40014800 	.word	0x40014800

08002808 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002808:	b480      	push	{r7}
 800280a:	b087      	sub	sp, #28
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 800281a:	2300      	movs	r3, #0
 800281c:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	f023 0201 	bic.w	r2, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f023 0303 	bic.w	r3, r3, #3
 800284e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4313      	orrs	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f023 0302 	bic.w	r3, r3, #2
 8002860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	4313      	orrs	r3, r2
 800286a:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a28      	ldr	r2, [pc, #160]	; (8002910 <TIM_OC1_SetConfig+0x108>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d00b      	beq.n	800288c <TIM_OC1_SetConfig+0x84>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a27      	ldr	r2, [pc, #156]	; (8002914 <TIM_OC1_SetConfig+0x10c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d007      	beq.n	800288c <TIM_OC1_SetConfig+0x84>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a26      	ldr	r2, [pc, #152]	; (8002918 <TIM_OC1_SetConfig+0x110>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d003      	beq.n	800288c <TIM_OC1_SetConfig+0x84>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a25      	ldr	r2, [pc, #148]	; (800291c <TIM_OC1_SetConfig+0x114>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d10c      	bne.n	80028a6 <TIM_OC1_SetConfig+0x9e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f023 0308 	bic.w	r3, r3, #8
 8002892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	4313      	orrs	r3, r2
 800289c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f023 0304 	bic.w	r3, r3, #4
 80028a4:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a19      	ldr	r2, [pc, #100]	; (8002910 <TIM_OC1_SetConfig+0x108>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d00b      	beq.n	80028c6 <TIM_OC1_SetConfig+0xbe>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a18      	ldr	r2, [pc, #96]	; (8002914 <TIM_OC1_SetConfig+0x10c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d007      	beq.n	80028c6 <TIM_OC1_SetConfig+0xbe>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a17      	ldr	r2, [pc, #92]	; (8002918 <TIM_OC1_SetConfig+0x110>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d003      	beq.n	80028c6 <TIM_OC1_SetConfig+0xbe>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a16      	ldr	r2, [pc, #88]	; (800291c <TIM_OC1_SetConfig+0x114>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d111      	bne.n	80028ea <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	621a      	str	r2, [r3, #32]
} 
 8002904:	bf00      	nop
 8002906:	371c      	adds	r7, #28
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	40012c00 	.word	0x40012c00
 8002914:	40014000 	.word	0x40014000
 8002918:	40014400 	.word	0x40014400
 800291c:	40014800 	.word	0x40014800

08002920 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 8002932:	2300      	movs	r3, #0
 8002934:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	f023 0210 	bic.w	r2, r3, #16
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800295a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800295e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002966:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	021b      	lsls	r3, r3, #8
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	4313      	orrs	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f023 0320 	bic.w	r3, r3, #32
 800297a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	4313      	orrs	r3, r2
 8002986:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a24      	ldr	r2, [pc, #144]	; (8002a1c <TIM_OC2_SetConfig+0xfc>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d10d      	bne.n	80029ac <TIM_OC2_SetConfig+0x8c>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	011b      	lsls	r3, r3, #4
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029aa:	617b      	str	r3, [r7, #20]
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a1b      	ldr	r2, [pc, #108]	; (8002a1c <TIM_OC2_SetConfig+0xfc>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d00b      	beq.n	80029cc <TIM_OC2_SetConfig+0xac>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a1a      	ldr	r2, [pc, #104]	; (8002a20 <TIM_OC2_SetConfig+0x100>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d007      	beq.n	80029cc <TIM_OC2_SetConfig+0xac>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a19      	ldr	r2, [pc, #100]	; (8002a24 <TIM_OC2_SetConfig+0x104>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d003      	beq.n	80029cc <TIM_OC2_SetConfig+0xac>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a18      	ldr	r2, [pc, #96]	; (8002a28 <TIM_OC2_SetConfig+0x108>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d113      	bne.n	80029f4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029d2:	613b      	str	r3, [r7, #16]
#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029da:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	621a      	str	r2, [r3, #32]
}
 8002a0e:	bf00      	nop
 8002a10:	371c      	adds	r7, #28
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40012c00 	.word	0x40012c00
 8002a20:	40014000 	.word	0x40014000
 8002a24:	40014400 	.word	0x40014400
 8002a28:	40014800 	.word	0x40014800

08002a2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 8002a3e:	2300      	movs	r3, #0
 8002a40:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f023 0303 	bic.w	r3, r3, #3
 8002a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	021b      	lsls	r3, r3, #8
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a23      	ldr	r2, [pc, #140]	; (8002b24 <TIM_OC3_SetConfig+0xf8>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d10d      	bne.n	8002ab6 <TIM_OC3_SetConfig+0x8a>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002aa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	021b      	lsls	r3, r3, #8
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ab4:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a1a      	ldr	r2, [pc, #104]	; (8002b24 <TIM_OC3_SetConfig+0xf8>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d00b      	beq.n	8002ad6 <TIM_OC3_SetConfig+0xaa>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a19      	ldr	r2, [pc, #100]	; (8002b28 <TIM_OC3_SetConfig+0xfc>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d007      	beq.n	8002ad6 <TIM_OC3_SetConfig+0xaa>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a18      	ldr	r2, [pc, #96]	; (8002b2c <TIM_OC3_SetConfig+0x100>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d003      	beq.n	8002ad6 <TIM_OC3_SetConfig+0xaa>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a17      	ldr	r2, [pc, #92]	; (8002b30 <TIM_OC3_SetConfig+0x104>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d113      	bne.n	8002afe <TIM_OC3_SetConfig+0xd2>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ae4:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	621a      	str	r2, [r3, #32]
}
 8002b18:	bf00      	nop
 8002b1a:	371c      	adds	r7, #28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	40012c00 	.word	0x40012c00
 8002b28:	40014000 	.word	0x40014000
 8002b2c:	40014400 	.word	0x40014400
 8002b30:	40014800 	.word	0x40014800

08002b34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b72:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b7a:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	021b      	lsls	r3, r3, #8
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b8e:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	031b      	lsls	r3, r3, #12
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a16      	ldr	r2, [pc, #88]	; (8002bf8 <TIM_OC4_SetConfig+0xc4>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d00b      	beq.n	8002bbc <TIM_OC4_SetConfig+0x88>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a15      	ldr	r2, [pc, #84]	; (8002bfc <TIM_OC4_SetConfig+0xc8>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d007      	beq.n	8002bbc <TIM_OC4_SetConfig+0x88>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a14      	ldr	r2, [pc, #80]	; (8002c00 <TIM_OC4_SetConfig+0xcc>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d003      	beq.n	8002bbc <TIM_OC4_SetConfig+0x88>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a13      	ldr	r2, [pc, #76]	; (8002c04 <TIM_OC4_SetConfig+0xd0>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d109      	bne.n	8002bd0 <TIM_OC4_SetConfig+0x9c>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bc2:	617b      	str	r3, [r7, #20]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	019b      	lsls	r3, r3, #6
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	621a      	str	r2, [r3, #32]
}
 8002bea:	bf00      	nop
 8002bec:	371c      	adds	r7, #28
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	40012c00 	.word	0x40012c00
 8002bfc:	40014000 	.word	0x40014000
 8002c00:	40014400 	.word	0x40014400
 8002c04:	40014800 	.word	0x40014800

08002c08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	f023 0201 	bic.w	r2, r3, #1
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	f023 030a 	bic.w	r3, r3, #10
 8002c4c:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	621a      	str	r2, [r3, #32]
}
 8002c62:	bf00      	nop
 8002c64:	371c      	adds	r7, #28
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b087      	sub	sp, #28
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	f023 0210 	bic.w	r2, r3, #16
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ca0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	031b      	lsls	r3, r3, #12
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	621a      	str	r2, [r3, #32]
}
 8002cca:	bf00      	nop
 8002ccc:	371c      	adds	r7, #28
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b085      	sub	sp, #20
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
 8002cde:	460b      	mov	r3, r1
 8002ce0:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf2:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002cf4:	887b      	ldrh	r3, [r7, #2]
 8002cf6:	f043 0307 	orr.w	r3, r3, #7
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	609a      	str	r2, [r3, #8]
}
 8002d0a:	bf00      	nop
 8002d0c:	3714      	adds	r7, #20
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b087      	sub	sp, #28
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	60f8      	str	r0, [r7, #12]
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	607a      	str	r2, [r7, #4]
 8002d22:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d34:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	021a      	lsls	r2, r3, #8
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	609a      	str	r2, [r3, #8]
} 
 8002d4e:	bf00      	nop
 8002d50:	371c      	adds	r7, #28
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b087      	sub	sp, #28
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	60f8      	str	r0, [r7, #12]
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a1a      	ldr	r2, [r3, #32]
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	401a      	ands	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6a1a      	ldr	r2, [r3, #32]
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	621a      	str	r2, [r3, #32]
}
 8002d94:	bf00      	nop
 8002d96:	371c      	adds	r7, #28
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel)); 
  
  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2204      	movs	r2, #4
 8002db0:	6839      	ldr	r1, [r7, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 fa18 	bl	80031e8 <TIM_CCxNChannelCmd>
  
  /* Enable the Main Ouput */
  __HAL_TIM_MOE_ENABLE(htim);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dc6:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
} 
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d101      	bne.n	8002dfe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e105      	b.n	800300a <HAL_TIM_PWM_ConfigChannel+0x226>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2202      	movs	r2, #2
 8002e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  switch (Channel)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b14      	cmp	r3, #20
 8002e12:	f200 80f0 	bhi.w	8002ff6 <HAL_TIM_PWM_ConfigChannel+0x212>
 8002e16:	a201      	add	r2, pc, #4	; (adr r2, 8002e1c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1c:	08002e71 	.word	0x08002e71
 8002e20:	08002ff7 	.word	0x08002ff7
 8002e24:	08002ff7 	.word	0x08002ff7
 8002e28:	08002ff7 	.word	0x08002ff7
 8002e2c:	08002eb1 	.word	0x08002eb1
 8002e30:	08002ff7 	.word	0x08002ff7
 8002e34:	08002ff7 	.word	0x08002ff7
 8002e38:	08002ff7 	.word	0x08002ff7
 8002e3c:	08002ef3 	.word	0x08002ef3
 8002e40:	08002ff7 	.word	0x08002ff7
 8002e44:	08002ff7 	.word	0x08002ff7
 8002e48:	08002ff7 	.word	0x08002ff7
 8002e4c:	08002f33 	.word	0x08002f33
 8002e50:	08002ff7 	.word	0x08002ff7
 8002e54:	08002ff7 	.word	0x08002ff7
 8002e58:	08002ff7 	.word	0x08002ff7
 8002e5c:	08002f75 	.word	0x08002f75
 8002e60:	08002ff7 	.word	0x08002ff7
 8002e64:	08002ff7 	.word	0x08002ff7
 8002e68:	08002ff7 	.word	0x08002ff7
 8002e6c:	08002fb5 	.word	0x08002fb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68b9      	ldr	r1, [r7, #8]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff fcc6 	bl	8002808 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699a      	ldr	r2, [r3, #24]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0208 	orr.w	r2, r2, #8
 8002e8a:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699a      	ldr	r2, [r3, #24]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0204 	bic.w	r2, r2, #4
 8002e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6999      	ldr	r1, [r3, #24]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	691a      	ldr	r2, [r3, #16]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	619a      	str	r2, [r3, #24]
    }
    break;
 8002eae:	e0a3      	b.n	8002ff8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff fd32 	bl	8002920 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	699a      	ldr	r2, [r3, #24]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eca:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6999      	ldr	r1, [r3, #24]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	021a      	lsls	r2, r3, #8
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	619a      	str	r2, [r3, #24]
    }
    break;
 8002ef0:	e082      	b.n	8002ff8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68b9      	ldr	r1, [r7, #8]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff fd97 	bl	8002a2c <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	69da      	ldr	r2, [r3, #28]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f042 0208 	orr.w	r2, r2, #8
 8002f0c:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	69da      	ldr	r2, [r3, #28]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0204 	bic.w	r2, r2, #4
 8002f1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	69d9      	ldr	r1, [r3, #28]
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	61da      	str	r2, [r3, #28]
    }
    break;
 8002f30:	e062      	b.n	8002ff8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68b9      	ldr	r1, [r7, #8]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff fdfb 	bl	8002b34 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	69da      	ldr	r2, [r3, #28]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f4c:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	69da      	ldr	r2, [r3, #28]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	69d9      	ldr	r1, [r3, #28]
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	021a      	lsls	r2, r3, #8
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	61da      	str	r2, [r3, #28]
    }
    break;
 8002f72:	e041      	b.n	8002ff8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68b9      	ldr	r1, [r7, #8]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 f958 	bl	8003230 <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0208 	orr.w	r2, r2, #8
 8002f8e:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0204 	bic.w	r2, r2, #4
 8002f9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	691a      	ldr	r2, [r3, #16]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 8002fb2:	e021      	b.n	8002ff8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68b9      	ldr	r1, [r7, #8]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 f99c 	bl	80032f8 <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fce:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	021a      	lsls	r2, r3, #8
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 8002ff4:	e000      	b.n	8002ff8 <HAL_TIM_PWM_ConfigChannel+0x214>
    
    default:
    break;    
 8002ff6:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  __HAL_UNLOCK(htim);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop

08003014 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003028:	2302      	movs	r3, #2
 800302a:	e038      	b.n	800309e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a18      	ldr	r2, [pc, #96]	; (80030ac <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d108      	bne.n	8003060 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003054:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	4313      	orrs	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003066:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	4313      	orrs	r3, r2
 8003070:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003078:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	4313      	orrs	r3, r2
 8003082:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
} 
 800309e:	4618      	mov	r0, r3
 80030a0:	3714      	adds	r7, #20
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	40012c00 	.word	0x40012c00

080030b0 <HAL_TIMEx_ConfigBreakDeadTime>:
            STM32F398xx and STM32F303x8 two break inputs can be configured.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim, 
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e067      	b.n	800319c <HAL_TIMEx_ConfigBreakDeadTime+0xec>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	4313      	orrs	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4313      	orrs	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	4313      	orrs	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	4313      	orrs	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003132:	4313      	orrs	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003140:	4313      	orrs	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	041b      	lsls	r3, r3, #16
 8003150:	4313      	orrs	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a13      	ldr	r2, [pc, #76]	; (80031a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d115      	bne.n	800318a <HAL_TIMEx_ConfigBreakDeadTime+0xda>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	051b      	lsls	r3, r3, #20
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	4313      	orrs	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	4313      	orrs	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	40012c00 	.word	0x40012c00

080031ac <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable. 
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	617b      	str	r3, [r7, #20]

  tmp = TIM_CCER_CC1NE << Channel;
 80031f8:	2204      	movs	r2, #4
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6a1a      	ldr	r2, [r3, #32]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	43db      	mvns	r3, r3
 800320a:	401a      	ands	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a1a      	ldr	r2, [r3, #32]
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	fa01 f303 	lsl.w	r3, r1, r3
 800321c:	431a      	orrs	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	621a      	str	r2, [r3, #32]
}
 8003222:	bf00      	nop
 8003224:	371c      	adds	r7, #28
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
	...

08003230 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003230:	b480      	push	{r7}
 8003232:	b087      	sub	sp, #28
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800323a:	2300      	movs	r3, #0
 800323c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003262:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800326a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326e:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	4313      	orrs	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003280:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	041b      	lsls	r3, r3, #16
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	4313      	orrs	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a15      	ldr	r2, [pc, #84]	; (80032e8 <TIM_OC5_SetConfig+0xb8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00b      	beq.n	80032ae <TIM_OC5_SetConfig+0x7e>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a14      	ldr	r2, [pc, #80]	; (80032ec <TIM_OC5_SetConfig+0xbc>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d007      	beq.n	80032ae <TIM_OC5_SetConfig+0x7e>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a13      	ldr	r2, [pc, #76]	; (80032f0 <TIM_OC5_SetConfig+0xc0>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d003      	beq.n	80032ae <TIM_OC5_SetConfig+0x7e>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a12      	ldr	r2, [pc, #72]	; (80032f4 <TIM_OC5_SetConfig+0xc4>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d109      	bne.n	80032c2 <TIM_OC5_SetConfig+0x92>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	021b      	lsls	r3, r3, #8
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	4313      	orrs	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	621a      	str	r2, [r3, #32]
}
 80032dc:	bf00      	nop
 80032de:	371c      	adds	r7, #28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	40012c00 	.word	0x40012c00
 80032ec:	40014000 	.word	0x40014000
 80032f0:	40014400 	.word	0x40014400
 80032f4:	40014800 	.word	0x40014800

080032f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003302:	2300      	movs	r3, #0
 8003304:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8003306:	2300      	movs	r3, #0
 8003308:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 800330a:	2300      	movs	r3, #0
 800330c:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332a:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003336:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	021b      	lsls	r3, r3, #8
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800334a:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	051b      	lsls	r3, r3, #20
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4313      	orrs	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a16      	ldr	r2, [pc, #88]	; (80033b4 <TIM_OC6_SetConfig+0xbc>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d00b      	beq.n	8003378 <TIM_OC6_SetConfig+0x80>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a15      	ldr	r2, [pc, #84]	; (80033b8 <TIM_OC6_SetConfig+0xc0>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d007      	beq.n	8003378 <TIM_OC6_SetConfig+0x80>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a14      	ldr	r2, [pc, #80]	; (80033bc <TIM_OC6_SetConfig+0xc4>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d003      	beq.n	8003378 <TIM_OC6_SetConfig+0x80>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a13      	ldr	r2, [pc, #76]	; (80033c0 <TIM_OC6_SetConfig+0xc8>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d109      	bne.n	800338c <TIM_OC6_SetConfig+0x94>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800337e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	029b      	lsls	r3, r3, #10
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4313      	orrs	r3, r2
 800338a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	621a      	str	r2, [r3, #32]
} 
 80033a6:	bf00      	nop
 80033a8:	371c      	adds	r7, #28
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40012c00 	.word	0x40012c00
 80033b8:	40014000 	.word	0x40014000
 80033bc:	40014400 	.word	0x40014400
 80033c0:	40014800 	.word	0x40014800

080033c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e043      	b.n	800345e <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d106      	bne.n	80033f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f001 fc20 	bl	8004c30 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2224      	movs	r2, #36	; 0x24
 80033f4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0201 	bic.w	r2, r2, #1
 8003406:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 fa5f 	bl	80038cc <UART_SetConfig>
 800340e:	4603      	mov	r3, r0
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e022      	b.n	800345e <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	2b00      	cmp	r3, #0
 800341e:	d002      	beq.n	8003426 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 fbb9 	bl	8003b98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003434:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003444:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f042 0201 	orr.w	r2, r2, #1
 8003454:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fc40 	bl	8003cdc <UART_CheckIdleState>
 800345c:	4603      	mov	r3, r0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_UART_Receive_IT>:
  * @param pData pointer to data buffer.
  * @param Size amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003466:	b480      	push	{r7}
 8003468:	b085      	sub	sp, #20
 800346a:	af00      	add	r7, sp, #0
 800346c:	60f8      	str	r0, [r7, #12]
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	4613      	mov	r3, r2
 8003472:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b20      	cmp	r3, #32
 800347e:	d172      	bne.n	8003566 <HAL_UART_Receive_IT+0x100>
  {
    if((pData == NULL ) || (Size == 0U))
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <HAL_UART_Receive_IT+0x26>
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e06b      	b.n	8003568 <HAL_UART_Receive_IT+0x102>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003496:	2b01      	cmp	r3, #1
 8003498:	d101      	bne.n	800349e <HAL_UART_Receive_IT+0x38>
 800349a:	2302      	movs	r3, #2
 800349c:	e064      	b.n	8003568 <HAL_UART_Receive_IT+0x102>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->pRxBuffPtr = pData;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	88fa      	ldrh	r2, [r7, #6]
 80034b0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	88fa      	ldrh	r2, [r7, #6]
 80034b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034c4:	d10e      	bne.n	80034e4 <HAL_UART_Receive_IT+0x7e>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d105      	bne.n	80034da <HAL_UART_Receive_IT+0x74>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80034d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034d8:	e028      	b.n	800352c <HAL_UART_Receive_IT+0xc6>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	22ff      	movs	r2, #255	; 0xff
 80034de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034e2:	e023      	b.n	800352c <HAL_UART_Receive_IT+0xc6>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10d      	bne.n	8003508 <HAL_UART_Receive_IT+0xa2>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d104      	bne.n	80034fe <HAL_UART_Receive_IT+0x98>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	22ff      	movs	r2, #255	; 0xff
 80034f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034fc:	e016      	b.n	800352c <HAL_UART_Receive_IT+0xc6>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	227f      	movs	r2, #127	; 0x7f
 8003502:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003506:	e011      	b.n	800352c <HAL_UART_Receive_IT+0xc6>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003510:	d10c      	bne.n	800352c <HAL_UART_Receive_IT+0xc6>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d104      	bne.n	8003524 <HAL_UART_Receive_IT+0xbe>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	227f      	movs	r2, #127	; 0x7f
 800351e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003522:	e003      	b.n	800352c <HAL_UART_Receive_IT+0xc6>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	223f      	movs	r2, #63	; 0x3f
 8003528:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2222      	movs	r2, #34	; 0x22
 8003536:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f042 0201 	orr.w	r2, r2, #1
 8003550:	609a      	str	r2, [r3, #8]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003560:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003562:	2300      	movs	r3, #0
 8003564:	e000      	b.n	8003568 <HAL_UART_Receive_IT+0x102>
  }
  else
  {
    return HAL_BUSY;
 8003566:	2302      	movs	r3, #2
  }
}
 8003568:	4618      	mov	r0, r3
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_UART_Transmit_DMA>:
  *       DMA half transfer complete, DMA transfer complete and DMA transfer
  *       error interrupts are enabled
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	4613      	mov	r3, r2
 8003580:	80fb      	strh	r3, [r7, #6]
  /* Check if UART instance supports continuous communication using DMA */
  assert_param(IS_UART_DMA_INSTANCE(huart->Instance));

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b20      	cmp	r3, #32
 800358c:	d152      	bne.n	8003634 <HAL_UART_Transmit_DMA+0xc0>
  {
    if((pData == NULL ) || (Size == 0U))
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <HAL_UART_Transmit_DMA+0x26>
 8003594:	88fb      	ldrh	r3, [r7, #6]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e04b      	b.n	8003636 <HAL_UART_Transmit_DMA+0xc2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_UART_Transmit_DMA+0x38>
 80035a8:	2302      	movs	r3, #2
 80035aa:	e044      	b.n	8003636 <HAL_UART_Transmit_DMA+0xc2>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->pTxBuffPtr = pData;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	88fa      	ldrh	r2, [r7, #6]
 80035be:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	88fa      	ldrh	r2, [r7, #6]
 80035c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2221      	movs	r2, #33	; 0x21
 80035d4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035dc:	4a18      	ldr	r2, [pc, #96]	; (8003640 <HAL_UART_Transmit_DMA+0xcc>)
 80035de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035e4:	4a17      	ldr	r2, [pc, #92]	; (8003644 <HAL_UART_Transmit_DMA+0xd0>)
 80035e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ec:	4a16      	ldr	r2, [pc, #88]	; (8003648 <HAL_UART_Transmit_DMA+0xd4>)
 80035ee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035f4:	2200      	movs	r2, #0
 80035f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003600:	4619      	mov	r1, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	3328      	adds	r3, #40	; 0x28
 8003608:	461a      	mov	r2, r3
 800360a:	88fb      	ldrh	r3, [r7, #6]
 800360c:	f7fc ff9e 	bl	800054c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2240      	movs	r2, #64	; 0x40
 8003616:	621a      	str	r2, [r3, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800362e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8003630:	2300      	movs	r3, #0
 8003632:	e000      	b.n	8003636 <HAL_UART_Transmit_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8003634:	2302      	movs	r3, #2
  }
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	08003e6b 	.word	0x08003e6b
 8003644:	08003ebf 	.word	0x08003ebf
 8003648:	08003edb 	.word	0x08003edb

0800364c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	613b      	str	r3, [r7, #16]
  uint32_t cr3its;
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	60fb      	str	r3, [r7, #12]
  if (errorflags == RESET)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10d      	bne.n	800368e <HAL_UART_IRQHandler+0x42>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f003 0320 	and.w	r3, r3, #32
 8003678:	2b00      	cmp	r3, #0
 800367a:	d008      	beq.n	800368e <HAL_UART_IRQHandler+0x42>
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_UART_IRQHandler+0x42>
    {
      UART_Receive_IT(huart);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fce9 	bl	800405e <UART_Receive_IT>
      return;
 800368c:	e0fa      	b.n	8003884 <HAL_UART_IRQHandler+0x238>
    }
  }  

  /* If some errors occur */
  cr3its = READ_REG(huart->Instance->CR3);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	60bb      	str	r3, [r7, #8]
  if(   (errorflags != RESET)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 80ba 	beq.w	8003812 <HAL_UART_IRQHandler+0x1c6>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d105      	bne.n	80036b4 <HAL_UART_IRQHandler+0x68>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 80af 	beq.w	8003812 <HAL_UART_IRQHandler+0x1c6>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00e      	beq.n	80036dc <HAL_UART_IRQHandler+0x90>
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d009      	beq.n	80036dc <HAL_UART_IRQHandler+0x90>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2201      	movs	r2, #1
 80036ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036d4:	f043 0201 	orr.w	r2, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00e      	beq.n	8003704 <HAL_UART_IRQHandler+0xb8>
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d009      	beq.n	8003704 <HAL_UART_IRQHandler+0xb8>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2202      	movs	r2, #2
 80036f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036fc:	f043 0204 	orr.w	r2, r3, #4
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f003 0304 	and.w	r3, r3, #4
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00e      	beq.n	800372c <HAL_UART_IRQHandler+0xe0>
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b00      	cmp	r3, #0
 8003716:	d009      	beq.n	800372c <HAL_UART_IRQHandler+0xe0>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2204      	movs	r2, #4
 800371e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003724:	f043 0202 	orr.w	r2, r3, #2
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d013      	beq.n	800375e <HAL_UART_IRQHandler+0x112>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f003 0320 	and.w	r3, r3, #32
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 800373c:	2b00      	cmp	r3, #0
 800373e:	d104      	bne.n	800374a <HAL_UART_IRQHandler+0xfe>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d009      	beq.n	800375e <HAL_UART_IRQHandler+0x112>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2208      	movs	r2, #8
 8003750:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003756:	f043 0208 	orr.w	r2, r3, #8
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 808d 	beq.w	8003882 <HAL_UART_IRQHandler+0x236>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f003 0320 	and.w	r3, r3, #32
 800376e:	2b00      	cmp	r3, #0
 8003770:	d007      	beq.n	8003782 <HAL_UART_IRQHandler+0x136>
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	2b00      	cmp	r3, #0
 800377a:	d002      	beq.n	8003782 <HAL_UART_IRQHandler+0x136>
      {
        UART_Receive_IT(huart);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 fc6e 	bl	800405e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b00      	cmp	r3, #0
 800378c:	d106      	bne.n	800379c <HAL_UART_IRQHandler+0x150>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003798:	2b40      	cmp	r3, #64	; 0x40
 800379a:	d131      	bne.n	8003800 <HAL_UART_IRQHandler+0x1b4>
      {  
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 fb46 	bl	8003e2e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ac:	2b40      	cmp	r3, #64	; 0x40
 80037ae:	d123      	bne.n	80037f8 <HAL_UART_IRQHandler+0x1ac>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037be:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d013      	beq.n	80037f0 <HAL_UART_IRQHandler+0x1a4>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037cc:	4a2f      	ldr	r2, [pc, #188]	; (800388c <HAL_UART_IRQHandler+0x240>)
 80037ce:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fc ff18 	bl	800060a <HAL_DMA_Abort_IT>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d016      	beq.n	800380e <HAL_UART_IRQHandler+0x1c2>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80037ea:	4610      	mov	r0, r2
 80037ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ee:	e00e      	b.n	800380e <HAL_UART_IRQHandler+0x1c2>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f861 	bl	80038b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f6:	e00a      	b.n	800380e <HAL_UART_IRQHandler+0x1c2>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f85d 	bl	80038b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037fe:	e006      	b.n	800380e <HAL_UART_IRQHandler+0x1c2>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f859 	bl	80038b8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 800380c:	e039      	b.n	8003882 <HAL_UART_IRQHandler+0x236>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800380e:	bf00      	nop
    return;
 8003810:	e037      	b.n	8003882 <HAL_UART_IRQHandler+0x236>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d015      	beq.n	8003848 <HAL_UART_IRQHandler+0x1fc>
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d010      	beq.n	8003848 <HAL_UART_IRQHandler+0x1fc>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800382e:	621a      	str	r2, [r3, #32]
    /* Set the UART state ready to be able to start again the process */
    huart->gState  = HAL_UART_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    huart->RxState = HAL_UART_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2220      	movs	r2, #32
 800383c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    HAL_UARTEx_WakeupCallback(huart);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 fc76 	bl	8004132 <HAL_UARTEx_WakeupCallback>
    return;
 8003846:	e01d      	b.n	8003884 <HAL_UART_IRQHandler+0x238>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384e:	2b00      	cmp	r3, #0
 8003850:	d008      	beq.n	8003864 <HAL_UART_IRQHandler+0x218>
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_UART_IRQHandler+0x218>
  {
    UART_Transmit_IT(huart);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 fb8e 	bl	8003f7e <UART_Transmit_IT>
    return;
 8003862:	e00f      	b.n	8003884 <HAL_UART_IRQHandler+0x238>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <HAL_UART_IRQHandler+0x238>
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003874:	2b00      	cmp	r3, #0
 8003876:	d005      	beq.n	8003884 <HAL_UART_IRQHandler+0x238>
  {
    UART_EndTransmit_IT(huart);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 fbd8 	bl	800402e <UART_EndTransmit_IT>
    return;
 800387e:	bf00      	nop
 8003880:	e000      	b.n	8003884 <HAL_UART_IRQHandler+0x238>
    return;
 8003882:	bf00      	nop
  }

}
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	08003f53 	.word	0x08003f53

08003890 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80038d8:	2310      	movs	r3, #16
 80038da:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 80038dc:	2300      	movs	r3, #0
 80038de:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	431a      	orrs	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	4b9f      	ldr	r3, [pc, #636]	; (8003b84 <UART_SetConfig+0x2b8>)
 8003908:	4013      	ands	r3, r2
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6812      	ldr	r2, [r2, #0]
 800390e:	68f9      	ldr	r1, [r7, #12]
 8003910:	430b      	orrs	r3, r1
 8003912:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699a      	ldr	r2, [r3, #24]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	4313      	orrs	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	430a      	orrs	r2, r1
 8003948:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a8e      	ldr	r2, [pc, #568]	; (8003b88 <UART_SetConfig+0x2bc>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d121      	bne.n	8003998 <UART_SetConfig+0xcc>
 8003954:	4b8d      	ldr	r3, [pc, #564]	; (8003b8c <UART_SetConfig+0x2c0>)
 8003956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003958:	f003 0303 	and.w	r3, r3, #3
 800395c:	2b03      	cmp	r3, #3
 800395e:	d817      	bhi.n	8003990 <UART_SetConfig+0xc4>
 8003960:	a201      	add	r2, pc, #4	; (adr r2, 8003968 <UART_SetConfig+0x9c>)
 8003962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003966:	bf00      	nop
 8003968:	08003979 	.word	0x08003979
 800396c:	08003985 	.word	0x08003985
 8003970:	0800398b 	.word	0x0800398b
 8003974:	0800397f 	.word	0x0800397f
 8003978:	2300      	movs	r3, #0
 800397a:	75fb      	strb	r3, [r7, #23]
 800397c:	e01e      	b.n	80039bc <UART_SetConfig+0xf0>
 800397e:	2302      	movs	r3, #2
 8003980:	75fb      	strb	r3, [r7, #23]
 8003982:	e01b      	b.n	80039bc <UART_SetConfig+0xf0>
 8003984:	2304      	movs	r3, #4
 8003986:	75fb      	strb	r3, [r7, #23]
 8003988:	e018      	b.n	80039bc <UART_SetConfig+0xf0>
 800398a:	2308      	movs	r3, #8
 800398c:	75fb      	strb	r3, [r7, #23]
 800398e:	e015      	b.n	80039bc <UART_SetConfig+0xf0>
 8003990:	2310      	movs	r3, #16
 8003992:	75fb      	strb	r3, [r7, #23]
 8003994:	bf00      	nop
 8003996:	e011      	b.n	80039bc <UART_SetConfig+0xf0>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a7c      	ldr	r2, [pc, #496]	; (8003b90 <UART_SetConfig+0x2c4>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d102      	bne.n	80039a8 <UART_SetConfig+0xdc>
 80039a2:	2300      	movs	r3, #0
 80039a4:	75fb      	strb	r3, [r7, #23]
 80039a6:	e009      	b.n	80039bc <UART_SetConfig+0xf0>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a79      	ldr	r2, [pc, #484]	; (8003b94 <UART_SetConfig+0x2c8>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d102      	bne.n	80039b8 <UART_SetConfig+0xec>
 80039b2:	2300      	movs	r3, #0
 80039b4:	75fb      	strb	r3, [r7, #23]
 80039b6:	e001      	b.n	80039bc <UART_SetConfig+0xf0>
 80039b8:	2310      	movs	r3, #16
 80039ba:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039c4:	d16f      	bne.n	8003aa6 <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 80039c6:	7dfb      	ldrb	r3, [r7, #23]
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	d857      	bhi.n	8003a7c <UART_SetConfig+0x1b0>
 80039cc:	a201      	add	r2, pc, #4	; (adr r2, 80039d4 <UART_SetConfig+0x108>)
 80039ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d2:	bf00      	nop
 80039d4:	080039f9 	.word	0x080039f9
 80039d8:	08003a15 	.word	0x08003a15
 80039dc:	08003a31 	.word	0x08003a31
 80039e0:	08003a7d 	.word	0x08003a7d
 80039e4:	08003a4b 	.word	0x08003a4b
 80039e8:	08003a7d 	.word	0x08003a7d
 80039ec:	08003a7d 	.word	0x08003a7d
 80039f0:	08003a7d 	.word	0x08003a7d
 80039f4:	08003a67 	.word	0x08003a67
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80039f8:	f7fe f9a4 	bl	8001d44 <HAL_RCC_GetPCLK1Freq>
 80039fc:	4603      	mov	r3, r0
 80039fe:	005a      	lsls	r2, r3, #1
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	085b      	lsrs	r3, r3, #1
 8003a06:	441a      	add	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a10:	82bb      	strh	r3, [r7, #20]
        break;
 8003a12:	e036      	b.n	8003a82 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003a14:	f7fe f9b8 	bl	8001d88 <HAL_RCC_GetPCLK2Freq>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	005a      	lsls	r2, r3, #1
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	085b      	lsrs	r3, r3, #1
 8003a22:	441a      	add	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2c:	82bb      	strh	r3, [r7, #20]
        break;
 8003a2e:	e028      	b.n	8003a82 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	085b      	lsrs	r3, r3, #1
 8003a36:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003a3a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6852      	ldr	r2, [r2, #4]
 8003a42:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a46:	82bb      	strh	r3, [r7, #20]
        break;
 8003a48:	e01b      	b.n	8003a82 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003a4a:	f7fe f905 	bl	8001c58 <HAL_RCC_GetSysClockFreq>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	005a      	lsls	r2, r3, #1
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	085b      	lsrs	r3, r3, #1
 8003a58:	441a      	add	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a62:	82bb      	strh	r3, [r7, #20]
        break;
 8003a64:	e00d      	b.n	8003a82 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	085b      	lsrs	r3, r3, #1
 8003a6c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a78:	82bb      	strh	r3, [r7, #20]
        break;
 8003a7a:	e002      	b.n	8003a82 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	74fb      	strb	r3, [r7, #19]
        break;
 8003a80:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8003a82:	8abb      	ldrh	r3, [r7, #20]
 8003a84:	f023 030f 	bic.w	r3, r3, #15
 8003a88:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a8a:	8abb      	ldrh	r3, [r7, #20]
 8003a8c:	105b      	asrs	r3, r3, #1
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	897b      	ldrh	r3, [r7, #10]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	897a      	ldrh	r2, [r7, #10]
 8003aa2:	60da      	str	r2, [r3, #12]
 8003aa4:	e069      	b.n	8003b7a <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 8003aa6:	7dfb      	ldrb	r3, [r7, #23]
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d863      	bhi.n	8003b74 <UART_SetConfig+0x2a8>
 8003aac:	a201      	add	r2, pc, #4	; (adr r2, 8003ab4 <UART_SetConfig+0x1e8>)
 8003aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab2:	bf00      	nop
 8003ab4:	08003ad9 	.word	0x08003ad9
 8003ab8:	08003af9 	.word	0x08003af9
 8003abc:	08003b19 	.word	0x08003b19
 8003ac0:	08003b75 	.word	0x08003b75
 8003ac4:	08003b39 	.word	0x08003b39
 8003ac8:	08003b75 	.word	0x08003b75
 8003acc:	08003b75 	.word	0x08003b75
 8003ad0:	08003b75 	.word	0x08003b75
 8003ad4:	08003b59 	.word	0x08003b59
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003ad8:	f7fe f934 	bl	8001d44 <HAL_RCC_GetPCLK1Freq>
 8003adc:	4602      	mov	r2, r0
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	085b      	lsrs	r3, r3, #1
 8003ae4:	441a      	add	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	60da      	str	r2, [r3, #12]
        break;
 8003af6:	e040      	b.n	8003b7a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003af8:	f7fe f946 	bl	8001d88 <HAL_RCC_GetPCLK2Freq>
 8003afc:	4602      	mov	r2, r0
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	085b      	lsrs	r3, r3, #1
 8003b04:	441a      	add	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	60da      	str	r2, [r3, #12]
        break;
 8003b16:	e030      	b.n	8003b7a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	085b      	lsrs	r3, r3, #1
 8003b1e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003b22:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	6852      	ldr	r2, [r2, #4]
 8003b2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	60da      	str	r2, [r3, #12]
        break;
 8003b36:	e020      	b.n	8003b7a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003b38:	f7fe f88e 	bl	8001c58 <HAL_RCC_GetSysClockFreq>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	085b      	lsrs	r3, r3, #1
 8003b44:	441a      	add	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	60da      	str	r2, [r3, #12]
        break;
 8003b56:	e010      	b.n	8003b7a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	085b      	lsrs	r3, r3, #1
 8003b5e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	60da      	str	r2, [r3, #12]
        break;
 8003b72:	e002      	b.n	8003b7a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	74fb      	strb	r3, [r7, #19]
        break;
 8003b78:	bf00      	nop
    }
  }

  return ret;
 8003b7a:	7cfb      	ldrb	r3, [r7, #19]

}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	efff69f3 	.word	0xefff69f3
 8003b88:	40013800 	.word	0x40013800
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	40004400 	.word	0x40004400
 8003b94:	40004800 	.word	0x40004800

08003b98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00a      	beq.n	8003bc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00a      	beq.n	8003c06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00a      	beq.n	8003c28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	f003 0310 	and.w	r3, r3, #16
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00a      	beq.n	8003c4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d01a      	beq.n	8003cae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c96:	d10a      	bne.n	8003cae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	605a      	str	r2, [r3, #4]
  }
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af02      	add	r7, sp, #8
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003cee:	f7fc facd 	bl	800028c <HAL_GetTick>
 8003cf2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0308 	and.w	r3, r3, #8
 8003cfe:	2b08      	cmp	r3, #8
 8003d00:	d10e      	bne.n	8003d20 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 f82c 	bl	8003d6e <UART_WaitOnFlagUntilTimeout>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e022      	b.n	8003d66 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0304 	and.w	r3, r3, #4
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d10e      	bne.n	8003d4c <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f816 	bl	8003d6e <UART_WaitOnFlagUntilTimeout>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e00c      	b.n	8003d66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b084      	sub	sp, #16
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	603b      	str	r3, [r7, #0]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d7e:	e02c      	b.n	8003dda <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d86:	d028      	beq.n	8003dda <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d007      	beq.n	8003d9e <UART_WaitOnFlagUntilTimeout+0x30>
 8003d8e:	f7fc fa7d 	bl	800028c <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d21d      	bcs.n	8003dda <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003dac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0201 	bic.w	r2, r2, #1
 8003dbc:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e00f      	b.n	8003dfa <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	69da      	ldr	r2, [r3, #28]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	4013      	ands	r3, r2
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	bf0c      	ite	eq
 8003dea:	2301      	moveq	r3, #1
 8003dec:	2300      	movne	r3, #0
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	461a      	mov	r2, r3
 8003df2:	79fb      	ldrb	r3, [r7, #7]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d0c3      	beq.n	8003d80 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003e18:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e44:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 0201 	bic.w	r2, r2, #1
 8003e54:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b084      	sub	sp, #16
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	60fb      	str	r3, [r7, #12]
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0320 	and.w	r3, r3, #32
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d114      	bne.n	8003eb0 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e9c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eac:	601a      	str	r2, [r3, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8003eae:	e002      	b.n	8003eb6 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f7ff fced 	bl	8003890 <HAL_UART_TxCpltCallback>
}
 8003eb6:	bf00      	nop
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	60fb      	str	r3, [r7, #12]

  HAL_UART_TxHalfCpltCallback(huart);
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f7ff fce9 	bl	80038a4 <HAL_UART_TxHalfCpltCallback>
}
 8003ed2:	bf00      	nop
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b084      	sub	sp, #16
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b21      	cmp	r3, #33	; 0x21
 8003ef2:	d10d      	bne.n	8003f10 <UART_DMAError+0x36>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efe:	2b80      	cmp	r3, #128	; 0x80
 8003f00:	d106      	bne.n	8003f10 <UART_DMAError+0x36>
  {
    huart->TxXferCount = 0U;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f7ff ff79 	bl	8003e02 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b22      	cmp	r3, #34	; 0x22
 8003f1a:	d10d      	bne.n	8003f38 <UART_DMAError+0x5e>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f26:	2b40      	cmp	r3, #64	; 0x40
 8003f28:	d106      	bne.n	8003f38 <UART_DMAError+0x5e>
  {
    huart->RxXferCount = 0U;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f7ff ff7b 	bl	8003e2e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f3c:	f043 0210 	orr.w	r2, r3, #16
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	66da      	str	r2, [r3, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f7ff fcb7 	bl	80038b8 <HAL_UART_ErrorCallback>
}
 8003f4a:	bf00      	nop
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b084      	sub	sp, #16
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f7ff fca1 	bl	80038b8 <HAL_UART_ErrorCallback>
}
 8003f76:	bf00      	nop
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b085      	sub	sp, #20
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b21      	cmp	r3, #33	; 0x21
 8003f90:	d146      	bne.n	8004020 <UART_Transmit_IT+0xa2>
  {
    if(huart->TxXferCount == 0U)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d111      	bne.n	8003fc2 <UART_Transmit_IT+0x44>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fac:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fbc:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	e02f      	b.n	8004022 <UART_Transmit_IT+0xa4>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fca:	d114      	bne.n	8003ff6 <UART_Transmit_IT+0x78>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d110      	bne.n	8003ff6 <UART_Transmit_IT+0x78>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd8:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	881a      	ldrh	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fe6:	b292      	uxth	r2, r2
 8003fe8:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fee:	1c9a      	adds	r2, r3, #2
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	64da      	str	r2, [r3, #76]	; 0x4c
 8003ff4:	e009      	b.n	800400a <UART_Transmit_IT+0x8c>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ffa:	1c59      	adds	r1, r3, #1
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	64d1      	str	r1, [r2, #76]	; 0x4c
 8004000:	781a      	ldrb	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	b292      	uxth	r2, r2
 8004008:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      huart->TxXferCount--;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004010:	b29b      	uxth	r3, r3
 8004012:	3b01      	subs	r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      return HAL_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	e000      	b.n	8004022 <UART_Transmit_IT+0xa4>
    }
  }
  else
  {
    return HAL_BUSY;
 8004020:	2302      	movs	r3, #2
  }
}
 8004022:	4618      	mov	r0, r3
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b082      	sub	sp, #8
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004044:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2220      	movs	r2, #32
 800404a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7ff fc1e 	bl	8003890 <HAL_UART_TxCpltCallback>

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800405e:	b590      	push	{r4, r7, lr}
 8004060:	b085      	sub	sp, #20
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800406c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b22      	cmp	r3, #34	; 0x22
 8004078:	d14e      	bne.n	8004118 <UART_Receive_IT+0xba>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004080:	81bb      	strh	r3, [r7, #12]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800408a:	d112      	bne.n	80040b2 <UART_Receive_IT+0x54>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10e      	bne.n	80040b2 <UART_Receive_IT+0x54>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004098:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 800409a:	89ba      	ldrh	r2, [r7, #12]
 800409c:	89fb      	ldrh	r3, [r7, #14]
 800409e:	4013      	ands	r3, r2
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2U;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040aa:	1c9a      	adds	r2, r3, #2
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	655a      	str	r2, [r3, #84]	; 0x54
 80040b0:	e00b      	b.n	80040ca <UART_Receive_IT+0x6c>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80040b2:	89bb      	ldrh	r3, [r7, #12]
 80040b4:	b2d9      	uxtb	r1, r3
 80040b6:	89fb      	ldrh	r3, [r7, #14]
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040be:	1c5c      	adds	r4, r3, #1
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	6544      	str	r4, [r0, #84]	; 0x54
 80040c4:	400a      	ands	r2, r1
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0U)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	4619      	mov	r1, r3
 80040da:	f8a2 105a 	strh.w	r1, [r2, #90]	; 0x5a
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d118      	bne.n	8004114 <UART_Receive_IT+0xb6>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040f0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0201 	bic.w	r2, r2, #1
 8004100:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2220      	movs	r2, #32
 8004106:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 fee4 	bl	8004ed8 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8004110:	2300      	movs	r3, #0
 8004112:	e00a      	b.n	800412a <UART_Receive_IT+0xcc>
    }

    return HAL_OK;
 8004114:	2300      	movs	r3, #0
 8004116:	e008      	b.n	800412a <UART_Receive_IT+0xcc>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	699a      	ldr	r2, [r3, #24]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0208 	orr.w	r2, r2, #8
 8004126:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 8004128:	2302      	movs	r3, #2
  }
}
 800412a:	4618      	mov	r0, r3
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	bd90      	pop	{r4, r7, pc}

08004132 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
	...

08004148 <PWM_Start_DMA>:

void dma_half(DMA_HandleTypeDef *hdma);
void dma_full(DMA_HandleTypeDef *hdma);
//TIM_CHANNEL_1
void PWM_Start_DMA(uint32_t *pData, uint16_t Length)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	807b      	strh	r3, [r7, #2]
	htim1.hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = dma_half;
 8004154:	4b1e      	ldr	r3, [pc, #120]	; (80041d0 <PWM_Start_DMA+0x88>)
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	4a1e      	ldr	r2, [pc, #120]	; (80041d4 <PWM_Start_DMA+0x8c>)
 800415a:	62da      	str	r2, [r3, #44]	; 0x2c
	htim1.hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dma_full;
 800415c:	4b1c      	ldr	r3, [pc, #112]	; (80041d0 <PWM_Start_DMA+0x88>)
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	4a1d      	ldr	r2, [pc, #116]	; (80041d8 <PWM_Start_DMA+0x90>)
 8004162:	629a      	str	r2, [r3, #40]	; 0x28
	/* Set the DMA error callback */
	htim1.hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004164:	4b1a      	ldr	r3, [pc, #104]	; (80041d0 <PWM_Start_DMA+0x88>)
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	4a1c      	ldr	r2, [pc, #112]	; (80041dc <PWM_Start_DMA+0x94>)
 800416a:	631a      	str	r2, [r3, #48]	; 0x30
	/* Enable the DMA channel */
	HAL_DMA_Start_IT( htim1.hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim1.Instance->PSC, Length);
 800416c:	4b18      	ldr	r3, [pc, #96]	; (80041d0 <PWM_Start_DMA+0x88>)
 800416e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	4b17      	ldr	r3, [pc, #92]	; (80041d0 <PWM_Start_DMA+0x88>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	3328      	adds	r3, #40	; 0x28
 8004178:	461a      	mov	r2, r3
 800417a:	887b      	ldrh	r3, [r7, #2]
 800417c:	f7fc f9e6 	bl	800054c <HAL_DMA_Start_IT>

	/* Enable the TIM Capture/Compare 1 DMA request */
	htim1.Instance->DIER |= TIM_DMA_CC1;
 8004180:	4b13      	ldr	r3, [pc, #76]	; (80041d0 <PWM_Start_DMA+0x88>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68da      	ldr	r2, [r3, #12]
 8004186:	4b12      	ldr	r3, [pc, #72]	; (80041d0 <PWM_Start_DMA+0x88>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800418e:	60da      	str	r2, [r3, #12]
	/* Enable the Capture compare channel */
	TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004190:	4b0f      	ldr	r3, [pc, #60]	; (80041d0 <PWM_Start_DMA+0x88>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2201      	movs	r2, #1
 8004196:	2100      	movs	r1, #0
 8004198:	4618      	mov	r0, r3
 800419a:	f7fe fdde 	bl	8002d5a <TIM_CCxChannelCmd>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); //starts PWM on CH1N pin
 800419e:	2100      	movs	r1, #0
 80041a0:	480b      	ldr	r0, [pc, #44]	; (80041d0 <PWM_Start_DMA+0x88>)
 80041a2:	f7fe fdfd 	bl	8002da0 <HAL_TIMEx_PWMN_Start>

	htim1.Instance->BDTR|=TIM_BDTR_MOE;
 80041a6:	4b0a      	ldr	r3, [pc, #40]	; (80041d0 <PWM_Start_DMA+0x88>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041ac:	4b08      	ldr	r3, [pc, #32]	; (80041d0 <PWM_Start_DMA+0x88>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041b4:	645a      	str	r2, [r3, #68]	; 0x44
	//htim1.Instance->CR1|=TIM_CR1_CEN;

	/* Enable the Peripheral */
	htim1.Instance->CR1|=TIM_CR1_CEN;
 80041b6:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <PWM_Start_DMA+0x88>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	4b04      	ldr	r3, [pc, #16]	; (80041d0 <PWM_Start_DMA+0x88>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f042 0201 	orr.w	r2, r2, #1
 80041c4:	601a      	str	r2, [r3, #0]
}
 80041c6:	bf00      	nop
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	200003d4 	.word	0x200003d4
 80041d4:	080041e1 	.word	0x080041e1
 80041d8:	080041f5 	.word	0x080041f5
 80041dc:	080026ef 	.word	0x080026ef

080041e0 <dma_half>:
  return HAL_OK;
}
extern void write_shadow(uint16_t *dest);

void dma_half(DMA_HandleTypeDef *hdma)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
	//HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);    //starts PWM on CH1 pin
	//write_shadow((uint16_t *)&DCC_Packet[0]);

}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <dma_full>:

void dma_full(DMA_HandleTypeDef *hdma)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
	dmatim1_flag=1;
 80041fc:	4b04      	ldr	r3, [pc, #16]	; (8004210 <dma_full+0x1c>)
 80041fe:	2201      	movs	r2, #1
 8004200:	801a      	strh	r2, [r3, #0]
	//HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);    //starts PWM on CH1 pin
	//write_shadow((uint16_t *)&DCC_Packet[1]);

}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	200001fc 	.word	0x200001fc

08004214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
int	status=0;
 800421a:	2300      	movs	r3, #0
 800421c:	607b      	str	r3, [r7, #4]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800421e:	f7fb ffdb 	bl	80001d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004222:	f000 f88d 	bl	8004340 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004226:	f000 fadf 	bl	80047e8 <MX_GPIO_Init>
  MX_DMA_Init();
 800422a:	f000 fab7 	bl	800479c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800422e:	f000 fa85 	bl	800473c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8004232:	f000 f8df 	bl	80043f4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8004236:	f000 fa09 	bl	800464c <MX_TIM3_Init>
  MX_TIM2_Init();
 800423a:	f000 f987 	bl	800454c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  init_bufs();
 800423e:	f000 fb25 	bl	800488c <init_bufs>
  uart_start();
 8004242:	f000 fe37 	bl	8004eb4 <uart_start>

  HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_2);
 8004246:	2104      	movs	r1, #4
 8004248:	4835      	ldr	r0, [pc, #212]	; (8004320 <main+0x10c>)
 800424a:	f7fd ff45 	bl	80020d8 <HAL_TIM_PWM_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if ( tim3_flag == 1 )
 800424e:	4b35      	ldr	r3, [pc, #212]	; (8004324 <main+0x110>)
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d140      	bne.n	80042d8 <main+0xc4>
	  {
		  switch ( status )
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b03      	cmp	r3, #3
 800425a:	d83a      	bhi.n	80042d2 <main+0xbe>
 800425c:	a201      	add	r2, pc, #4	; (adr r2, 8004264 <main+0x50>)
 800425e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004262:	bf00      	nop
 8004264:	08004275 	.word	0x08004275
 8004268:	0800428d 	.word	0x0800428d
 800426c:	080042a5 	.word	0x080042a5
 8004270:	080042bd 	.word	0x080042bd
		  {
	  	  case	0 :	PWM_Start_DMA( (uint32_t *)packets.len3_packet , packets.len3_packet_len);
 8004274:	4b2c      	ldr	r3, [pc, #176]	; (8004328 <main+0x114>)
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	4b2b      	ldr	r3, [pc, #172]	; (8004328 <main+0x114>)
 800427a:	885b      	ldrh	r3, [r3, #2]
 800427c:	4619      	mov	r1, r3
 800427e:	4610      	mov	r0, r2
 8004280:	f7ff ff62 	bl	8004148 <PWM_Start_DMA>
	  	  	  	    status++;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	3301      	adds	r3, #1
 8004288:	607b      	str	r3, [r7, #4]
	  	  	  	  	break;
 800428a:	e022      	b.n	80042d2 <main+0xbe>
	  	  case	1 :	PWM_Start_DMA( (uint32_t *)packets.len4_packet , packets.len4_packet_len);
 800428c:	4b26      	ldr	r3, [pc, #152]	; (8004328 <main+0x114>)
 800428e:	68da      	ldr	r2, [r3, #12]
 8004290:	4b25      	ldr	r3, [pc, #148]	; (8004328 <main+0x114>)
 8004292:	891b      	ldrh	r3, [r3, #8]
 8004294:	4619      	mov	r1, r3
 8004296:	4610      	mov	r0, r2
 8004298:	f7ff ff56 	bl	8004148 <PWM_Start_DMA>
	  	  	  	  	status++;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3301      	adds	r3, #1
 80042a0:	607b      	str	r3, [r7, #4]
	  	  	  	  	break;
 80042a2:	e016      	b.n	80042d2 <main+0xbe>
	  	  case	2 :	PWM_Start_DMA( (uint32_t *)packets.len5_packet , packets.len5_packet_len);
 80042a4:	4b20      	ldr	r3, [pc, #128]	; (8004328 <main+0x114>)
 80042a6:	695a      	ldr	r2, [r3, #20]
 80042a8:	4b1f      	ldr	r3, [pc, #124]	; (8004328 <main+0x114>)
 80042aa:	8a1b      	ldrh	r3, [r3, #16]
 80042ac:	4619      	mov	r1, r3
 80042ae:	4610      	mov	r0, r2
 80042b0:	f7ff ff4a 	bl	8004148 <PWM_Start_DMA>
	  	  	  	  	status++;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3301      	adds	r3, #1
 80042b8:	607b      	str	r3, [r7, #4]
	  	  	  	  	break;
 80042ba:	e00a      	b.n	80042d2 <main+0xbe>
	  	  case	3 :	PWM_Start_DMA( (uint32_t *)packets.len6_packet , packets.len6_packet_len);
 80042bc:	4b1a      	ldr	r3, [pc, #104]	; (8004328 <main+0x114>)
 80042be:	69da      	ldr	r2, [r3, #28]
 80042c0:	4b19      	ldr	r3, [pc, #100]	; (8004328 <main+0x114>)
 80042c2:	8b1b      	ldrh	r3, [r3, #24]
 80042c4:	4619      	mov	r1, r3
 80042c6:	4610      	mov	r0, r2
 80042c8:	f7ff ff3e 	bl	8004148 <PWM_Start_DMA>
  	  	    		status=0;
 80042cc:	2300      	movs	r3, #0
 80042ce:	607b      	str	r3, [r7, #4]
	  	  	  	  	break;
 80042d0:	bf00      	nop
		  }
		  tim3_flag = 0;
 80042d2:	4b14      	ldr	r3, [pc, #80]	; (8004324 <main+0x110>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	801a      	strh	r2, [r3, #0]
	  }
	  if ( dmatim1_flag == 1)
 80042d8:	4b14      	ldr	r3, [pc, #80]	; (800432c <main+0x118>)
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d10f      	bne.n	8004300 <main+0xec>
	  {
		  HAL_TIM_PWM_Start_IT(&htim2,TIM_CHANNEL_2);
 80042e0:	2104      	movs	r1, #4
 80042e2:	4813      	ldr	r0, [pc, #76]	; (8004330 <main+0x11c>)
 80042e4:	f7fd fef8 	bl	80020d8 <HAL_TIM_PWM_Start_IT>
		  dmatim1_flag = 0;
 80042e8:	4b10      	ldr	r3, [pc, #64]	; (800432c <main+0x118>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	801a      	strh	r2, [r3, #0]
		  if ( uart2_rx_buffer_ready == 1)
 80042ee:	4b11      	ldr	r3, [pc, #68]	; (8004334 <main+0x120>)
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d104      	bne.n	8004300 <main+0xec>
		  {
			  compile_shadow();
 80042f6:	f000 fe8d 	bl	8005014 <compile_shadow>
			  uart2_rx_buffer_ready = 0;
 80042fa:	4b0e      	ldr	r3, [pc, #56]	; (8004334 <main+0x120>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  if ( tim2_flag == 1)
 8004300:	4b0d      	ldr	r3, [pc, #52]	; (8004338 <main+0x124>)
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d1a2      	bne.n	800424e <main+0x3a>
	  {
		  htim1.Instance->CR1&=~TIM_CR1_CEN;
 8004308:	4b0c      	ldr	r3, [pc, #48]	; (800433c <main+0x128>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	4b0b      	ldr	r3, [pc, #44]	; (800433c <main+0x128>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0201 	bic.w	r2, r2, #1
 8004316:	601a      	str	r2, [r3, #0]
		  tim2_flag = 0;
 8004318:	4b07      	ldr	r3, [pc, #28]	; (8004338 <main+0x124>)
 800431a:	2200      	movs	r2, #0
 800431c:	801a      	strh	r2, [r3, #0]
	  if ( tim3_flag == 1 )
 800431e:	e796      	b.n	800424e <main+0x3a>
 8004320:	200002bc 	.word	0x200002bc
 8004324:	200001f8 	.word	0x200001f8
 8004328:	20000414 	.word	0x20000414
 800432c:	200001fc 	.word	0x200001fc
 8004330:	2000048c 	.word	0x2000048c
 8004334:	200002fc 	.word	0x200002fc
 8004338:	200001fa 	.word	0x200001fa
 800433c:	200003d4 	.word	0x200003d4

08004340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b096      	sub	sp, #88	; 0x58
 8004344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004346:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800434a:	2228      	movs	r2, #40	; 0x28
 800434c:	2100      	movs	r1, #0
 800434e:	4618      	mov	r0, r3
 8004350:	f000 ff6d 	bl	800522e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004354:	f107 031c 	add.w	r3, r7, #28
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	605a      	str	r2, [r3, #4]
 800435e:	609a      	str	r2, [r3, #8]
 8004360:	60da      	str	r2, [r3, #12]
 8004362:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004364:	1d3b      	adds	r3, r7, #4
 8004366:	2200      	movs	r2, #0
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	605a      	str	r2, [r3, #4]
 800436c:	609a      	str	r2, [r3, #8]
 800436e:	60da      	str	r2, [r3, #12]
 8004370:	611a      	str	r2, [r3, #16]
 8004372:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004374:	2302      	movs	r3, #2
 8004376:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004378:	2301      	movs	r3, #1
 800437a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800437c:	2310      	movs	r3, #16
 800437e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004380:	2302      	movs	r3, #2
 8004382:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004384:	2300      	movs	r3, #0
 8004386:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8004388:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800438c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800438e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004392:	4618      	mov	r0, r3
 8004394:	f7fc fbf6 	bl	8000b84 <HAL_RCC_OscConfig>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800439e:	f000 fa6d 	bl	800487c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80043a2:	230f      	movs	r3, #15
 80043a4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80043a6:	2302      	movs	r3, #2
 80043a8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80043aa:	2300      	movs	r3, #0
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80043ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80043b4:	2300      	movs	r3, #0
 80043b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80043b8:	f107 031c 	add.w	r3, r7, #28
 80043bc:	2102      	movs	r1, #2
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fd face 	bl	8001960 <HAL_RCC_ClockConfig>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80043ca:	f000 fa57 	bl	800487c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80043ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043d2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80043d4:	2300      	movs	r3, #0
 80043d6:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80043d8:	1d3b      	adds	r3, r7, #4
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fd fcf6 	bl	8001dcc <HAL_RCCEx_PeriphCLKConfig>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80043e6:	f000 fa49 	bl	800487c <Error_Handler>
  }
}
 80043ea:	bf00      	nop
 80043ec:	3758      	adds	r7, #88	; 0x58
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
	...

080043f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b09a      	sub	sp, #104	; 0x68
 80043f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	605a      	str	r2, [r3, #4]
 8004404:	609a      	str	r2, [r3, #8]
 8004406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004408:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	605a      	str	r2, [r3, #4]
 8004412:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004414:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	605a      	str	r2, [r3, #4]
 800441e:	609a      	str	r2, [r3, #8]
 8004420:	60da      	str	r2, [r3, #12]
 8004422:	611a      	str	r2, [r3, #16]
 8004424:	615a      	str	r2, [r3, #20]
 8004426:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004428:	1d3b      	adds	r3, r7, #4
 800442a:	222c      	movs	r2, #44	; 0x2c
 800442c:	2100      	movs	r1, #0
 800442e:	4618      	mov	r0, r3
 8004430:	f000 fefd 	bl	800522e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004434:	4b43      	ldr	r3, [pc, #268]	; (8004544 <MX_TIM1_Init+0x150>)
 8004436:	4a44      	ldr	r2, [pc, #272]	; (8004548 <MX_TIM1_Init+0x154>)
 8004438:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 62;
 800443a:	4b42      	ldr	r3, [pc, #264]	; (8004544 <MX_TIM1_Init+0x150>)
 800443c:	223e      	movs	r2, #62	; 0x3e
 800443e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004440:	4b40      	ldr	r3, [pc, #256]	; (8004544 <MX_TIM1_Init+0x150>)
 8004442:	2200      	movs	r2, #0
 8004444:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 112;
 8004446:	4b3f      	ldr	r3, [pc, #252]	; (8004544 <MX_TIM1_Init+0x150>)
 8004448:	2270      	movs	r2, #112	; 0x70
 800444a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800444c:	4b3d      	ldr	r3, [pc, #244]	; (8004544 <MX_TIM1_Init+0x150>)
 800444e:	2200      	movs	r2, #0
 8004450:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004452:	4b3c      	ldr	r3, [pc, #240]	; (8004544 <MX_TIM1_Init+0x150>)
 8004454:	2200      	movs	r2, #0
 8004456:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004458:	4b3a      	ldr	r3, [pc, #232]	; (8004544 <MX_TIM1_Init+0x150>)
 800445a:	2200      	movs	r2, #0
 800445c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800445e:	4839      	ldr	r0, [pc, #228]	; (8004544 <MX_TIM1_Init+0x150>)
 8004460:	f7fd fdda 	bl	8002018 <HAL_TIM_Base_Init>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800446a:	f000 fa07 	bl	800487c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800446e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004472:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004474:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004478:	4619      	mov	r1, r3
 800447a:	4832      	ldr	r0, [pc, #200]	; (8004544 <MX_TIM1_Init+0x150>)
 800447c:	f7fe f819 	bl	80024b2 <HAL_TIM_ConfigClockSource>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004486:	f000 f9f9 	bl	800487c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800448a:	482e      	ldr	r0, [pc, #184]	; (8004544 <MX_TIM1_Init+0x150>)
 800448c:	f7fd fdef 	bl	800206e <HAL_TIM_PWM_Init>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004496:	f000 f9f1 	bl	800487c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800449a:	2300      	movs	r3, #0
 800449c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800449e:	2300      	movs	r3, #0
 80044a0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044a2:	2300      	movs	r3, #0
 80044a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80044a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80044aa:	4619      	mov	r1, r3
 80044ac:	4825      	ldr	r0, [pc, #148]	; (8004544 <MX_TIM1_Init+0x150>)
 80044ae:	f7fe fdb1 	bl	8003014 <HAL_TIMEx_MasterConfigSynchronization>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80044b8:	f000 f9e0 	bl	800487c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044bc:	2360      	movs	r3, #96	; 0x60
 80044be:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 56;
 80044c0:	2338      	movs	r3, #56	; 0x38
 80044c2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044c4:	2300      	movs	r3, #0
 80044c6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80044c8:	2300      	movs	r3, #0
 80044ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044cc:	2300      	movs	r3, #0
 80044ce:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80044d0:	2300      	movs	r3, #0
 80044d2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80044d4:	2300      	movs	r3, #0
 80044d6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80044dc:	2200      	movs	r2, #0
 80044de:	4619      	mov	r1, r3
 80044e0:	4818      	ldr	r0, [pc, #96]	; (8004544 <MX_TIM1_Init+0x150>)
 80044e2:	f7fe fc7f 	bl	8002de4 <HAL_TIM_PWM_ConfigChannel>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80044ec:	f000 f9c6 	bl	800487c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80044f0:	2300      	movs	r3, #0
 80044f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80044f4:	2300      	movs	r3, #0
 80044f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80044f8:	2300      	movs	r3, #0
 80044fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80044fc:	2300      	movs	r3, #0
 80044fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004500:	2300      	movs	r3, #0
 8004502:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004504:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004508:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800450a:	2300      	movs	r3, #0
 800450c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800450e:	2300      	movs	r3, #0
 8004510:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004512:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004516:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004518:	2300      	movs	r3, #0
 800451a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800451c:	2300      	movs	r3, #0
 800451e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004520:	1d3b      	adds	r3, r7, #4
 8004522:	4619      	mov	r1, r3
 8004524:	4807      	ldr	r0, [pc, #28]	; (8004544 <MX_TIM1_Init+0x150>)
 8004526:	f7fe fdc3 	bl	80030b0 <HAL_TIMEx_ConfigBreakDeadTime>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8004530:	f000 f9a4 	bl	800487c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004534:	4803      	ldr	r0, [pc, #12]	; (8004544 <MX_TIM1_Init+0x150>)
 8004536:	f000 fafb 	bl	8004b30 <HAL_TIM_MspPostInit>

}
 800453a:	bf00      	nop
 800453c:	3768      	adds	r7, #104	; 0x68
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	200003d4 	.word	0x200003d4
 8004548:	40012c00 	.word	0x40012c00

0800454c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b08e      	sub	sp, #56	; 0x38
 8004550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004552:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	605a      	str	r2, [r3, #4]
 800455c:	609a      	str	r2, [r3, #8]
 800455e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004560:	f107 031c 	add.w	r3, r7, #28
 8004564:	2200      	movs	r2, #0
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	605a      	str	r2, [r3, #4]
 800456a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800456c:	463b      	mov	r3, r7
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]
 8004572:	605a      	str	r2, [r3, #4]
 8004574:	609a      	str	r2, [r3, #8]
 8004576:	60da      	str	r2, [r3, #12]
 8004578:	611a      	str	r2, [r3, #16]
 800457a:	615a      	str	r2, [r3, #20]
 800457c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800457e:	4b32      	ldr	r3, [pc, #200]	; (8004648 <MX_TIM2_Init+0xfc>)
 8004580:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004584:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 8004586:	4b30      	ldr	r3, [pc, #192]	; (8004648 <MX_TIM2_Init+0xfc>)
 8004588:	2240      	movs	r2, #64	; 0x40
 800458a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800458c:	4b2e      	ldr	r3, [pc, #184]	; (8004648 <MX_TIM2_Init+0xfc>)
 800458e:	2200      	movs	r2, #0
 8004590:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 488;
 8004592:	4b2d      	ldr	r3, [pc, #180]	; (8004648 <MX_TIM2_Init+0xfc>)
 8004594:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8004598:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800459a:	4b2b      	ldr	r3, [pc, #172]	; (8004648 <MX_TIM2_Init+0xfc>)
 800459c:	2200      	movs	r2, #0
 800459e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045a0:	4b29      	ldr	r3, [pc, #164]	; (8004648 <MX_TIM2_Init+0xfc>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80045a6:	4828      	ldr	r0, [pc, #160]	; (8004648 <MX_TIM2_Init+0xfc>)
 80045a8:	f7fd fd36 	bl	8002018 <HAL_TIM_Base_Init>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80045b2:	f000 f963 	bl	800487c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045ba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80045bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045c0:	4619      	mov	r1, r3
 80045c2:	4821      	ldr	r0, [pc, #132]	; (8004648 <MX_TIM2_Init+0xfc>)
 80045c4:	f7fd ff75 	bl	80024b2 <HAL_TIM_ConfigClockSource>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80045ce:	f000 f955 	bl	800487c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80045d2:	481d      	ldr	r0, [pc, #116]	; (8004648 <MX_TIM2_Init+0xfc>)
 80045d4:	f7fd fd4b 	bl	800206e <HAL_TIM_PWM_Init>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80045de:	f000 f94d 	bl	800487c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80045e2:	2108      	movs	r1, #8
 80045e4:	4818      	ldr	r0, [pc, #96]	; (8004648 <MX_TIM2_Init+0xfc>)
 80045e6:	f7fd fdff 	bl	80021e8 <HAL_TIM_OnePulse_Init>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80045f0:	f000 f944 	bl	800487c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045f4:	2300      	movs	r3, #0
 80045f6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045f8:	2300      	movs	r3, #0
 80045fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80045fc:	f107 031c 	add.w	r3, r7, #28
 8004600:	4619      	mov	r1, r3
 8004602:	4811      	ldr	r0, [pc, #68]	; (8004648 <MX_TIM2_Init+0xfc>)
 8004604:	f7fe fd06 	bl	8003014 <HAL_TIMEx_MasterConfigSynchronization>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 800460e:	f000 f935 	bl	800487c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004612:	2360      	movs	r3, #96	; 0x60
 8004614:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 75;
 8004616:	234b      	movs	r3, #75	; 0x4b
 8004618:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800461a:	2300      	movs	r3, #0
 800461c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800461e:	2300      	movs	r3, #0
 8004620:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004622:	463b      	mov	r3, r7
 8004624:	2204      	movs	r2, #4
 8004626:	4619      	mov	r1, r3
 8004628:	4807      	ldr	r0, [pc, #28]	; (8004648 <MX_TIM2_Init+0xfc>)
 800462a:	f7fe fbdb 	bl	8002de4 <HAL_TIM_PWM_ConfigChannel>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8004634:	f000 f922 	bl	800487c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004638:	4803      	ldr	r0, [pc, #12]	; (8004648 <MX_TIM2_Init+0xfc>)
 800463a:	f000 fa79 	bl	8004b30 <HAL_TIM_MspPostInit>

}
 800463e:	bf00      	nop
 8004640:	3738      	adds	r7, #56	; 0x38
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	2000048c 	.word	0x2000048c

0800464c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b08e      	sub	sp, #56	; 0x38
 8004650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004652:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004656:	2200      	movs	r2, #0
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	605a      	str	r2, [r3, #4]
 800465c:	609a      	str	r2, [r3, #8]
 800465e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004660:	f107 031c 	add.w	r3, r7, #28
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	605a      	str	r2, [r3, #4]
 800466a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800466c:	463b      	mov	r3, r7
 800466e:	2200      	movs	r2, #0
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	605a      	str	r2, [r3, #4]
 8004674:	609a      	str	r2, [r3, #8]
 8004676:	60da      	str	r2, [r3, #12]
 8004678:	611a      	str	r2, [r3, #16]
 800467a:	615a      	str	r2, [r3, #20]
 800467c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800467e:	4b2d      	ldr	r3, [pc, #180]	; (8004734 <MX_TIM3_Init+0xe8>)
 8004680:	4a2d      	ldr	r2, [pc, #180]	; (8004738 <MX_TIM3_Init+0xec>)
 8004682:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 8004684:	4b2b      	ldr	r3, [pc, #172]	; (8004734 <MX_TIM3_Init+0xe8>)
 8004686:	2240      	movs	r2, #64	; 0x40
 8004688:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800468a:	4b2a      	ldr	r3, [pc, #168]	; (8004734 <MX_TIM3_Init+0xe8>)
 800468c:	2200      	movs	r2, #0
 800468e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 14500;
 8004690:	4b28      	ldr	r3, [pc, #160]	; (8004734 <MX_TIM3_Init+0xe8>)
 8004692:	f643 02a4 	movw	r2, #14500	; 0x38a4
 8004696:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004698:	4b26      	ldr	r3, [pc, #152]	; (8004734 <MX_TIM3_Init+0xe8>)
 800469a:	2200      	movs	r2, #0
 800469c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800469e:	4b25      	ldr	r3, [pc, #148]	; (8004734 <MX_TIM3_Init+0xe8>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80046a4:	4823      	ldr	r0, [pc, #140]	; (8004734 <MX_TIM3_Init+0xe8>)
 80046a6:	f7fd fcb7 	bl	8002018 <HAL_TIM_Base_Init>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80046b0:	f000 f8e4 	bl	800487c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80046ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046be:	4619      	mov	r1, r3
 80046c0:	481c      	ldr	r0, [pc, #112]	; (8004734 <MX_TIM3_Init+0xe8>)
 80046c2:	f7fd fef6 	bl	80024b2 <HAL_TIM_ConfigClockSource>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80046cc:	f000 f8d6 	bl	800487c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80046d0:	4818      	ldr	r0, [pc, #96]	; (8004734 <MX_TIM3_Init+0xe8>)
 80046d2:	f7fd fccc 	bl	800206e <HAL_TIM_PWM_Init>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80046dc:	f000 f8ce 	bl	800487c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 80046e0:	2330      	movs	r3, #48	; 0x30
 80046e2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046e4:	2300      	movs	r3, #0
 80046e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80046e8:	f107 031c 	add.w	r3, r7, #28
 80046ec:	4619      	mov	r1, r3
 80046ee:	4811      	ldr	r0, [pc, #68]	; (8004734 <MX_TIM3_Init+0xe8>)
 80046f0:	f7fe fc90 	bl	8003014 <HAL_TIMEx_MasterConfigSynchronization>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80046fa:	f000 f8bf 	bl	800487c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046fe:	2360      	movs	r3, #96	; 0x60
 8004700:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000;
 8004702:	f241 3388 	movw	r3, #5000	; 0x1388
 8004706:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8004708:	2302      	movs	r3, #2
 800470a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800470c:	2300      	movs	r3, #0
 800470e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004710:	463b      	mov	r3, r7
 8004712:	2204      	movs	r2, #4
 8004714:	4619      	mov	r1, r3
 8004716:	4807      	ldr	r0, [pc, #28]	; (8004734 <MX_TIM3_Init+0xe8>)
 8004718:	f7fe fb64 	bl	8002de4 <HAL_TIM_PWM_ConfigChannel>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8004722:	f000 f8ab 	bl	800487c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004726:	4803      	ldr	r0, [pc, #12]	; (8004734 <MX_TIM3_Init+0xe8>)
 8004728:	f000 fa02 	bl	8004b30 <HAL_TIM_MspPostInit>

}
 800472c:	bf00      	nop
 800472e:	3738      	adds	r7, #56	; 0x38
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	200002bc 	.word	0x200002bc
 8004738:	40000400 	.word	0x40000400

0800473c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004740:	4b14      	ldr	r3, [pc, #80]	; (8004794 <MX_USART2_UART_Init+0x58>)
 8004742:	4a15      	ldr	r2, [pc, #84]	; (8004798 <MX_USART2_UART_Init+0x5c>)
 8004744:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004746:	4b13      	ldr	r3, [pc, #76]	; (8004794 <MX_USART2_UART_Init+0x58>)
 8004748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800474c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800474e:	4b11      	ldr	r3, [pc, #68]	; (8004794 <MX_USART2_UART_Init+0x58>)
 8004750:	2200      	movs	r2, #0
 8004752:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004754:	4b0f      	ldr	r3, [pc, #60]	; (8004794 <MX_USART2_UART_Init+0x58>)
 8004756:	2200      	movs	r2, #0
 8004758:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800475a:	4b0e      	ldr	r3, [pc, #56]	; (8004794 <MX_USART2_UART_Init+0x58>)
 800475c:	2200      	movs	r2, #0
 800475e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004760:	4b0c      	ldr	r3, [pc, #48]	; (8004794 <MX_USART2_UART_Init+0x58>)
 8004762:	220c      	movs	r2, #12
 8004764:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004766:	4b0b      	ldr	r3, [pc, #44]	; (8004794 <MX_USART2_UART_Init+0x58>)
 8004768:	2200      	movs	r2, #0
 800476a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800476c:	4b09      	ldr	r3, [pc, #36]	; (8004794 <MX_USART2_UART_Init+0x58>)
 800476e:	2200      	movs	r2, #0
 8004770:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004772:	4b08      	ldr	r3, [pc, #32]	; (8004794 <MX_USART2_UART_Init+0x58>)
 8004774:	2200      	movs	r2, #0
 8004776:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004778:	4b06      	ldr	r3, [pc, #24]	; (8004794 <MX_USART2_UART_Init+0x58>)
 800477a:	2200      	movs	r2, #0
 800477c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800477e:	4805      	ldr	r0, [pc, #20]	; (8004794 <MX_USART2_UART_Init+0x58>)
 8004780:	f7fe fe20 	bl	80033c4 <HAL_UART_Init>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800478a:	f000 f877 	bl	800487c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800478e:	bf00      	nop
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	200004cc 	.word	0x200004cc
 8004798:	40004400 	.word	0x40004400

0800479c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80047a2:	4b10      	ldr	r3, [pc, #64]	; (80047e4 <MX_DMA_Init+0x48>)
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	4a0f      	ldr	r2, [pc, #60]	; (80047e4 <MX_DMA_Init+0x48>)
 80047a8:	f043 0301 	orr.w	r3, r3, #1
 80047ac:	6153      	str	r3, [r2, #20]
 80047ae:	4b0d      	ldr	r3, [pc, #52]	; (80047e4 <MX_DMA_Init+0x48>)
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	607b      	str	r3, [r7, #4]
 80047b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80047ba:	2200      	movs	r2, #0
 80047bc:	2100      	movs	r1, #0
 80047be:	200c      	movs	r0, #12
 80047c0:	f7fb fe47 	bl	8000452 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80047c4:	200c      	movs	r0, #12
 80047c6:	f7fb fe60 	bl	800048a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80047ca:	2200      	movs	r2, #0
 80047cc:	2100      	movs	r1, #0
 80047ce:	2011      	movs	r0, #17
 80047d0:	f7fb fe3f 	bl	8000452 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80047d4:	2011      	movs	r0, #17
 80047d6:	f7fb fe58 	bl	800048a <HAL_NVIC_EnableIRQ>

}
 80047da:	bf00      	nop
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	40021000 	.word	0x40021000

080047e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b088      	sub	sp, #32
 80047ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047ee:	f107 030c 	add.w	r3, r7, #12
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	605a      	str	r2, [r3, #4]
 80047f8:	609a      	str	r2, [r3, #8]
 80047fa:	60da      	str	r2, [r3, #12]
 80047fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80047fe:	4b1d      	ldr	r3, [pc, #116]	; (8004874 <MX_GPIO_Init+0x8c>)
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	4a1c      	ldr	r2, [pc, #112]	; (8004874 <MX_GPIO_Init+0x8c>)
 8004804:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004808:	6153      	str	r3, [r2, #20]
 800480a:	4b1a      	ldr	r3, [pc, #104]	; (8004874 <MX_GPIO_Init+0x8c>)
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004812:	60bb      	str	r3, [r7, #8]
 8004814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004816:	4b17      	ldr	r3, [pc, #92]	; (8004874 <MX_GPIO_Init+0x8c>)
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	4a16      	ldr	r2, [pc, #88]	; (8004874 <MX_GPIO_Init+0x8c>)
 800481c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004820:	6153      	str	r3, [r2, #20]
 8004822:	4b14      	ldr	r3, [pc, #80]	; (8004874 <MX_GPIO_Init+0x8c>)
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482a:	607b      	str	r3, [r7, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800482e:	4b11      	ldr	r3, [pc, #68]	; (8004874 <MX_GPIO_Init+0x8c>)
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	4a10      	ldr	r2, [pc, #64]	; (8004874 <MX_GPIO_Init+0x8c>)
 8004834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004838:	6153      	str	r3, [r2, #20]
 800483a:	4b0e      	ldr	r3, [pc, #56]	; (8004874 <MX_GPIO_Init+0x8c>)
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004842:	603b      	str	r3, [r7, #0]
 8004844:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8004846:	2200      	movs	r2, #0
 8004848:	2108      	movs	r1, #8
 800484a:	480b      	ldr	r0, [pc, #44]	; (8004878 <MX_GPIO_Init+0x90>)
 800484c:	f7fc f982 	bl	8000b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8004850:	2308      	movs	r3, #8
 8004852:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004854:	2301      	movs	r3, #1
 8004856:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004858:	2300      	movs	r3, #0
 800485a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800485c:	2300      	movs	r3, #0
 800485e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8004860:	f107 030c 	add.w	r3, r7, #12
 8004864:	4619      	mov	r1, r3
 8004866:	4804      	ldr	r0, [pc, #16]	; (8004878 <MX_GPIO_Init+0x90>)
 8004868:	f7fb fffe 	bl	8000868 <HAL_GPIO_Init>

}
 800486c:	bf00      	nop
 800486e:	3720      	adds	r7, #32
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	40021000 	.word	0x40021000
 8004878:	48000400 	.word	0x48000400

0800487c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800487c:	b480      	push	{r7}
 800487e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004880:	bf00      	nop
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
	...

0800488c <init_bufs>:

extern dcc_struct	 	packets;
extern uint16_t 	shadow_buf[sizeof(len6_dcc_pack)];

void init_bufs(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
uint16_t	*pkt;
uint16_t i;

	packets.len3_packet = &len3_packet;
 8004892:	4b4f      	ldr	r3, [pc, #316]	; (80049d0 <init_bufs+0x144>)
 8004894:	4a4f      	ldr	r2, [pc, #316]	; (80049d4 <init_bufs+0x148>)
 8004896:	605a      	str	r2, [r3, #4]
	packets.len4_packet = &len4_packet;
 8004898:	4b4d      	ldr	r3, [pc, #308]	; (80049d0 <init_bufs+0x144>)
 800489a:	4a4f      	ldr	r2, [pc, #316]	; (80049d8 <init_bufs+0x14c>)
 800489c:	60da      	str	r2, [r3, #12]
	packets.len5_packet = &len5_packet;
 800489e:	4b4c      	ldr	r3, [pc, #304]	; (80049d0 <init_bufs+0x144>)
 80048a0:	4a4e      	ldr	r2, [pc, #312]	; (80049dc <init_bufs+0x150>)
 80048a2:	615a      	str	r2, [r3, #20]
	packets.len6_packet = &len6_packet;
 80048a4:	4b4a      	ldr	r3, [pc, #296]	; (80049d0 <init_bufs+0x144>)
 80048a6:	4a4e      	ldr	r2, [pc, #312]	; (80049e0 <init_bufs+0x154>)
 80048a8:	61da      	str	r2, [r3, #28]
	packets.len3_packet_len = sizeof(len3_dcc_pack)/2;
 80048aa:	4b49      	ldr	r3, [pc, #292]	; (80049d0 <init_bufs+0x144>)
 80048ac:	222c      	movs	r2, #44	; 0x2c
 80048ae:	805a      	strh	r2, [r3, #2]
	packets.len4_packet_len = sizeof(len4_dcc_pack)/2;
 80048b0:	4b47      	ldr	r3, [pc, #284]	; (80049d0 <init_bufs+0x144>)
 80048b2:	2235      	movs	r2, #53	; 0x35
 80048b4:	811a      	strh	r2, [r3, #8]
	packets.len5_packet_len = sizeof(len5_dcc_pack)/2;
 80048b6:	4b46      	ldr	r3, [pc, #280]	; (80049d0 <init_bufs+0x144>)
 80048b8:	223e      	movs	r2, #62	; 0x3e
 80048ba:	821a      	strh	r2, [r3, #16]
	packets.len6_packet_len = sizeof(len6_dcc_pack)/2;
 80048bc:	4b44      	ldr	r3, [pc, #272]	; (80049d0 <init_bufs+0x144>)
 80048be:	2247      	movs	r2, #71	; 0x47
 80048c0:	831a      	strh	r2, [r3, #24]
	packets.packet_type = PACKET_TYPE_1;
 80048c2:	4b43      	ldr	r3, [pc, #268]	; (80049d0 <init_bufs+0x144>)
 80048c4:	2203      	movs	r2, #3
 80048c6:	801a      	strh	r2, [r3, #0]
	pkt=(uint16_t	*)&len3_packet.preamble[0];
 80048c8:	4b42      	ldr	r3, [pc, #264]	; (80049d4 <init_bufs+0x148>)
 80048ca:	603b      	str	r3, [r7, #0]
	for(i=0;i<packets.len3_packet_len;i++)
 80048cc:	2300      	movs	r3, #0
 80048ce:	80fb      	strh	r3, [r7, #6]
 80048d0:	e008      	b.n	80048e4 <init_bufs+0x58>
		pkt[i] = BIT_0;
 80048d2:	88fb      	ldrh	r3, [r7, #6]
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	4413      	add	r3, r2
 80048da:	227c      	movs	r2, #124	; 0x7c
 80048dc:	801a      	strh	r2, [r3, #0]
	for(i=0;i<packets.len3_packet_len;i++)
 80048de:	88fb      	ldrh	r3, [r7, #6]
 80048e0:	3301      	adds	r3, #1
 80048e2:	80fb      	strh	r3, [r7, #6]
 80048e4:	4b3a      	ldr	r3, [pc, #232]	; (80049d0 <init_bufs+0x144>)
 80048e6:	885b      	ldrh	r3, [r3, #2]
 80048e8:	88fa      	ldrh	r2, [r7, #6]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d3f1      	bcc.n	80048d2 <init_bufs+0x46>
	pkt=(uint16_t	*)&len4_packet.preamble[0];
 80048ee:	4b3a      	ldr	r3, [pc, #232]	; (80049d8 <init_bufs+0x14c>)
 80048f0:	603b      	str	r3, [r7, #0]
	for(i=0;i<packets.len4_packet_len;i++)
 80048f2:	2300      	movs	r3, #0
 80048f4:	80fb      	strh	r3, [r7, #6]
 80048f6:	e008      	b.n	800490a <init_bufs+0x7e>
		pkt[i] = BIT_0;
 80048f8:	88fb      	ldrh	r3, [r7, #6]
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	4413      	add	r3, r2
 8004900:	227c      	movs	r2, #124	; 0x7c
 8004902:	801a      	strh	r2, [r3, #0]
	for(i=0;i<packets.len4_packet_len;i++)
 8004904:	88fb      	ldrh	r3, [r7, #6]
 8004906:	3301      	adds	r3, #1
 8004908:	80fb      	strh	r3, [r7, #6]
 800490a:	4b31      	ldr	r3, [pc, #196]	; (80049d0 <init_bufs+0x144>)
 800490c:	891b      	ldrh	r3, [r3, #8]
 800490e:	88fa      	ldrh	r2, [r7, #6]
 8004910:	429a      	cmp	r2, r3
 8004912:	d3f1      	bcc.n	80048f8 <init_bufs+0x6c>
	pkt=(uint16_t	*)&len5_packet.preamble[0];
 8004914:	4b31      	ldr	r3, [pc, #196]	; (80049dc <init_bufs+0x150>)
 8004916:	603b      	str	r3, [r7, #0]
	for(i=0;i<packets.len5_packet_len;i++)
 8004918:	2300      	movs	r3, #0
 800491a:	80fb      	strh	r3, [r7, #6]
 800491c:	e008      	b.n	8004930 <init_bufs+0xa4>
		pkt[i] = BIT_0;
 800491e:	88fb      	ldrh	r3, [r7, #6]
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	4413      	add	r3, r2
 8004926:	227c      	movs	r2, #124	; 0x7c
 8004928:	801a      	strh	r2, [r3, #0]
	for(i=0;i<packets.len5_packet_len;i++)
 800492a:	88fb      	ldrh	r3, [r7, #6]
 800492c:	3301      	adds	r3, #1
 800492e:	80fb      	strh	r3, [r7, #6]
 8004930:	4b27      	ldr	r3, [pc, #156]	; (80049d0 <init_bufs+0x144>)
 8004932:	8a1b      	ldrh	r3, [r3, #16]
 8004934:	88fa      	ldrh	r2, [r7, #6]
 8004936:	429a      	cmp	r2, r3
 8004938:	d3f1      	bcc.n	800491e <init_bufs+0x92>
	pkt=(uint16_t	*)&len6_packet.preamble[0];
 800493a:	4b29      	ldr	r3, [pc, #164]	; (80049e0 <init_bufs+0x154>)
 800493c:	603b      	str	r3, [r7, #0]
	for(i=0;i<packets.len6_packet_len;i++)
 800493e:	2300      	movs	r3, #0
 8004940:	80fb      	strh	r3, [r7, #6]
 8004942:	e008      	b.n	8004956 <init_bufs+0xca>
		pkt[i] = BIT_0;
 8004944:	88fb      	ldrh	r3, [r7, #6]
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	4413      	add	r3, r2
 800494c:	227c      	movs	r2, #124	; 0x7c
 800494e:	801a      	strh	r2, [r3, #0]
	for(i=0;i<packets.len6_packet_len;i++)
 8004950:	88fb      	ldrh	r3, [r7, #6]
 8004952:	3301      	adds	r3, #1
 8004954:	80fb      	strh	r3, [r7, #6]
 8004956:	4b1e      	ldr	r3, [pc, #120]	; (80049d0 <init_bufs+0x144>)
 8004958:	8b1b      	ldrh	r3, [r3, #24]
 800495a:	88fa      	ldrh	r2, [r7, #6]
 800495c:	429a      	cmp	r2, r3
 800495e:	d3f1      	bcc.n	8004944 <init_bufs+0xb8>
	for(i=0;i<PREAMBLE_LEN;i++)
 8004960:	2300      	movs	r3, #0
 8004962:	80fb      	strh	r3, [r7, #6]
 8004964:	e016      	b.n	8004994 <init_bufs+0x108>
	{
		len3_packet.preamble[i] = BIT_1;
 8004966:	88fb      	ldrh	r3, [r7, #6]
 8004968:	4a1a      	ldr	r2, [pc, #104]	; (80049d4 <init_bufs+0x148>)
 800496a:	213e      	movs	r1, #62	; 0x3e
 800496c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		len4_packet.preamble[i] = BIT_1;
 8004970:	88fb      	ldrh	r3, [r7, #6]
 8004972:	4a19      	ldr	r2, [pc, #100]	; (80049d8 <init_bufs+0x14c>)
 8004974:	213e      	movs	r1, #62	; 0x3e
 8004976:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		len5_packet.preamble[i] = BIT_1;
 800497a:	88fb      	ldrh	r3, [r7, #6]
 800497c:	4a17      	ldr	r2, [pc, #92]	; (80049dc <init_bufs+0x150>)
 800497e:	213e      	movs	r1, #62	; 0x3e
 8004980:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		len6_packet.preamble[i] = BIT_1;
 8004984:	88fb      	ldrh	r3, [r7, #6]
 8004986:	4a16      	ldr	r2, [pc, #88]	; (80049e0 <init_bufs+0x154>)
 8004988:	213e      	movs	r1, #62	; 0x3e
 800498a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(i=0;i<PREAMBLE_LEN;i++)
 800498e:	88fb      	ldrh	r3, [r7, #6]
 8004990:	3301      	adds	r3, #1
 8004992:	80fb      	strh	r3, [r7, #6]
 8004994:	88fb      	ldrh	r3, [r7, #6]
 8004996:	2b0f      	cmp	r3, #15
 8004998:	d9e5      	bls.n	8004966 <init_bufs+0xda>
	}

	len3_packet.closer = BIT_1;
 800499a:	4b0e      	ldr	r3, [pc, #56]	; (80049d4 <init_bufs+0x148>)
 800499c:	223e      	movs	r2, #62	; 0x3e
 800499e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	len4_packet.closer = BIT_1;
 80049a2:	4b0d      	ldr	r3, [pc, #52]	; (80049d8 <init_bufs+0x14c>)
 80049a4:	223e      	movs	r2, #62	; 0x3e
 80049a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	len5_packet.closer = BIT_1;
 80049aa:	4b0c      	ldr	r3, [pc, #48]	; (80049dc <init_bufs+0x150>)
 80049ac:	223e      	movs	r2, #62	; 0x3e
 80049ae:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	len6_packet.closer = BIT_1;
 80049b2:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <init_bufs+0x154>)
 80049b4:	223e      	movs	r2, #62	; 0x3e
 80049b6:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	pkt=(uint16_t	*)&len6_packet.preamble[0];
 80049ba:	4b09      	ldr	r3, [pc, #36]	; (80049e0 <init_bufs+0x154>)
 80049bc:	603b      	str	r3, [r7, #0]

	memcpy(shadow_buf,pkt,sizeof(len6_dcc_pack));
 80049be:	228e      	movs	r2, #142	; 0x8e
 80049c0:	6839      	ldr	r1, [r7, #0]
 80049c2:	4808      	ldr	r0, [pc, #32]	; (80049e4 <init_bufs+0x158>)
 80049c4:	f000 fc28 	bl	8005218 <memcpy>
}
 80049c8:	bf00      	nop
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	20000414 	.word	0x20000414
 80049d4:	20000434 	.word	0x20000434
 80049d8:	20000250 	.word	0x20000250
 80049dc:	20000668 	.word	0x20000668
 80049e0:	20000344 	.word	0x20000344
 80049e4:	2000054c 	.word	0x2000054c

080049e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049ee:	4b0f      	ldr	r3, [pc, #60]	; (8004a2c <HAL_MspInit+0x44>)
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	4a0e      	ldr	r2, [pc, #56]	; (8004a2c <HAL_MspInit+0x44>)
 80049f4:	f043 0301 	orr.w	r3, r3, #1
 80049f8:	6193      	str	r3, [r2, #24]
 80049fa:	4b0c      	ldr	r3, [pc, #48]	; (8004a2c <HAL_MspInit+0x44>)
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	607b      	str	r3, [r7, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a06:	4b09      	ldr	r3, [pc, #36]	; (8004a2c <HAL_MspInit+0x44>)
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	4a08      	ldr	r2, [pc, #32]	; (8004a2c <HAL_MspInit+0x44>)
 8004a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a10:	61d3      	str	r3, [r2, #28]
 8004a12:	4b06      	ldr	r3, [pc, #24]	; (8004a2c <HAL_MspInit+0x44>)
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a1a:	603b      	str	r3, [r7, #0]
 8004a1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	40021000 	.word	0x40021000

08004a30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a37      	ldr	r2, [pc, #220]	; (8004b1c <HAL_TIM_Base_MspInit+0xec>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d134      	bne.n	8004aac <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004a42:	4b37      	ldr	r3, [pc, #220]	; (8004b20 <HAL_TIM_Base_MspInit+0xf0>)
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	4a36      	ldr	r2, [pc, #216]	; (8004b20 <HAL_TIM_Base_MspInit+0xf0>)
 8004a48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004a4c:	6193      	str	r3, [r2, #24]
 8004a4e:	4b34      	ldr	r3, [pc, #208]	; (8004b20 <HAL_TIM_Base_MspInit+0xf0>)
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a56:	617b      	str	r3, [r7, #20]
 8004a58:	697b      	ldr	r3, [r7, #20]
  
    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8004a5a:	4b32      	ldr	r3, [pc, #200]	; (8004b24 <HAL_TIM_Base_MspInit+0xf4>)
 8004a5c:	4a32      	ldr	r2, [pc, #200]	; (8004b28 <HAL_TIM_Base_MspInit+0xf8>)
 8004a5e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a60:	4b30      	ldr	r3, [pc, #192]	; (8004b24 <HAL_TIM_Base_MspInit+0xf4>)
 8004a62:	2210      	movs	r2, #16
 8004a64:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a66:	4b2f      	ldr	r3, [pc, #188]	; (8004b24 <HAL_TIM_Base_MspInit+0xf4>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004a6c:	4b2d      	ldr	r3, [pc, #180]	; (8004b24 <HAL_TIM_Base_MspInit+0xf4>)
 8004a6e:	2280      	movs	r2, #128	; 0x80
 8004a70:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004a72:	4b2c      	ldr	r3, [pc, #176]	; (8004b24 <HAL_TIM_Base_MspInit+0xf4>)
 8004a74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a78:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004a7a:	4b2a      	ldr	r3, [pc, #168]	; (8004b24 <HAL_TIM_Base_MspInit+0xf4>)
 8004a7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a80:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8004a82:	4b28      	ldr	r3, [pc, #160]	; (8004b24 <HAL_TIM_Base_MspInit+0xf4>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8004a88:	4b26      	ldr	r3, [pc, #152]	; (8004b24 <HAL_TIM_Base_MspInit+0xf4>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8004a8e:	4825      	ldr	r0, [pc, #148]	; (8004b24 <HAL_TIM_Base_MspInit+0xf4>)
 8004a90:	f7fb fd15 	bl	80004be <HAL_DMA_Init>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8004a9a:	f7ff feef 	bl	800487c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a20      	ldr	r2, [pc, #128]	; (8004b24 <HAL_TIM_Base_MspInit+0xf4>)
 8004aa2:	625a      	str	r2, [r3, #36]	; 0x24
 8004aa4:	4a1f      	ldr	r2, [pc, #124]	; (8004b24 <HAL_TIM_Base_MspInit+0xf4>)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004aaa:	e032      	b.n	8004b12 <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM2)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab4:	d114      	bne.n	8004ae0 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004ab6:	4b1a      	ldr	r3, [pc, #104]	; (8004b20 <HAL_TIM_Base_MspInit+0xf0>)
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	4a19      	ldr	r2, [pc, #100]	; (8004b20 <HAL_TIM_Base_MspInit+0xf0>)
 8004abc:	f043 0301 	orr.w	r3, r3, #1
 8004ac0:	61d3      	str	r3, [r2, #28]
 8004ac2:	4b17      	ldr	r3, [pc, #92]	; (8004b20 <HAL_TIM_Base_MspInit+0xf0>)
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	613b      	str	r3, [r7, #16]
 8004acc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004ace:	2200      	movs	r2, #0
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	201c      	movs	r0, #28
 8004ad4:	f7fb fcbd 	bl	8000452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004ad8:	201c      	movs	r0, #28
 8004ada:	f7fb fcd6 	bl	800048a <HAL_NVIC_EnableIRQ>
}
 8004ade:	e018      	b.n	8004b12 <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM3)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a11      	ldr	r2, [pc, #68]	; (8004b2c <HAL_TIM_Base_MspInit+0xfc>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d113      	bne.n	8004b12 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004aea:	4b0d      	ldr	r3, [pc, #52]	; (8004b20 <HAL_TIM_Base_MspInit+0xf0>)
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	4a0c      	ldr	r2, [pc, #48]	; (8004b20 <HAL_TIM_Base_MspInit+0xf0>)
 8004af0:	f043 0302 	orr.w	r3, r3, #2
 8004af4:	61d3      	str	r3, [r2, #28]
 8004af6:	4b0a      	ldr	r3, [pc, #40]	; (8004b20 <HAL_TIM_Base_MspInit+0xf0>)
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	60fb      	str	r3, [r7, #12]
 8004b00:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004b02:	2200      	movs	r2, #0
 8004b04:	2100      	movs	r1, #0
 8004b06:	201d      	movs	r0, #29
 8004b08:	f7fb fca3 	bl	8000452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004b0c:	201d      	movs	r0, #29
 8004b0e:	f7fb fcbc 	bl	800048a <HAL_NVIC_EnableIRQ>
}
 8004b12:	bf00      	nop
 8004b14:	3718      	adds	r7, #24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	40012c00 	.word	0x40012c00
 8004b20:	40021000 	.word	0x40021000
 8004b24:	2000020c 	.word	0x2000020c
 8004b28:	4002001c 	.word	0x4002001c
 8004b2c:	40000400 	.word	0x40000400

08004b30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08a      	sub	sp, #40	; 0x28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b38:	f107 0314 	add.w	r3, r7, #20
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	605a      	str	r2, [r3, #4]
 8004b42:	609a      	str	r2, [r3, #8]
 8004b44:	60da      	str	r2, [r3, #12]
 8004b46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a35      	ldr	r2, [pc, #212]	; (8004c24 <HAL_TIM_MspPostInit+0xf4>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d11e      	bne.n	8004b90 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b52:	4b35      	ldr	r3, [pc, #212]	; (8004c28 <HAL_TIM_MspPostInit+0xf8>)
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	4a34      	ldr	r2, [pc, #208]	; (8004c28 <HAL_TIM_MspPostInit+0xf8>)
 8004b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b5c:	6153      	str	r3, [r2, #20]
 8004b5e:	4b32      	ldr	r3, [pc, #200]	; (8004c28 <HAL_TIM_MspPostInit+0xf8>)
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b66:	613b      	str	r3, [r7, #16]
 8004b68:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA7     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004b6a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b70:	2302      	movs	r3, #2
 8004b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b74:	2300      	movs	r3, #0
 8004b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004b7c:	2306      	movs	r3, #6
 8004b7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b80:	f107 0314 	add.w	r3, r7, #20
 8004b84:	4619      	mov	r1, r3
 8004b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b8a:	f7fb fe6d 	bl	8000868 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004b8e:	e044      	b.n	8004c1a <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM2)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b98:	d11d      	bne.n	8004bd6 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b9a:	4b23      	ldr	r3, [pc, #140]	; (8004c28 <HAL_TIM_MspPostInit+0xf8>)
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	4a22      	ldr	r2, [pc, #136]	; (8004c28 <HAL_TIM_MspPostInit+0xf8>)
 8004ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ba4:	6153      	str	r3, [r2, #20]
 8004ba6:	4b20      	ldr	r3, [pc, #128]	; (8004c28 <HAL_TIM_MspPostInit+0xf8>)
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bc6:	f107 0314 	add.w	r3, r7, #20
 8004bca:	4619      	mov	r1, r3
 8004bcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004bd0:	f7fb fe4a 	bl	8000868 <HAL_GPIO_Init>
}
 8004bd4:	e021      	b.n	8004c1a <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM3)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a14      	ldr	r2, [pc, #80]	; (8004c2c <HAL_TIM_MspPostInit+0xfc>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d11c      	bne.n	8004c1a <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004be0:	4b11      	ldr	r3, [pc, #68]	; (8004c28 <HAL_TIM_MspPostInit+0xf8>)
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	4a10      	ldr	r2, [pc, #64]	; (8004c28 <HAL_TIM_MspPostInit+0xf8>)
 8004be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bea:	6153      	str	r3, [r2, #20]
 8004bec:	4b0e      	ldr	r3, [pc, #56]	; (8004c28 <HAL_TIM_MspPostInit+0xf8>)
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf4:	60bb      	str	r3, [r7, #8]
 8004bf6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004bf8:	2310      	movs	r3, #16
 8004bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c00:	2300      	movs	r3, #0
 8004c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c04:	2300      	movs	r3, #0
 8004c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004c08:	2302      	movs	r3, #2
 8004c0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c0c:	f107 0314 	add.w	r3, r7, #20
 8004c10:	4619      	mov	r1, r3
 8004c12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c16:	f7fb fe27 	bl	8000868 <HAL_GPIO_Init>
}
 8004c1a:	bf00      	nop
 8004c1c:	3728      	adds	r7, #40	; 0x28
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	40012c00 	.word	0x40012c00
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	40000400 	.word	0x40000400

08004c30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b08a      	sub	sp, #40	; 0x28
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c38:	f107 0314 	add.w	r3, r7, #20
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	605a      	str	r2, [r3, #4]
 8004c42:	609a      	str	r2, [r3, #8]
 8004c44:	60da      	str	r2, [r3, #12]
 8004c46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a2f      	ldr	r2, [pc, #188]	; (8004d0c <HAL_UART_MspInit+0xdc>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d157      	bne.n	8004d02 <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004c52:	4b2f      	ldr	r3, [pc, #188]	; (8004d10 <HAL_UART_MspInit+0xe0>)
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	4a2e      	ldr	r2, [pc, #184]	; (8004d10 <HAL_UART_MspInit+0xe0>)
 8004c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c5c:	61d3      	str	r3, [r2, #28]
 8004c5e:	4b2c      	ldr	r3, [pc, #176]	; (8004d10 <HAL_UART_MspInit+0xe0>)
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c66:	613b      	str	r3, [r7, #16]
 8004c68:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c6a:	4b29      	ldr	r3, [pc, #164]	; (8004d10 <HAL_UART_MspInit+0xe0>)
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	4a28      	ldr	r2, [pc, #160]	; (8004d10 <HAL_UART_MspInit+0xe0>)
 8004c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c74:	6153      	str	r3, [r2, #20]
 8004c76:	4b26      	ldr	r3, [pc, #152]	; (8004d10 <HAL_UART_MspInit+0xe0>)
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8004c82:	f248 0304 	movw	r3, #32772	; 0x8004
 8004c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c88:	2302      	movs	r3, #2
 8004c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c90:	2303      	movs	r3, #3
 8004c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004c94:	2307      	movs	r3, #7
 8004c96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c98:	f107 0314 	add.w	r3, r7, #20
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ca2:	f7fb fde1 	bl	8000868 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8004ca6:	4b1b      	ldr	r3, [pc, #108]	; (8004d14 <HAL_UART_MspInit+0xe4>)
 8004ca8:	4a1b      	ldr	r2, [pc, #108]	; (8004d18 <HAL_UART_MspInit+0xe8>)
 8004caa:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004cac:	4b19      	ldr	r3, [pc, #100]	; (8004d14 <HAL_UART_MspInit+0xe4>)
 8004cae:	2210      	movs	r2, #16
 8004cb0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cb2:	4b18      	ldr	r3, [pc, #96]	; (8004d14 <HAL_UART_MspInit+0xe4>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004cb8:	4b16      	ldr	r3, [pc, #88]	; (8004d14 <HAL_UART_MspInit+0xe4>)
 8004cba:	2280      	movs	r2, #128	; 0x80
 8004cbc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cbe:	4b15      	ldr	r3, [pc, #84]	; (8004d14 <HAL_UART_MspInit+0xe4>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cc4:	4b13      	ldr	r3, [pc, #76]	; (8004d14 <HAL_UART_MspInit+0xe4>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004cca:	4b12      	ldr	r3, [pc, #72]	; (8004d14 <HAL_UART_MspInit+0xe4>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004cd0:	4b10      	ldr	r3, [pc, #64]	; (8004d14 <HAL_UART_MspInit+0xe4>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004cd6:	480f      	ldr	r0, [pc, #60]	; (8004d14 <HAL_UART_MspInit+0xe4>)
 8004cd8:	f7fb fbf1 	bl	80004be <HAL_DMA_Init>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8004ce2:	f7ff fdcb 	bl	800487c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a0a      	ldr	r2, [pc, #40]	; (8004d14 <HAL_UART_MspInit+0xe4>)
 8004cea:	661a      	str	r2, [r3, #96]	; 0x60
 8004cec:	4a09      	ldr	r2, [pc, #36]	; (8004d14 <HAL_UART_MspInit+0xe4>)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	2026      	movs	r0, #38	; 0x26
 8004cf8:	f7fb fbab 	bl	8000452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004cfc:	2026      	movs	r0, #38	; 0x26
 8004cfe:	f7fb fbc4 	bl	800048a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004d02:	bf00      	nop
 8004d04:	3728      	adds	r7, #40	; 0x28
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	40004400 	.word	0x40004400
 8004d10:	40021000 	.word	0x40021000
 8004d14:	20000300 	.word	0x20000300
 8004d18:	40020080 	.word	0x40020080

08004d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004d20:	bf00      	nop
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d2e:	e7fe      	b.n	8004d2e <HardFault_Handler+0x4>

08004d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d34:	e7fe      	b.n	8004d34 <MemManage_Handler+0x4>

08004d36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d36:	b480      	push	{r7}
 8004d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d3a:	e7fe      	b.n	8004d3a <BusFault_Handler+0x4>

08004d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d40:	e7fe      	b.n	8004d40 <UsageFault_Handler+0x4>

08004d42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d42:	b480      	push	{r7}
 8004d44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d46:	bf00      	nop
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d54:	bf00      	nop
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d62:	bf00      	nop
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d70:	f7fb fa78 	bl	8000264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d74:	bf00      	nop
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8004d7c:	4802      	ldr	r0, [pc, #8]	; (8004d88 <DMA1_Channel2_IRQHandler+0x10>)
 8004d7e:	f7fb fc82 	bl	8000686 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004d82:	bf00      	nop
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	2000020c 	.word	0x2000020c

08004d8c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004d90:	4802      	ldr	r0, [pc, #8]	; (8004d9c <DMA1_Channel7_IRQHandler+0x10>)
 8004d92:	f7fb fc78 	bl	8000686 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8004d96:	bf00      	nop
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	20000300 	.word	0x20000300

08004da0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	extern	uint16_t	tim2_flag;
	  tim2_flag = 1;
 8004da4:	4b03      	ldr	r3, [pc, #12]	; (8004db4 <TIM2_IRQHandler+0x14>)
 8004da6:	2201      	movs	r2, #1
 8004da8:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004daa:	4803      	ldr	r0, [pc, #12]	; (8004db8 <TIM2_IRQHandler+0x18>)
 8004dac:	f7fd fa62 	bl	8002274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004db0:	bf00      	nop
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	200001fa 	.word	0x200001fa
 8004db8:	2000048c 	.word	0x2000048c

08004dbc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
extern	uint16_t	tim3_flag;
  tim3_flag = 1;
 8004dc0:	4b03      	ldr	r3, [pc, #12]	; (8004dd0 <TIM3_IRQHandler+0x14>)
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004dc6:	4803      	ldr	r0, [pc, #12]	; (8004dd4 <TIM3_IRQHandler+0x18>)
 8004dc8:	f7fd fa54 	bl	8002274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004dcc:	bf00      	nop
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	200001f8 	.word	0x200001f8
 8004dd4:	200002bc 	.word	0x200002bc

08004dd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004ddc:	4802      	ldr	r0, [pc, #8]	; (8004de8 <USART2_IRQHandler+0x10>)
 8004dde:	f7fe fc35 	bl	800364c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004de2:	bf00      	nop
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	200004cc 	.word	0x200004cc

08004dec <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004df0:	4b1f      	ldr	r3, [pc, #124]	; (8004e70 <SystemInit+0x84>)
 8004df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df6:	4a1e      	ldr	r2, [pc, #120]	; (8004e70 <SystemInit+0x84>)
 8004df8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004dfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004e00:	4b1c      	ldr	r3, [pc, #112]	; (8004e74 <SystemInit+0x88>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a1b      	ldr	r2, [pc, #108]	; (8004e74 <SystemInit+0x88>)
 8004e06:	f043 0301 	orr.w	r3, r3, #1
 8004e0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8004e0c:	4b19      	ldr	r3, [pc, #100]	; (8004e74 <SystemInit+0x88>)
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	4918      	ldr	r1, [pc, #96]	; (8004e74 <SystemInit+0x88>)
 8004e12:	4b19      	ldr	r3, [pc, #100]	; (8004e78 <SystemInit+0x8c>)
 8004e14:	4013      	ands	r3, r2
 8004e16:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004e18:	4b16      	ldr	r3, [pc, #88]	; (8004e74 <SystemInit+0x88>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a15      	ldr	r2, [pc, #84]	; (8004e74 <SystemInit+0x88>)
 8004e1e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e26:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004e28:	4b12      	ldr	r3, [pc, #72]	; (8004e74 <SystemInit+0x88>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a11      	ldr	r2, [pc, #68]	; (8004e74 <SystemInit+0x88>)
 8004e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e32:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004e34:	4b0f      	ldr	r3, [pc, #60]	; (8004e74 <SystemInit+0x88>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	4a0e      	ldr	r2, [pc, #56]	; (8004e74 <SystemInit+0x88>)
 8004e3a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004e3e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8004e40:	4b0c      	ldr	r3, [pc, #48]	; (8004e74 <SystemInit+0x88>)
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	4a0b      	ldr	r2, [pc, #44]	; (8004e74 <SystemInit+0x88>)
 8004e46:	f023 030f 	bic.w	r3, r3, #15
 8004e4a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8004e4c:	4b09      	ldr	r3, [pc, #36]	; (8004e74 <SystemInit+0x88>)
 8004e4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e50:	4908      	ldr	r1, [pc, #32]	; (8004e74 <SystemInit+0x88>)
 8004e52:	4b0a      	ldr	r3, [pc, #40]	; (8004e7c <SystemInit+0x90>)
 8004e54:	4013      	ands	r3, r2
 8004e56:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004e58:	4b06      	ldr	r3, [pc, #24]	; (8004e74 <SystemInit+0x88>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004e5e:	4b04      	ldr	r3, [pc, #16]	; (8004e70 <SystemInit+0x84>)
 8004e60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004e64:	609a      	str	r2, [r3, #8]
#endif
}
 8004e66:	bf00      	nop
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	e000ed00 	.word	0xe000ed00
 8004e74:	40021000 	.word	0x40021000
 8004e78:	f87fc00c 	.word	0xf87fc00c
 8004e7c:	ff00fccc 	.word	0xff00fccc

08004e80 <tx_buffer>:
extern uint8_t uart2_rx_buffer_ready;
extern s_uart_rxbuf uart_rxbuf;

uint16_t busy_flag;
void tx_buffer(uint8_t *pData)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
	busy_flag = 1;
 8004e88:	4b08      	ldr	r3, [pc, #32]	; (8004eac <tx_buffer+0x2c>)
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart2, pData, strlen((char *)pData));
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7fb f99a 	bl	80001c8 <strlen>
 8004e94:	4603      	mov	r3, r0
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	461a      	mov	r2, r3
 8004e9a:	6879      	ldr	r1, [r7, #4]
 8004e9c:	4804      	ldr	r0, [pc, #16]	; (8004eb0 <tx_buffer+0x30>)
 8004e9e:	f7fe fb69 	bl	8003574 <HAL_UART_Transmit_DMA>
}
 8004ea2:	bf00      	nop
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	200006f4 	.word	0x200006f4
 8004eb0:	200004cc 	.word	0x200004cc

08004eb4 <uart_start>:
{
	busy_flag = 0;
}

void uart_start(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &uart_rxbuf.packet[0], 1);
 8004eb8:	2201      	movs	r2, #1
 8004eba:	4904      	ldr	r1, [pc, #16]	; (8004ecc <uart_start+0x18>)
 8004ebc:	4804      	ldr	r0, [pc, #16]	; (8004ed0 <uart_start+0x1c>)
 8004ebe:	f7fe fad2 	bl	8003466 <HAL_UART_Receive_IT>
	tx_buffer((uint8_t *)("Ciao fil\n\r"));
 8004ec2:	4804      	ldr	r0, [pc, #16]	; (8004ed4 <uart_start+0x20>)
 8004ec4:	f7ff ffdc 	bl	8004e80 <tx_buffer>
}
 8004ec8:	bf00      	nop
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	2000053d 	.word	0x2000053d
 8004ed0:	200004cc 	.word	0x200004cc
 8004ed4:	080053bc 	.word	0x080053bc

08004ed8 <HAL_UART_RxCpltCallback>:

uint8_t header=0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
	!1122# or
	$112233# or
	&11223344# or
	=1122334455#
	*/
	if ( header == 0 )
 8004ee0:	4b46      	ldr	r3, [pc, #280]	; (8004ffc <HAL_UART_RxCpltCallback+0x124>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d172      	bne.n	8004fce <HAL_UART_RxCpltCallback+0xf6>
	{
		switch(uart_rxbuf.packet[0])
 8004ee8:	4b45      	ldr	r3, [pc, #276]	; (8005000 <HAL_UART_RxCpltCallback+0x128>)
 8004eea:	785b      	ldrb	r3, [r3, #1]
 8004eec:	3b21      	subs	r3, #33	; 0x21
 8004eee:	2b1c      	cmp	r3, #28
 8004ef0:	d858      	bhi.n	8004fa4 <HAL_UART_RxCpltCallback+0xcc>
 8004ef2:	a201      	add	r2, pc, #4	; (adr r2, 8004ef8 <HAL_UART_RxCpltCallback+0x20>)
 8004ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef8:	08004f6d 	.word	0x08004f6d
 8004efc:	08004fa5 	.word	0x08004fa5
 8004f00:	08004fa5 	.word	0x08004fa5
 8004f04:	08004f7b 	.word	0x08004f7b
 8004f08:	08004fa5 	.word	0x08004fa5
 8004f0c:	08004f89 	.word	0x08004f89
 8004f10:	08004fa5 	.word	0x08004fa5
 8004f14:	08004fa5 	.word	0x08004fa5
 8004f18:	08004fa5 	.word	0x08004fa5
 8004f1c:	08004fa5 	.word	0x08004fa5
 8004f20:	08004fa5 	.word	0x08004fa5
 8004f24:	08004fa5 	.word	0x08004fa5
 8004f28:	08004fa5 	.word	0x08004fa5
 8004f2c:	08004fa5 	.word	0x08004fa5
 8004f30:	08004fa5 	.word	0x08004fa5
 8004f34:	08004fa5 	.word	0x08004fa5
 8004f38:	08004fa5 	.word	0x08004fa5
 8004f3c:	08004fa5 	.word	0x08004fa5
 8004f40:	08004fa5 	.word	0x08004fa5
 8004f44:	08004fa5 	.word	0x08004fa5
 8004f48:	08004fa5 	.word	0x08004fa5
 8004f4c:	08004fa5 	.word	0x08004fa5
 8004f50:	08004fa5 	.word	0x08004fa5
 8004f54:	08004fa5 	.word	0x08004fa5
 8004f58:	08004fa5 	.word	0x08004fa5
 8004f5c:	08004fa5 	.word	0x08004fa5
 8004f60:	08004fa5 	.word	0x08004fa5
 8004f64:	08004fa5 	.word	0x08004fa5
 8004f68:	08004f97 	.word	0x08004f97
		{
		case	'!' : 	uart_rxbuf.byte_count=6;
 8004f6c:	4b24      	ldr	r3, [pc, #144]	; (8005000 <HAL_UART_RxCpltCallback+0x128>)
 8004f6e:	2206      	movs	r2, #6
 8004f70:	701a      	strb	r2, [r3, #0]
						header = 1;
 8004f72:	4b22      	ldr	r3, [pc, #136]	; (8004ffc <HAL_UART_RxCpltCallback+0x124>)
 8004f74:	2201      	movs	r2, #1
 8004f76:	701a      	strb	r2, [r3, #0]
						break;
 8004f78:	e01a      	b.n	8004fb0 <HAL_UART_RxCpltCallback+0xd8>
		case	'$' : 	uart_rxbuf.byte_count=8;
 8004f7a:	4b21      	ldr	r3, [pc, #132]	; (8005000 <HAL_UART_RxCpltCallback+0x128>)
 8004f7c:	2208      	movs	r2, #8
 8004f7e:	701a      	strb	r2, [r3, #0]
						header = 1;
 8004f80:	4b1e      	ldr	r3, [pc, #120]	; (8004ffc <HAL_UART_RxCpltCallback+0x124>)
 8004f82:	2201      	movs	r2, #1
 8004f84:	701a      	strb	r2, [r3, #0]
						break;
 8004f86:	e013      	b.n	8004fb0 <HAL_UART_RxCpltCallback+0xd8>
		case	'&' : 	uart_rxbuf.byte_count=10;
 8004f88:	4b1d      	ldr	r3, [pc, #116]	; (8005000 <HAL_UART_RxCpltCallback+0x128>)
 8004f8a:	220a      	movs	r2, #10
 8004f8c:	701a      	strb	r2, [r3, #0]
						header = 1;
 8004f8e:	4b1b      	ldr	r3, [pc, #108]	; (8004ffc <HAL_UART_RxCpltCallback+0x124>)
 8004f90:	2201      	movs	r2, #1
 8004f92:	701a      	strb	r2, [r3, #0]
						break;
 8004f94:	e00c      	b.n	8004fb0 <HAL_UART_RxCpltCallback+0xd8>
		case	'=' : 	uart_rxbuf.byte_count=12;
 8004f96:	4b1a      	ldr	r3, [pc, #104]	; (8005000 <HAL_UART_RxCpltCallback+0x128>)
 8004f98:	220c      	movs	r2, #12
 8004f9a:	701a      	strb	r2, [r3, #0]
						header = 1;
 8004f9c:	4b17      	ldr	r3, [pc, #92]	; (8004ffc <HAL_UART_RxCpltCallback+0x124>)
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	701a      	strb	r2, [r3, #0]
						break;
 8004fa2:	e005      	b.n	8004fb0 <HAL_UART_RxCpltCallback+0xd8>
		default :
						HAL_UART_Receive_IT(&huart2, &uart_rxbuf.packet[0], 1);
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	4917      	ldr	r1, [pc, #92]	; (8005004 <HAL_UART_RxCpltCallback+0x12c>)
 8004fa8:	4817      	ldr	r0, [pc, #92]	; (8005008 <HAL_UART_RxCpltCallback+0x130>)
 8004faa:	f7fe fa5c 	bl	8003466 <HAL_UART_Receive_IT>
						break;
 8004fae:	bf00      	nop
		}
		if ( header == 1 )
 8004fb0:	4b12      	ldr	r3, [pc, #72]	; (8004ffc <HAL_UART_RxCpltCallback+0x124>)
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d11d      	bne.n	8004ff4 <HAL_UART_RxCpltCallback+0x11c>
		{
			HAL_UART_Receive_IT(&huart2, &uart_rxbuf.packet[1], uart_rxbuf.byte_count-1);
 8004fb8:	4b11      	ldr	r3, [pc, #68]	; (8005000 <HAL_UART_RxCpltCallback+0x128>)
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	4911      	ldr	r1, [pc, #68]	; (800500c <HAL_UART_RxCpltCallback+0x134>)
 8004fc6:	4810      	ldr	r0, [pc, #64]	; (8005008 <HAL_UART_RxCpltCallback+0x130>)
 8004fc8:	f7fe fa4d 	bl	8003466 <HAL_UART_Receive_IT>
		if( uart_rxbuf.packet[uart_rxbuf.byte_count-1] == '#')
			uart2_rx_buffer_ready=1;
		header = 0;
		HAL_UART_Receive_IT(&huart2, &uart_rxbuf.packet[0], 1);
	}
}
 8004fcc:	e012      	b.n	8004ff4 <HAL_UART_RxCpltCallback+0x11c>
		if( uart_rxbuf.packet[uart_rxbuf.byte_count-1] == '#')
 8004fce:	4b0c      	ldr	r3, [pc, #48]	; (8005000 <HAL_UART_RxCpltCallback+0x128>)
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	4a0a      	ldr	r2, [pc, #40]	; (8005000 <HAL_UART_RxCpltCallback+0x128>)
 8004fd6:	4413      	add	r3, r2
 8004fd8:	785b      	ldrb	r3, [r3, #1]
 8004fda:	2b23      	cmp	r3, #35	; 0x23
 8004fdc:	d102      	bne.n	8004fe4 <HAL_UART_RxCpltCallback+0x10c>
			uart2_rx_buffer_ready=1;
 8004fde:	4b0c      	ldr	r3, [pc, #48]	; (8005010 <HAL_UART_RxCpltCallback+0x138>)
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	701a      	strb	r2, [r3, #0]
		header = 0;
 8004fe4:	4b05      	ldr	r3, [pc, #20]	; (8004ffc <HAL_UART_RxCpltCallback+0x124>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &uart_rxbuf.packet[0], 1);
 8004fea:	2201      	movs	r2, #1
 8004fec:	4905      	ldr	r1, [pc, #20]	; (8005004 <HAL_UART_RxCpltCallback+0x12c>)
 8004fee:	4806      	ldr	r0, [pc, #24]	; (8005008 <HAL_UART_RxCpltCallback+0x130>)
 8004ff0:	f7fe fa39 	bl	8003466 <HAL_UART_Receive_IT>
}
 8004ff4:	bf00      	nop
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	200001fe 	.word	0x200001fe
 8005000:	2000053c 	.word	0x2000053c
 8005004:	2000053d 	.word	0x2000053d
 8005008:	200004cc 	.word	0x200004cc
 800500c:	2000053e 	.word	0x2000053e
 8005010:	200002fc 	.word	0x200002fc

08005014 <compile_shadow>:
uint8_t tbyte[6];
char a[2];
uint16_t	i,j=0,err_check=0,shadow_buf_index,bye_count=0;
uint16_t 	l_shadow_buf[8];
void compile_shadow(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0


	for(i=0;i< uart_rxbuf.packet[uart_rxbuf.byte_count];i+=2)
 8005018:	4b4e      	ldr	r3, [pc, #312]	; (8005154 <compile_shadow+0x140>)
 800501a:	2200      	movs	r2, #0
 800501c:	801a      	strh	r2, [r3, #0]
 800501e:	e033      	b.n	8005088 <compile_shadow+0x74>
	{
		a[0] = (char )uart_rxbuf.packet[i+1];
 8005020:	4b4c      	ldr	r3, [pc, #304]	; (8005154 <compile_shadow+0x140>)
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	3301      	adds	r3, #1
 8005026:	4a4c      	ldr	r2, [pc, #304]	; (8005158 <compile_shadow+0x144>)
 8005028:	4413      	add	r3, r2
 800502a:	785a      	ldrb	r2, [r3, #1]
 800502c:	4b4b      	ldr	r3, [pc, #300]	; (800515c <compile_shadow+0x148>)
 800502e:	701a      	strb	r2, [r3, #0]
		a[1] = (char )uart_rxbuf.packet[i+2];
 8005030:	4b48      	ldr	r3, [pc, #288]	; (8005154 <compile_shadow+0x140>)
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	3302      	adds	r3, #2
 8005036:	4a48      	ldr	r2, [pc, #288]	; (8005158 <compile_shadow+0x144>)
 8005038:	4413      	add	r3, r2
 800503a:	785a      	ldrb	r2, [r3, #1]
 800503c:	4b47      	ldr	r3, [pc, #284]	; (800515c <compile_shadow+0x148>)
 800503e:	705a      	strb	r2, [r3, #1]
		tbyte[bye_count] = (uint8_t )strtol(a, NULL, 16);
 8005040:	2210      	movs	r2, #16
 8005042:	2100      	movs	r1, #0
 8005044:	4845      	ldr	r0, [pc, #276]	; (800515c <compile_shadow+0x148>)
 8005046:	f000 f975 	bl	8005334 <strtol>
 800504a:	4601      	mov	r1, r0
 800504c:	4b44      	ldr	r3, [pc, #272]	; (8005160 <compile_shadow+0x14c>)
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	461a      	mov	r2, r3
 8005052:	b2c9      	uxtb	r1, r1
 8005054:	4b43      	ldr	r3, [pc, #268]	; (8005164 <compile_shadow+0x150>)
 8005056:	5499      	strb	r1, [r3, r2]
		err_check ^= tbyte[bye_count];
 8005058:	4b41      	ldr	r3, [pc, #260]	; (8005160 <compile_shadow+0x14c>)
 800505a:	881b      	ldrh	r3, [r3, #0]
 800505c:	461a      	mov	r2, r3
 800505e:	4b41      	ldr	r3, [pc, #260]	; (8005164 <compile_shadow+0x150>)
 8005060:	5c9b      	ldrb	r3, [r3, r2]
 8005062:	b29a      	uxth	r2, r3
 8005064:	4b40      	ldr	r3, [pc, #256]	; (8005168 <compile_shadow+0x154>)
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	4053      	eors	r3, r2
 800506a:	b29a      	uxth	r2, r3
 800506c:	4b3e      	ldr	r3, [pc, #248]	; (8005168 <compile_shadow+0x154>)
 800506e:	801a      	strh	r2, [r3, #0]
		bye_count++;
 8005070:	4b3b      	ldr	r3, [pc, #236]	; (8005160 <compile_shadow+0x14c>)
 8005072:	881b      	ldrh	r3, [r3, #0]
 8005074:	3301      	adds	r3, #1
 8005076:	b29a      	uxth	r2, r3
 8005078:	4b39      	ldr	r3, [pc, #228]	; (8005160 <compile_shadow+0x14c>)
 800507a:	801a      	strh	r2, [r3, #0]
	for(i=0;i< uart_rxbuf.packet[uart_rxbuf.byte_count];i+=2)
 800507c:	4b35      	ldr	r3, [pc, #212]	; (8005154 <compile_shadow+0x140>)
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	3302      	adds	r3, #2
 8005082:	b29a      	uxth	r2, r3
 8005084:	4b33      	ldr	r3, [pc, #204]	; (8005154 <compile_shadow+0x140>)
 8005086:	801a      	strh	r2, [r3, #0]
 8005088:	4b33      	ldr	r3, [pc, #204]	; (8005158 <compile_shadow+0x144>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	461a      	mov	r2, r3
 800508e:	4b32      	ldr	r3, [pc, #200]	; (8005158 <compile_shadow+0x144>)
 8005090:	4413      	add	r3, r2
 8005092:	785b      	ldrb	r3, [r3, #1]
 8005094:	b29a      	uxth	r2, r3
 8005096:	4b2f      	ldr	r3, [pc, #188]	; (8005154 <compile_shadow+0x140>)
 8005098:	881b      	ldrh	r3, [r3, #0]
 800509a:	429a      	cmp	r2, r3
 800509c:	d8c0      	bhi.n	8005020 <compile_shadow+0xc>
	}
	tbyte[bye_count] = err_check;
 800509e:	4b32      	ldr	r3, [pc, #200]	; (8005168 <compile_shadow+0x154>)
 80050a0:	8819      	ldrh	r1, [r3, #0]
 80050a2:	4b2f      	ldr	r3, [pc, #188]	; (8005160 <compile_shadow+0x14c>)
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	461a      	mov	r2, r3
 80050a8:	b2c9      	uxtb	r1, r1
 80050aa:	4b2e      	ldr	r3, [pc, #184]	; (8005164 <compile_shadow+0x150>)
 80050ac:	5499      	strb	r1, [r3, r2]
	for(i=0;i< bye_count+1;i++)
 80050ae:	4b29      	ldr	r3, [pc, #164]	; (8005154 <compile_shadow+0x140>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	801a      	strh	r2, [r3, #0]
 80050b4:	e044      	b.n	8005140 <compile_shadow+0x12c>
	{
		shadow_buf_index=16;
 80050b6:	4b2d      	ldr	r3, [pc, #180]	; (800516c <compile_shadow+0x158>)
 80050b8:	2210      	movs	r2, #16
 80050ba:	801a      	strh	r2, [r3, #0]
		for (j=0;j<8;j++)
 80050bc:	4b2c      	ldr	r3, [pc, #176]	; (8005170 <compile_shadow+0x15c>)
 80050be:	2200      	movs	r2, #0
 80050c0:	801a      	strh	r2, [r3, #0]
 80050c2:	e023      	b.n	800510c <compile_shadow+0xf8>
		{
			l_shadow_buf[7-i] = BIT_0;
 80050c4:	4b23      	ldr	r3, [pc, #140]	; (8005154 <compile_shadow+0x140>)
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	f1c3 0307 	rsb	r3, r3, #7
 80050cc:	4a29      	ldr	r2, [pc, #164]	; (8005174 <compile_shadow+0x160>)
 80050ce:	217c      	movs	r1, #124	; 0x7c
 80050d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if ( (tbyte[i] & (1 << i)) != 0 )
 80050d4:	4b1f      	ldr	r3, [pc, #124]	; (8005154 <compile_shadow+0x140>)
 80050d6:	881b      	ldrh	r3, [r3, #0]
 80050d8:	461a      	mov	r2, r3
 80050da:	4b22      	ldr	r3, [pc, #136]	; (8005164 <compile_shadow+0x150>)
 80050dc:	5c9b      	ldrb	r3, [r3, r2]
 80050de:	461a      	mov	r2, r3
 80050e0:	4b1c      	ldr	r3, [pc, #112]	; (8005154 <compile_shadow+0x140>)
 80050e2:	881b      	ldrh	r3, [r3, #0]
 80050e4:	fa42 f303 	asr.w	r3, r2, r3
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d007      	beq.n	8005100 <compile_shadow+0xec>
				l_shadow_buf[7-i] = BIT_1;
 80050f0:	4b18      	ldr	r3, [pc, #96]	; (8005154 <compile_shadow+0x140>)
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	f1c3 0307 	rsb	r3, r3, #7
 80050f8:	4a1e      	ldr	r2, [pc, #120]	; (8005174 <compile_shadow+0x160>)
 80050fa:	213e      	movs	r1, #62	; 0x3e
 80050fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (j=0;j<8;j++)
 8005100:	4b1b      	ldr	r3, [pc, #108]	; (8005170 <compile_shadow+0x15c>)
 8005102:	881b      	ldrh	r3, [r3, #0]
 8005104:	3301      	adds	r3, #1
 8005106:	b29a      	uxth	r2, r3
 8005108:	4b19      	ldr	r3, [pc, #100]	; (8005170 <compile_shadow+0x15c>)
 800510a:	801a      	strh	r2, [r3, #0]
 800510c:	4b18      	ldr	r3, [pc, #96]	; (8005170 <compile_shadow+0x15c>)
 800510e:	881b      	ldrh	r3, [r3, #0]
 8005110:	2b07      	cmp	r3, #7
 8005112:	d9d7      	bls.n	80050c4 <compile_shadow+0xb0>
		}
		memcpy(&shadow_buf[shadow_buf_index],l_shadow_buf,sizeof(l_shadow_buf));
 8005114:	4b15      	ldr	r3, [pc, #84]	; (800516c <compile_shadow+0x158>)
 8005116:	881b      	ldrh	r3, [r3, #0]
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	4a17      	ldr	r2, [pc, #92]	; (8005178 <compile_shadow+0x164>)
 800511c:	4413      	add	r3, r2
 800511e:	2210      	movs	r2, #16
 8005120:	4914      	ldr	r1, [pc, #80]	; (8005174 <compile_shadow+0x160>)
 8005122:	4618      	mov	r0, r3
 8005124:	f000 f878 	bl	8005218 <memcpy>
		shadow_buf_index+=9;
 8005128:	4b10      	ldr	r3, [pc, #64]	; (800516c <compile_shadow+0x158>)
 800512a:	881b      	ldrh	r3, [r3, #0]
 800512c:	3309      	adds	r3, #9
 800512e:	b29a      	uxth	r2, r3
 8005130:	4b0e      	ldr	r3, [pc, #56]	; (800516c <compile_shadow+0x158>)
 8005132:	801a      	strh	r2, [r3, #0]
	for(i=0;i< bye_count+1;i++)
 8005134:	4b07      	ldr	r3, [pc, #28]	; (8005154 <compile_shadow+0x140>)
 8005136:	881b      	ldrh	r3, [r3, #0]
 8005138:	3301      	adds	r3, #1
 800513a:	b29a      	uxth	r2, r3
 800513c:	4b05      	ldr	r3, [pc, #20]	; (8005154 <compile_shadow+0x140>)
 800513e:	801a      	strh	r2, [r3, #0]
 8005140:	4b04      	ldr	r3, [pc, #16]	; (8005154 <compile_shadow+0x140>)
 8005142:	881b      	ldrh	r3, [r3, #0]
 8005144:	461a      	mov	r2, r3
 8005146:	4b06      	ldr	r3, [pc, #24]	; (8005160 <compile_shadow+0x14c>)
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	3301      	adds	r3, #1
 800514c:	429a      	cmp	r2, r3
 800514e:	dbb2      	blt.n	80050b6 <compile_shadow+0xa2>
	}
}
 8005150:	bf00      	nop
 8005152:	bd80      	pop	{r7, pc}
 8005154:	200006f6 	.word	0x200006f6
 8005158:	2000053c 	.word	0x2000053c
 800515c:	20000704 	.word	0x20000704
 8005160:	20000204 	.word	0x20000204
 8005164:	200006fc 	.word	0x200006fc
 8005168:	20000202 	.word	0x20000202
 800516c:	200006f8 	.word	0x200006f8
 8005170:	20000200 	.word	0x20000200
 8005174:	200006e4 	.word	0x200006e4
 8005178:	2000054c 	.word	0x2000054c

0800517c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800517c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80051b4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005180:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005182:	e003      	b.n	800518c <LoopCopyDataInit>

08005184 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005184:	4b0c      	ldr	r3, [pc, #48]	; (80051b8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005186:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005188:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800518a:	3104      	adds	r1, #4

0800518c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800518c:	480b      	ldr	r0, [pc, #44]	; (80051bc <LoopForever+0xa>)
	ldr	r3, =_edata
 800518e:	4b0c      	ldr	r3, [pc, #48]	; (80051c0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005190:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005192:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005194:	d3f6      	bcc.n	8005184 <CopyDataInit>
	ldr	r2, =_sbss
 8005196:	4a0b      	ldr	r2, [pc, #44]	; (80051c4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005198:	e002      	b.n	80051a0 <LoopFillZerobss>

0800519a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800519a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800519c:	f842 3b04 	str.w	r3, [r2], #4

080051a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80051a0:	4b09      	ldr	r3, [pc, #36]	; (80051c8 <LoopForever+0x16>)
	cmp	r2, r3
 80051a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80051a4:	d3f9      	bcc.n	800519a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80051a6:	f7ff fe21 	bl	8004dec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80051aa:	f000 f811 	bl	80051d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80051ae:	f7ff f831 	bl	8004214 <main>

080051b2 <LoopForever>:

LoopForever:
    b LoopForever
 80051b2:	e7fe      	b.n	80051b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80051b4:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80051b8:	08005514 	.word	0x08005514
	ldr	r0, =_sdata
 80051bc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80051c0:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 80051c4:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 80051c8:	20000708 	.word	0x20000708

080051cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80051cc:	e7fe      	b.n	80051cc <ADC1_2_IRQHandler>
	...

080051d0 <__libc_init_array>:
 80051d0:	b570      	push	{r4, r5, r6, lr}
 80051d2:	4e0d      	ldr	r6, [pc, #52]	; (8005208 <__libc_init_array+0x38>)
 80051d4:	4c0d      	ldr	r4, [pc, #52]	; (800520c <__libc_init_array+0x3c>)
 80051d6:	1ba4      	subs	r4, r4, r6
 80051d8:	10a4      	asrs	r4, r4, #2
 80051da:	2500      	movs	r5, #0
 80051dc:	42a5      	cmp	r5, r4
 80051de:	d109      	bne.n	80051f4 <__libc_init_array+0x24>
 80051e0:	4e0b      	ldr	r6, [pc, #44]	; (8005210 <__libc_init_array+0x40>)
 80051e2:	4c0c      	ldr	r4, [pc, #48]	; (8005214 <__libc_init_array+0x44>)
 80051e4:	f000 f8de 	bl	80053a4 <_init>
 80051e8:	1ba4      	subs	r4, r4, r6
 80051ea:	10a4      	asrs	r4, r4, #2
 80051ec:	2500      	movs	r5, #0
 80051ee:	42a5      	cmp	r5, r4
 80051f0:	d105      	bne.n	80051fe <__libc_init_array+0x2e>
 80051f2:	bd70      	pop	{r4, r5, r6, pc}
 80051f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80051f8:	4798      	blx	r3
 80051fa:	3501      	adds	r5, #1
 80051fc:	e7ee      	b.n	80051dc <__libc_init_array+0xc>
 80051fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005202:	4798      	blx	r3
 8005204:	3501      	adds	r5, #1
 8005206:	e7f2      	b.n	80051ee <__libc_init_array+0x1e>
 8005208:	0800550c 	.word	0x0800550c
 800520c:	0800550c 	.word	0x0800550c
 8005210:	0800550c 	.word	0x0800550c
 8005214:	08005510 	.word	0x08005510

08005218 <memcpy>:
 8005218:	b510      	push	{r4, lr}
 800521a:	1e43      	subs	r3, r0, #1
 800521c:	440a      	add	r2, r1
 800521e:	4291      	cmp	r1, r2
 8005220:	d100      	bne.n	8005224 <memcpy+0xc>
 8005222:	bd10      	pop	{r4, pc}
 8005224:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005228:	f803 4f01 	strb.w	r4, [r3, #1]!
 800522c:	e7f7      	b.n	800521e <memcpy+0x6>

0800522e <memset>:
 800522e:	4402      	add	r2, r0
 8005230:	4603      	mov	r3, r0
 8005232:	4293      	cmp	r3, r2
 8005234:	d100      	bne.n	8005238 <memset+0xa>
 8005236:	4770      	bx	lr
 8005238:	f803 1b01 	strb.w	r1, [r3], #1
 800523c:	e7f9      	b.n	8005232 <memset+0x4>

0800523e <_strtol_l.isra.0>:
 800523e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005242:	4680      	mov	r8, r0
 8005244:	4689      	mov	r9, r1
 8005246:	4692      	mov	sl, r2
 8005248:	461e      	mov	r6, r3
 800524a:	460f      	mov	r7, r1
 800524c:	463d      	mov	r5, r7
 800524e:	9808      	ldr	r0, [sp, #32]
 8005250:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005254:	f000 f884 	bl	8005360 <__locale_ctype_ptr_l>
 8005258:	4420      	add	r0, r4
 800525a:	7843      	ldrb	r3, [r0, #1]
 800525c:	f013 0308 	ands.w	r3, r3, #8
 8005260:	d132      	bne.n	80052c8 <_strtol_l.isra.0+0x8a>
 8005262:	2c2d      	cmp	r4, #45	; 0x2d
 8005264:	d132      	bne.n	80052cc <_strtol_l.isra.0+0x8e>
 8005266:	787c      	ldrb	r4, [r7, #1]
 8005268:	1cbd      	adds	r5, r7, #2
 800526a:	2201      	movs	r2, #1
 800526c:	2e00      	cmp	r6, #0
 800526e:	d05d      	beq.n	800532c <_strtol_l.isra.0+0xee>
 8005270:	2e10      	cmp	r6, #16
 8005272:	d109      	bne.n	8005288 <_strtol_l.isra.0+0x4a>
 8005274:	2c30      	cmp	r4, #48	; 0x30
 8005276:	d107      	bne.n	8005288 <_strtol_l.isra.0+0x4a>
 8005278:	782b      	ldrb	r3, [r5, #0]
 800527a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800527e:	2b58      	cmp	r3, #88	; 0x58
 8005280:	d14f      	bne.n	8005322 <_strtol_l.isra.0+0xe4>
 8005282:	786c      	ldrb	r4, [r5, #1]
 8005284:	2610      	movs	r6, #16
 8005286:	3502      	adds	r5, #2
 8005288:	2a00      	cmp	r2, #0
 800528a:	bf14      	ite	ne
 800528c:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005290:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005294:	2700      	movs	r7, #0
 8005296:	fbb1 fcf6 	udiv	ip, r1, r6
 800529a:	4638      	mov	r0, r7
 800529c:	fb06 1e1c 	mls	lr, r6, ip, r1
 80052a0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80052a4:	2b09      	cmp	r3, #9
 80052a6:	d817      	bhi.n	80052d8 <_strtol_l.isra.0+0x9a>
 80052a8:	461c      	mov	r4, r3
 80052aa:	42a6      	cmp	r6, r4
 80052ac:	dd23      	ble.n	80052f6 <_strtol_l.isra.0+0xb8>
 80052ae:	1c7b      	adds	r3, r7, #1
 80052b0:	d007      	beq.n	80052c2 <_strtol_l.isra.0+0x84>
 80052b2:	4584      	cmp	ip, r0
 80052b4:	d31c      	bcc.n	80052f0 <_strtol_l.isra.0+0xb2>
 80052b6:	d101      	bne.n	80052bc <_strtol_l.isra.0+0x7e>
 80052b8:	45a6      	cmp	lr, r4
 80052ba:	db19      	blt.n	80052f0 <_strtol_l.isra.0+0xb2>
 80052bc:	fb00 4006 	mla	r0, r0, r6, r4
 80052c0:	2701      	movs	r7, #1
 80052c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80052c6:	e7eb      	b.n	80052a0 <_strtol_l.isra.0+0x62>
 80052c8:	462f      	mov	r7, r5
 80052ca:	e7bf      	b.n	800524c <_strtol_l.isra.0+0xe>
 80052cc:	2c2b      	cmp	r4, #43	; 0x2b
 80052ce:	bf04      	itt	eq
 80052d0:	1cbd      	addeq	r5, r7, #2
 80052d2:	787c      	ldrbeq	r4, [r7, #1]
 80052d4:	461a      	mov	r2, r3
 80052d6:	e7c9      	b.n	800526c <_strtol_l.isra.0+0x2e>
 80052d8:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80052dc:	2b19      	cmp	r3, #25
 80052de:	d801      	bhi.n	80052e4 <_strtol_l.isra.0+0xa6>
 80052e0:	3c37      	subs	r4, #55	; 0x37
 80052e2:	e7e2      	b.n	80052aa <_strtol_l.isra.0+0x6c>
 80052e4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80052e8:	2b19      	cmp	r3, #25
 80052ea:	d804      	bhi.n	80052f6 <_strtol_l.isra.0+0xb8>
 80052ec:	3c57      	subs	r4, #87	; 0x57
 80052ee:	e7dc      	b.n	80052aa <_strtol_l.isra.0+0x6c>
 80052f0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80052f4:	e7e5      	b.n	80052c2 <_strtol_l.isra.0+0x84>
 80052f6:	1c7b      	adds	r3, r7, #1
 80052f8:	d108      	bne.n	800530c <_strtol_l.isra.0+0xce>
 80052fa:	2322      	movs	r3, #34	; 0x22
 80052fc:	f8c8 3000 	str.w	r3, [r8]
 8005300:	4608      	mov	r0, r1
 8005302:	f1ba 0f00 	cmp.w	sl, #0
 8005306:	d107      	bne.n	8005318 <_strtol_l.isra.0+0xda>
 8005308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800530c:	b102      	cbz	r2, 8005310 <_strtol_l.isra.0+0xd2>
 800530e:	4240      	negs	r0, r0
 8005310:	f1ba 0f00 	cmp.w	sl, #0
 8005314:	d0f8      	beq.n	8005308 <_strtol_l.isra.0+0xca>
 8005316:	b10f      	cbz	r7, 800531c <_strtol_l.isra.0+0xde>
 8005318:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800531c:	f8ca 9000 	str.w	r9, [sl]
 8005320:	e7f2      	b.n	8005308 <_strtol_l.isra.0+0xca>
 8005322:	2430      	movs	r4, #48	; 0x30
 8005324:	2e00      	cmp	r6, #0
 8005326:	d1af      	bne.n	8005288 <_strtol_l.isra.0+0x4a>
 8005328:	2608      	movs	r6, #8
 800532a:	e7ad      	b.n	8005288 <_strtol_l.isra.0+0x4a>
 800532c:	2c30      	cmp	r4, #48	; 0x30
 800532e:	d0a3      	beq.n	8005278 <_strtol_l.isra.0+0x3a>
 8005330:	260a      	movs	r6, #10
 8005332:	e7a9      	b.n	8005288 <_strtol_l.isra.0+0x4a>

08005334 <strtol>:
 8005334:	4b08      	ldr	r3, [pc, #32]	; (8005358 <strtol+0x24>)
 8005336:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005338:	681c      	ldr	r4, [r3, #0]
 800533a:	4d08      	ldr	r5, [pc, #32]	; (800535c <strtol+0x28>)
 800533c:	6a23      	ldr	r3, [r4, #32]
 800533e:	2b00      	cmp	r3, #0
 8005340:	bf08      	it	eq
 8005342:	462b      	moveq	r3, r5
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	4613      	mov	r3, r2
 8005348:	460a      	mov	r2, r1
 800534a:	4601      	mov	r1, r0
 800534c:	4620      	mov	r0, r4
 800534e:	f7ff ff76 	bl	800523e <_strtol_l.isra.0>
 8005352:	b003      	add	sp, #12
 8005354:	bd30      	pop	{r4, r5, pc}
 8005356:	bf00      	nop
 8005358:	2000000c 	.word	0x2000000c
 800535c:	20000070 	.word	0x20000070

08005360 <__locale_ctype_ptr_l>:
 8005360:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005364:	4770      	bx	lr

08005366 <__ascii_mbtowc>:
 8005366:	b082      	sub	sp, #8
 8005368:	b901      	cbnz	r1, 800536c <__ascii_mbtowc+0x6>
 800536a:	a901      	add	r1, sp, #4
 800536c:	b142      	cbz	r2, 8005380 <__ascii_mbtowc+0x1a>
 800536e:	b14b      	cbz	r3, 8005384 <__ascii_mbtowc+0x1e>
 8005370:	7813      	ldrb	r3, [r2, #0]
 8005372:	600b      	str	r3, [r1, #0]
 8005374:	7812      	ldrb	r2, [r2, #0]
 8005376:	1c10      	adds	r0, r2, #0
 8005378:	bf18      	it	ne
 800537a:	2001      	movne	r0, #1
 800537c:	b002      	add	sp, #8
 800537e:	4770      	bx	lr
 8005380:	4610      	mov	r0, r2
 8005382:	e7fb      	b.n	800537c <__ascii_mbtowc+0x16>
 8005384:	f06f 0001 	mvn.w	r0, #1
 8005388:	e7f8      	b.n	800537c <__ascii_mbtowc+0x16>

0800538a <__ascii_wctomb>:
 800538a:	b149      	cbz	r1, 80053a0 <__ascii_wctomb+0x16>
 800538c:	2aff      	cmp	r2, #255	; 0xff
 800538e:	bf85      	ittet	hi
 8005390:	238a      	movhi	r3, #138	; 0x8a
 8005392:	6003      	strhi	r3, [r0, #0]
 8005394:	700a      	strbls	r2, [r1, #0]
 8005396:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800539a:	bf98      	it	ls
 800539c:	2001      	movls	r0, #1
 800539e:	4770      	bx	lr
 80053a0:	4608      	mov	r0, r1
 80053a2:	4770      	bx	lr

080053a4 <_init>:
 80053a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a6:	bf00      	nop
 80053a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053aa:	bc08      	pop	{r3}
 80053ac:	469e      	mov	lr, r3
 80053ae:	4770      	bx	lr

080053b0 <_fini>:
 80053b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b2:	bf00      	nop
 80053b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053b6:	bc08      	pop	{r3}
 80053b8:	469e      	mov	lr, r3
 80053ba:	4770      	bx	lr
